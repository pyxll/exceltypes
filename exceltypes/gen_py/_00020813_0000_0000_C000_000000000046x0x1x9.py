# -*- coding: mbcs -*-
# Created by makepy.py forked at https://github.com/tonyroberts/pywin32/tree/type-stubs
# From type library 'EXCEL.EXE'
# On Tue Jan 12 15:15:53 2021

from __future__ import annotations
from ._2DF8D04C_5BFA_101B_BDE5_00AA0044DE52x0x2x8 import *

'Microsoft Excel 16.0 Object Library'
makepy_version = '0.5.01'
python_version = 0x30700f0

import win32com.client.CLSIDToClass, pythoncom, pywintypes
import win32com.client.util
from enum import Enum
import typing
from pywintypes import IID
from win32com.client import Dispatch

# The following 3 lines may need tweaking for the particular server
# Candidates are pythoncom.Missing, .Empty and .ArgNotFound
defaultNamedOptArg=pythoncom.Empty
defaultNamedNotOptArg=pythoncom.Empty
defaultUnnamedArg=pythoncom.Empty

CLSID = IID('{00020813-0000-0000-C000-000000000046}')
MajorVersion = 1
MinorVersion = 9
LibraryFlags = 8
LCID = 0x0

class Constants(Enum):
	xlAll                         =-4104
	xlAutomatic                   =-4105
	xlBoth                        =1
	xlCenter                      =-4108
	xlChecker                     =9
	xlCircle                      =8
	xlCorner                      =2
	xlCrissCross                  =16
	xlCross                       =4
	xlDiamond                     =2
	xlDistributed                 =-4117
	xlDoubleAccounting            =5
	xlFixedValue                  =1
	xlFormats                     =-4122
	xlGray16                      =17
	xlGray8                       =18
	xlGrid                        =15
	xlHigh                        =-4127
	xlInside                      =2
	xlJustify                     =-4130
	xlLightDown                   =13
	xlLightHorizontal             =11
	xlLightUp                     =14
	xlLightVertical               =12
	xlLow                         =-4134
	xlManual                      =-4135
	xlMinusValues                 =3
	xlModule                      =-4141
	xlNextToAxis                  =4
	xlNone                        =-4142
	xlNotes                       =-4144
	xlOff                         =-4146
	xlOn                          =1
	xlPercent                     =2
	xlPlus                        =9
	xlPlusValues                  =2
	xlSemiGray75                  =10
	xlShowLabel                   =4
	xlShowLabelAndPercent         =5
	xlShowPercent                 =3
	xlShowValue                   =2
	xlSimple                      =-4154
	xlSingle                      =2
	xlSingleAccounting            =4
	xlSolid                       =1
	xlSquare                      =1
	xlStar                        =5
	xlStError                     =4
	xlToolbarButton               =2
	xlTriangle                    =3
	xlGray25                      =-4124
	xlGray50                      =-4125
	xlGray75                      =-4126
	xlBottom                      =-4107
	xlLeft                        =-4131
	xlRight                       =-4152
	xlTop                         =-4160
	xl3DBar                       =-4099
	xl3DSurface                   =-4103
	xlBar                         =2
	xlColumn                      =3
	xlCombination                 =-4111
	xlCustom                      =-4114
	xlDefaultAutoFormat           =-1
	xlMaximum                     =2
	xlMinimum                     =4
	xlOpaque                      =3
	xlTransparent                 =2
	xlBidi                        =-5000
	xlLatin                       =-5001
	xlContext                     =-5002
	xlLTR                         =-5003
	xlRTL                         =-5004
	xlFullScript                  =1
	xlPartialScript               =2
	xlMixedScript                 =3
	xlMixedAuthorizedScript       =4
	xlVisualCursor                =2
	xlLogicalCursor               =1
	xlSystem                      =1
	xlPartial                     =3
	xlHindiNumerals               =3
	xlBidiCalendar                =3
	xlGregorian                   =2
	xlComplete                    =4
	xlScale                       =3
	xlClosed                      =3
	xlColor1                      =7
	xlColor2                      =8
	xlColor3                      =9
	xlConstants                   =2
	xlContents                    =2
	xlBelow                       =1
	xlCascade                     =7
	xlCenterAcrossSelection       =7
	xlChart4                      =2
	xlChartSeries                 =17
	xlChartShort                  =6
	xlChartTitles                 =18
	xlClassic1                    =1
	xlClassic2                    =2
	xlClassic3                    =3
	xl3DEffects1                  =13
	xl3DEffects2                  =14
	xlAbove                       =0
	xlAccounting1                 =4
	xlAccounting2                 =5
	xlAccounting3                 =6
	xlAccounting4                 =17
	xlAdd                         =2
	xlDebugCodePane               =13
	xlDesktop                     =9
	xlDirect                      =1
	xlDivide                      =5
	xlDoubleClosed                =5
	xlDoubleOpen                  =4
	xlDoubleQuote                 =1
	xlEntireChart                 =20
	xlExcelMenus                  =1
	xlExtended                    =3
	xlFill                        =5
	xlFirst                       =0
	xlFloating                    =5
	xlFormula                     =5
	xlGeneral                     =1
	xlGridline                    =22
	xlIcons                       =1
	xlImmediatePane               =12
	xlInteger                     =2
	xlLast                        =1
	xlLastCell                    =11
	xlList1                       =10
	xlList2                       =11
	xlList3                       =12
	xlLocalFormat1                =15
	xlLocalFormat2                =16
	xlLong                        =3
	xlLotusHelp                   =2
	xlMacrosheetCell              =7
	xlMixed                       =2
	xlMultiply                    =4
	xlNarrow                      =1
	xlNoDocuments                 =3
	xlOpen                        =2
	xlOutside                     =3
	xlReference                   =4
	xlSemiautomatic               =2
	xlShort                       =1
	xlSingleQuote                 =2
	xlStrict                      =2
	xlSubtract                    =3
	xlTextBox                     =16
	xlTiled                       =1
	xlTitleBar                    =8
	xlToolbar                     =1
	xlVisible                     =12
	xlWatchPane                   =11
	xlWide                        =3
	xlWorkbookTab                 =6
	xlWorksheet4                  =1
	xlWorksheetCell               =3
	xlWorksheetShort              =5
	xlAllExceptBorders            =7
	xlLeftToRight                 =2
	xlTopToBottom                 =1
	xlVeryHidden                  =2
	xlDrawingObject               =14

class XlAboveBelow(Enum):
	xlAboveAverage                =0
	xlBelowAverage                =1
	xlEqualAboveAverage           =2
	xlEqualBelowAverage           =3
	xlAboveStdDev                 =4
	xlBelowStdDev                 =5

class XlActionType(Enum):
	xlActionTypeUrl               =1
	xlActionTypeRowset            =16
	xlActionTypeReport            =128
	xlActionTypeDrillthrough      =256

class XlAllocation(Enum):
	xlManualAllocation            =1
	xlAutomaticAllocation         =2

class XlAllocationMethod(Enum):
	xlEqualAllocation             =1
	xlWeightedAllocation          =2

class XlAllocationValue(Enum):
	xlAllocateValue               =1
	xlAllocateIncrement           =2

class XlApplicationInternational(Enum):
	xl24HourClock                 =33
	xl4DigitYears                 =43
	xlAlternateArraySeparator     =16
	xlColumnSeparator             =14
	xlCountryCode                 =1
	xlCountrySetting              =2
	xlCurrencyBefore              =37
	xlCurrencyCode                =25
	xlCurrencyDigits              =27
	xlCurrencyLeadingZeros        =40
	xlCurrencyMinusSign           =38
	xlCurrencyNegative            =28
	xlCurrencySpaceBefore         =36
	xlCurrencyTrailingZeros       =39
	xlDateOrder                   =32
	xlDateSeparator               =17
	xlDayCode                     =21
	xlDayLeadingZero              =42
	xlDecimalSeparator            =3
	xlGeneralFormatName           =26
	xlHourCode                    =22
	xlLeftBrace                   =12
	xlLeftBracket                 =10
	xlListSeparator               =5
	xlLowerCaseColumnLetter       =9
	xlLowerCaseRowLetter          =8
	xlMDY                         =44
	xlMetric                      =35
	xlMinuteCode                  =23
	xlMonthCode                   =20
	xlMonthLeadingZero            =41
	xlMonthNameChars              =30
	xlNoncurrencyDigits           =29
	xlNonEnglishFunctions         =34
	xlRightBrace                  =13
	xlRightBracket                =11
	xlRowSeparator                =15
	xlSecondCode                  =24
	xlThousandsSeparator          =4
	xlTimeLeadingZero             =45
	xlTimeSeparator               =18
	xlUpperCaseColumnLetter       =7
	xlUpperCaseRowLetter          =6
	xlWeekdayNameChars            =31
	xlYearCode                    =19
	xlUICultureTag                =46

class XlApplyNamesOrder(Enum):
	xlColumnThenRow               =2
	xlRowThenColumn               =1

class XlArabicModes(Enum):
	xlArabicNone                  =0
	xlArabicStrictAlefHamza       =1
	xlArabicStrictFinalYaa        =2
	xlArabicBothStrict            =3

class XlArrangeStyle(Enum):
	xlArrangeStyleCascade         =7
	xlArrangeStyleHorizontal      =-4128
	xlArrangeStyleTiled           =1
	xlArrangeStyleVertical        =-4166

class XlArrowHeadLength(Enum):
	xlArrowHeadLengthLong         =3
	xlArrowHeadLengthMedium       =-4138
	xlArrowHeadLengthShort        =1

class XlArrowHeadStyle(Enum):
	xlArrowHeadStyleClosed        =3
	xlArrowHeadStyleDoubleClosed  =5
	xlArrowHeadStyleDoubleOpen    =4
	xlArrowHeadStyleNone          =-4142
	xlArrowHeadStyleOpen          =2

class XlArrowHeadWidth(Enum):
	xlArrowHeadWidthMedium        =-4138
	xlArrowHeadWidthNarrow        =1
	xlArrowHeadWidthWide          =3

class XlAutoFillType(Enum):
	xlFillCopy                    =1
	xlFillDays                    =5
	xlFillDefault                 =0
	xlFillFormats                 =3
	xlFillMonths                  =7
	xlFillSeries                  =2
	xlFillValues                  =4
	xlFillWeekdays                =6
	xlFillYears                   =8
	xlGrowthTrend                 =10
	xlLinearTrend                 =9
	xlFlashFill                   =11

class XlAutoFilterOperator(Enum):
	xlAnd                         =1
	xlBottom10Items               =4
	xlBottom10Percent             =6
	xlOr                          =2
	xlTop10Items                  =3
	xlTop10Percent                =5
	xlFilterValues                =7
	xlFilterCellColor             =8
	xlFilterFontColor             =9
	xlFilterIcon                  =10
	xlFilterDynamic               =11
	xlFilterNoFill                =12
	xlFilterAutomaticFontColor    =13
	xlFilterNoIcon                =14

class XlAxisCrosses(Enum):
	xlAxisCrossesAutomatic        =-4105
	xlAxisCrossesCustom           =-4114
	xlAxisCrossesMaximum          =2
	xlAxisCrossesMinimum          =4

class XlAxisGroup(Enum):
	xlPrimary                     =1
	xlSecondary                   =2

class XlAxisType(Enum):
	xlCategory                    =1
	xlSeriesAxis                  =3
	xlValue                       =2

class XlBackground(Enum):
	xlBackgroundAutomatic         =-4105
	xlBackgroundOpaque            =3
	xlBackgroundTransparent       =2

class XlBarShape(Enum):
	xlBox                         =0
	xlPyramidToPoint              =1
	xlPyramidToMax                =2
	xlCylinder                    =3
	xlConeToPoint                 =4
	xlConeToMax                   =5

class XlBinsType(Enum):
	xlBinsTypeAutomatic           =0
	xlBinsTypeCategorical         =1
	xlBinsTypeManual              =2
	xlBinsTypeBinSize             =3
	xlBinsTypeBinCount            =4

class XlBorderWeight(Enum):
	xlHairline                    =1
	xlMedium                      =-4138
	xlThick                       =4
	xlThin                        =2

class XlBordersIndex(Enum):
	xlInsideHorizontal            =12
	xlInsideVertical              =11
	xlDiagonalDown                =5
	xlDiagonalUp                  =6
	xlEdgeBottom                  =9
	xlEdgeLeft                    =7
	xlEdgeRight                   =10
	xlEdgeTop                     =8

class XlBuiltInDialog(Enum):
	xlDialogOpen                  =1
	xlDialogOpenLinks             =2
	xlDialogSaveAs                =5
	xlDialogFileDelete            =6
	xlDialogPageSetup             =7
	xlDialogPrint                 =8
	xlDialogPrinterSetup          =9
	xlDialogArrangeAll            =12
	xlDialogWindowSize            =13
	xlDialogWindowMove            =14
	xlDialogRun                   =17
	xlDialogSetPrintTitles        =23
	xlDialogFont                  =26
	xlDialogDisplay               =27
	xlDialogProtectDocument       =28
	xlDialogCalculation           =32
	xlDialogExtract               =35
	xlDialogDataDelete            =36
	xlDialogSort                  =39
	xlDialogDataSeries            =40
	xlDialogTable                 =41
	xlDialogFormatNumber          =42
	xlDialogAlignment             =43
	xlDialogStyle                 =44
	xlDialogBorder                =45
	xlDialogCellProtection        =46
	xlDialogColumnWidth           =47
	xlDialogClear                 =52
	xlDialogPasteSpecial          =53
	xlDialogEditDelete            =54
	xlDialogInsert                =55
	xlDialogPasteNames            =58
	xlDialogDefineName            =61
	xlDialogCreateNames           =62
	xlDialogFormulaGoto           =63
	xlDialogFormulaFind           =64
	xlDialogGalleryArea           =67
	xlDialogGalleryBar            =68
	xlDialogGalleryColumn         =69
	xlDialogGalleryLine           =70
	xlDialogGalleryPie            =71
	xlDialogGalleryScatter        =72
	xlDialogCombination           =73
	xlDialogGridlines             =76
	xlDialogAxes                  =78
	xlDialogAttachText            =80
	xlDialogPatterns              =84
	xlDialogMainChart             =85
	xlDialogOverlay               =86
	xlDialogScale                 =87
	xlDialogFormatLegend          =88
	xlDialogFormatText            =89
	xlDialogParse                 =91
	xlDialogUnhide                =94
	xlDialogWorkspace             =95
	xlDialogActivate              =103
	xlDialogCopyPicture           =108
	xlDialogDeleteName            =110
	xlDialogDeleteFormat          =111
	xlDialogNew                   =119
	xlDialogRowHeight             =127
	xlDialogFormatMove            =128
	xlDialogFormatSize            =129
	xlDialogFormulaReplace        =130
	xlDialogSelectSpecial         =132
	xlDialogApplyNames            =133
	xlDialogReplaceFont           =134
	xlDialogSplit                 =137
	xlDialogOutline               =142
	xlDialogSaveWorkbook          =145
	xlDialogCopyChart             =147
	xlDialogFormatFont            =150
	xlDialogNote                  =154
	xlDialogSetUpdateStatus       =159
	xlDialogColorPalette          =161
	xlDialogChangeLink            =166
	xlDialogAppMove               =170
	xlDialogAppSize               =171
	xlDialogMainChartType         =185
	xlDialogOverlayChartType      =186
	xlDialogOpenMail              =188
	xlDialogSendMail              =189
	xlDialogStandardFont          =190
	xlDialogConsolidate           =191
	xlDialogSortSpecial           =192
	xlDialogGallery3dArea         =193
	xlDialogGallery3dColumn       =194
	xlDialogGallery3dLine         =195
	xlDialogGallery3dPie          =196
	xlDialogView3d                =197
	xlDialogGoalSeek              =198
	xlDialogWorkgroup             =199
	xlDialogFillGroup             =200
	xlDialogUpdateLink            =201
	xlDialogPromote               =202
	xlDialogDemote                =203
	xlDialogShowDetail            =204
	xlDialogObjectProperties      =207
	xlDialogSaveNewObject         =208
	xlDialogApplyStyle            =212
	xlDialogAssignToObject        =213
	xlDialogObjectProtection      =214
	xlDialogCreatePublisher       =217
	xlDialogSubscribeTo           =218
	xlDialogShowToolbar           =220
	xlDialogPrintPreview          =222
	xlDialogEditColor             =223
	xlDialogFormatMain            =225
	xlDialogFormatOverlay         =226
	xlDialogEditSeries            =228
	xlDialogDefineStyle           =229
	xlDialogGalleryRadar          =249
	xlDialogEditionOptions        =251
	xlDialogZoom                  =256
	xlDialogInsertObject          =259
	xlDialogSize                  =261
	xlDialogMove                  =262
	xlDialogFormatAuto            =269
	xlDialogGallery3dBar          =272
	xlDialogGallery3dSurface      =273
	xlDialogCustomizeToolbar      =276
	xlDialogWorkbookAdd           =281
	xlDialogWorkbookMove          =282
	xlDialogWorkbookCopy          =283
	xlDialogWorkbookOptions       =284
	xlDialogSaveWorkspace         =285
	xlDialogChartWizard           =288
	xlDialogAssignToTool          =293
	xlDialogPlacement             =300
	xlDialogFillWorkgroup         =301
	xlDialogWorkbookNew           =302
	xlDialogScenarioCells         =305
	xlDialogScenarioAdd           =307
	xlDialogScenarioEdit          =308
	xlDialogScenarioSummary       =311
	xlDialogPivotTableWizard      =312
	xlDialogPivotFieldProperties  =313
	xlDialogOptionsCalculation    =318
	xlDialogOptionsEdit           =319
	xlDialogOptionsView           =320
	xlDialogAddinManager          =321
	xlDialogMenuEditor            =322
	xlDialogAttachToolbars        =323
	xlDialogOptionsChart          =325
	xlDialogVbaInsertFile         =328
	xlDialogVbaProcedureDefinition=330
	xlDialogRoutingSlip           =336
	xlDialogMailLogon             =339
	xlDialogInsertPicture         =342
	xlDialogGalleryDoughnut       =344
	xlDialogChartTrend            =350
	xlDialogWorkbookInsert        =354
	xlDialogOptionsTransition     =355
	xlDialogOptionsGeneral        =356
	xlDialogFilterAdvanced        =370
	xlDialogMailNextLetter        =378
	xlDialogDataLabel             =379
	xlDialogInsertTitle           =380
	xlDialogFontProperties        =381
	xlDialogMacroOptions          =382
	xlDialogWorkbookUnhide        =384
	xlDialogWorkbookName          =386
	xlDialogGalleryCustom         =388
	xlDialogAddChartAutoformat    =390
	xlDialogChartAddData          =392
	xlDialogTabOrder              =394
	xlDialogSubtotalCreate        =398
	xlDialogWorkbookTabSplit      =415
	xlDialogWorkbookProtect       =417
	xlDialogScrollbarProperties   =420
	xlDialogPivotShowPages        =421
	xlDialogTextToColumns         =422
	xlDialogFormatCharttype       =423
	xlDialogPivotFieldGroup       =433
	xlDialogPivotFieldUngroup     =434
	xlDialogCheckboxProperties    =435
	xlDialogLabelProperties       =436
	xlDialogListboxProperties     =437
	xlDialogEditboxProperties     =438
	xlDialogOpenText              =441
	xlDialogPushbuttonProperties  =445
	xlDialogFilter                =447
	xlDialogFunctionWizard        =450
	xlDialogSaveCopyAs            =456
	xlDialogOptionsListsAdd       =458
	xlDialogSeriesAxes            =460
	xlDialogSeriesX               =461
	xlDialogSeriesY               =462
	xlDialogErrorbarX             =463
	xlDialogErrorbarY             =464
	xlDialogFormatChart           =465
	xlDialogSeriesOrder           =466
	xlDialogMailEditMailer        =470
	xlDialogStandardWidth         =472
	xlDialogScenarioMerge         =473
	xlDialogProperties            =474
	xlDialogSummaryInfo           =474
	xlDialogFindFile              =475
	xlDialogActiveCellFont        =476
	xlDialogVbaMakeAddin          =478
	xlDialogFileSharing           =481
	xlDialogAutoCorrect           =485
	xlDialogCustomViews           =493
	xlDialogInsertNameLabel       =496
	xlDialogSeriesShape           =504
	xlDialogChartOptionsDataLabels=505
	xlDialogChartOptionsDataTable =506
	xlDialogSetBackgroundPicture  =509
	xlDialogDataValidation        =525
	xlDialogChartType             =526
	xlDialogChartLocation         =527
	_xlDialogPhonetic             =538
	xlDialogChartSourceData       =540
	_xlDialogChartSourceData      =541
	xlDialogSeriesOptions         =557
	xlDialogPivotTableOptions     =567
	xlDialogPivotSolveOrder       =568
	xlDialogPivotCalculatedField  =570
	xlDialogPivotCalculatedItem   =572
	xlDialogConditionalFormatting =583
	xlDialogInsertHyperlink       =596
	xlDialogProtectSharing        =620
	xlDialogOptionsME             =647
	xlDialogPublishAsWebPage      =653
	xlDialogPhonetic              =656
	xlDialogNewWebQuery           =667
	xlDialogImportTextFile        =666
	xlDialogExternalDataProperties=530
	xlDialogWebOptionsGeneral     =683
	xlDialogWebOptionsFiles       =684
	xlDialogWebOptionsPictures    =685
	xlDialogWebOptionsEncoding    =686
	xlDialogWebOptionsFonts       =687
	xlDialogPivotClientServerSet  =689
	xlDialogPropertyFields        =754
	xlDialogSearch                =731
	xlDialogEvaluateFormula       =709
	xlDialogDataLabelMultiple     =723
	xlDialogChartOptionsDataLabelMultiple=724
	xlDialogErrorChecking         =732
	xlDialogWebOptionsBrowsers    =773
	xlDialogCreateList            =796
	xlDialogPermission            =832
	xlDialogMyPermission          =834
	xlDialogDocumentInspector     =862
	xlDialogNameManager           =977
	xlDialogNewName               =978
	xlDialogSparklineInsertLine   =1133
	xlDialogSparklineInsertColumn =1134
	xlDialogSparklineInsertWinLoss=1135
	xlDialogSlicerSettings        =1179
	xlDialogSlicerCreation        =1182
	xlDialogSlicerPivotTableConnections=1184
	xlDialogPivotTableSlicerConnections=1183
	xlDialogPivotTableWhatIfAnalysisSettings=1153
	xlDialogSetManager            =1109
	xlDialogSetMDXEditor          =1208
	xlDialogSetTupleEditorOnRows  =1107
	xlDialogSetTupleEditorOnColumns=1108
	xlDialogManageRelationships   =1271
	xlDialogCreateRelationship    =1272
	xlDialogRecommendedPivotTables=1258
	xlDialogForecastETS           =1300
	xlDialogPivotDefaultLayout    =1360

class XlCVError(Enum):
	xlErrBlocked                  =2047
	xlErrCalc                     =2050
	xlErrConnect                  =2046
	xlErrDiv0                     =2007
	xlErrField                    =2049
	xlErrGettingData              =2043
	xlErrNA                       =2042
	xlErrName                     =2029
	xlErrSpill                    =2045
	xlErrNull                     =2000
	xlErrNum                      =2036
	xlErrRef                      =2023
	xlErrUnknown                  =2048
	xlErrValue                    =2015

class XlCalcFor(Enum):
	xlAllValues                   =0
	xlRowGroups                   =1
	xlColGroups                   =2

class XlCalcMemNumberFormatType(Enum):
	xlNumberFormatTypeDefault     =0
	xlNumberFormatTypeNumber      =1
	xlNumberFormatTypePercent     =2

class XlCalculatedMemberType(Enum):
	xlCalculatedMember            =0
	xlCalculatedSet               =1
	xlCalculatedMeasure           =2

class XlCalculation(Enum):
	xlCalculationAutomatic        =-4105
	xlCalculationManual           =-4135
	xlCalculationSemiautomatic    =2

class XlCalculationInterruptKey(Enum):
	xlNoKey                       =0
	xlEscKey                      =1
	xlAnyKey                      =2

class XlCalculationState(Enum):
	xlDone                        =0
	xlCalculating                 =1
	xlPending                     =2

class XlCategoryLabelLevel(Enum):
	xlCategoryLabelLevelNone      =-3
	xlCategoryLabelLevelCustom    =-2
	xlCategoryLabelLevelAll       =-1

class XlCategorySortOrder(Enum):
	xlIndexAscending              =0
	xlIndexDescending             =1
	xlCategoryAscending           =2
	xlCategoryDescending          =3

class XlCategoryType(Enum):
	xlCategoryScale               =2
	xlTimeScale                   =3
	xlAutomaticScale              =-4105

class XlCellChangedState(Enum):
	xlCellNotChanged              =1
	xlCellChanged                 =2
	xlCellChangeApplied           =3

class XlCellInsertionMode(Enum):
	xlOverwriteCells              =0
	xlInsertDeleteCells           =1
	xlInsertEntireRows            =2

class XlCellType(Enum):
	xlCellTypeBlanks              =4
	xlCellTypeConstants           =2
	xlCellTypeFormulas            =-4123
	xlCellTypeLastCell            =11
	xlCellTypeComments            =-4144
	xlCellTypeVisible             =12
	xlCellTypeAllFormatConditions =-4172
	xlCellTypeSameFormatConditions=-4173
	xlCellTypeAllValidation       =-4174
	xlCellTypeSameValidation      =-4175

class XlChartElementPosition(Enum):
	xlChartElementPositionAutomatic=-4105
	xlChartElementPositionCustom  =-4114

class XlChartGallery(Enum):
	xlBuiltIn                     =21
	xlUserDefined                 =22
	xlAnyGallery                  =23

class XlChartItem(Enum):
	xlDataLabel                   =0
	xlChartArea                   =2
	xlSeries                      =3
	xlChartTitle                  =4
	xlWalls                       =5
	xlCorners                     =6
	xlDataTable                   =7
	xlTrendline                   =8
	xlErrorBars                   =9
	xlXErrorBars                  =10
	xlYErrorBars                  =11
	xlLegendEntry                 =12
	xlLegendKey                   =13
	xlShape                       =14
	xlMajorGridlines              =15
	xlMinorGridlines              =16
	xlAxisTitle                   =17
	xlUpBars                      =18
	xlPlotArea                    =19
	xlDownBars                    =20
	xlAxis                        =21
	xlSeriesLines                 =22
	xlFloor                       =23
	xlLegend                      =24
	xlHiLoLines                   =25
	xlDropLines                   =26
	xlRadarAxisLabels             =27
	xlNothing                     =28
	xlLeaderLines                 =29
	xlDisplayUnitLabel            =30
	xlPivotChartFieldButton       =31
	xlPivotChartDropZone          =32
	xlPivotChartExpandEntireFieldButton=33
	xlPivotChartCollapseEntireFieldButton=34

class XlChartLocation(Enum):
	xlLocationAsNewSheet          =1
	xlLocationAsObject            =2
	xlLocationAutomatic           =3

class XlChartPicturePlacement(Enum):
	xlSides                       =1
	xlEnd                         =2
	xlEndSides                    =3
	xlFront                       =4
	xlFrontSides                  =5
	xlFrontEnd                    =6
	xlAllFaces                    =7

class XlChartPictureType(Enum):
	xlStackScale                  =3
	xlStack                       =2
	xlStretch                     =1

class XlChartSplitType(Enum):
	xlSplitByPosition             =1
	xlSplitByPercentValue         =3
	xlSplitByCustomSplit          =4
	xlSplitByValue                =2

class XlChartType(Enum):
	xlColumnClustered             =51
	xlColumnStacked               =52
	xlColumnStacked100            =53
	xl3DColumnClustered           =54
	xl3DColumnStacked             =55
	xl3DColumnStacked100          =56
	xlBarClustered                =57
	xlBarStacked                  =58
	xlBarStacked100               =59
	xl3DBarClustered              =60
	xl3DBarStacked                =61
	xl3DBarStacked100             =62
	xlLineStacked                 =63
	xlLineStacked100              =64
	xlLineMarkers                 =65
	xlLineMarkersStacked          =66
	xlLineMarkersStacked100       =67
	xlPieOfPie                    =68
	xlPieExploded                 =69
	xl3DPieExploded               =70
	xlBarOfPie                    =71
	xlXYScatterSmooth             =72
	xlXYScatterSmoothNoMarkers    =73
	xlXYScatterLines              =74
	xlXYScatterLinesNoMarkers     =75
	xlAreaStacked                 =76
	xlAreaStacked100              =77
	xl3DAreaStacked               =78
	xl3DAreaStacked100            =79
	xlDoughnutExploded            =80
	xlRadarMarkers                =81
	xlRadarFilled                 =82
	xlSurface                     =83
	xlSurfaceWireframe            =84
	xlSurfaceTopView              =85
	xlSurfaceTopViewWireframe     =86
	xlBubble                      =15
	xlBubble3DEffect              =87
	xlStockHLC                    =88
	xlStockOHLC                   =89
	xlStockVHLC                   =90
	xlStockVOHLC                  =91
	xlCylinderColClustered        =92
	xlCylinderColStacked          =93
	xlCylinderColStacked100       =94
	xlCylinderBarClustered        =95
	xlCylinderBarStacked          =96
	xlCylinderBarStacked100       =97
	xlCylinderCol                 =98
	xlConeColClustered            =99
	xlConeColStacked              =100
	xlConeColStacked100           =101
	xlConeBarClustered            =102
	xlConeBarStacked              =103
	xlConeBarStacked100           =104
	xlConeCol                     =105
	xlPyramidColClustered         =106
	xlPyramidColStacked           =107
	xlPyramidColStacked100        =108
	xlPyramidBarClustered         =109
	xlPyramidBarStacked           =110
	xlPyramidBarStacked100        =111
	xlPyramidCol                  =112
	xl3DColumn                    =-4100
	xlLine                        =4
	xl3DLine                      =-4101
	xl3DPie                       =-4102
	xlPie                         =5
	xlXYScatter                   =-4169
	xl3DArea                      =-4098
	xlArea                        =1
	xlDoughnut                    =-4120
	xlRadar                       =-4151
	xlTreemap                     =117
	xlHistogram                   =118
	xlWaterfall                   =119
	xlSunburst                    =120
	xlBoxwhisker                  =121
	xlPareto                      =122
	xlFunnel                      =123
	xlRegionMap                   =140

class XlCheckInVersionType(Enum):
	xlCheckInMinorVersion         =0
	xlCheckInMajorVersion         =1
	xlCheckInOverwriteVersion     =2

class XlClipboardFormat(Enum):
	xlClipboardFormatBIFF12       =63
	xlClipboardFormatBIFF         =8
	xlClipboardFormatBIFF2        =18
	xlClipboardFormatBIFF3        =20
	xlClipboardFormatBIFF4        =30
	xlClipboardFormatBinary       =15
	xlClipboardFormatBitmap       =9
	xlClipboardFormatCGM          =13
	xlClipboardFormatCSV          =5
	xlClipboardFormatDIF          =4
	xlClipboardFormatDspText      =12
	xlClipboardFormatEmbeddedObject=21
	xlClipboardFormatEmbedSource  =22
	xlClipboardFormatLink         =11
	xlClipboardFormatLinkSource   =23
	xlClipboardFormatLinkSourceDesc=32
	xlClipboardFormatMovie        =24
	xlClipboardFormatNative       =14
	xlClipboardFormatObjectDesc   =31
	xlClipboardFormatObjectLink   =19
	xlClipboardFormatOwnerLink    =17
	xlClipboardFormatPICT         =2
	xlClipboardFormatPrintPICT    =3
	xlClipboardFormatRTF          =7
	xlClipboardFormatScreenPICT   =29
	xlClipboardFormatStandardFont =28
	xlClipboardFormatStandardScale=27
	xlClipboardFormatSYLK         =6
	xlClipboardFormatTable        =16
	xlClipboardFormatText         =0
	xlClipboardFormatToolFace     =25
	xlClipboardFormatToolFacePICT =26
	xlClipboardFormatVALU         =1
	xlClipboardFormatWK1          =10

class XlCmdType(Enum):
	xlCmdCube                     =1
	xlCmdSql                      =2
	xlCmdTable                    =3
	xlCmdDefault                  =4
	xlCmdList                     =5
	xlCmdTableCollection          =6
	xlCmdExcel                    =7
	xlCmdDAX                      =8

class XlColorIndex(Enum):
	xlColorIndexAutomatic         =-4105
	xlColorIndexNone              =-4142

class XlColumnDataType(Enum):
	xlGeneralFormat               =1
	xlTextFormat                  =2
	xlMDYFormat                   =3
	xlDMYFormat                   =4
	xlYMDFormat                   =5
	xlMYDFormat                   =6
	xlDYMFormat                   =7
	xlYDMFormat                   =8
	xlSkipColumn                  =9
	xlEMDFormat                   =10

class XlCommandUnderlines(Enum):
	xlCommandUnderlinesAutomatic  =-4105
	xlCommandUnderlinesOff        =-4146
	xlCommandUnderlinesOn         =1

class XlCommentDisplayMode(Enum):
	xlNoIndicator                 =0
	xlCommentIndicatorOnly        =-1
	xlCommentAndIndicator         =1

class XlConditionValueTypes(Enum):
	xlConditionValueNone          =-1
	xlConditionValueNumber        =0
	xlConditionValueLowestValue   =1
	xlConditionValueHighestValue  =2
	xlConditionValuePercent       =3
	xlConditionValueFormula       =4
	xlConditionValuePercentile    =5
	xlConditionValueAutomaticMin  =6
	xlConditionValueAutomaticMax  =7

class XlConnectionType(Enum):
	xlConnectionTypeOLEDB         =1
	xlConnectionTypeODBC          =2
	xlConnectionTypeXMLMAP        =3
	xlConnectionTypeTEXT          =4
	xlConnectionTypeWEB           =5
	xlConnectionTypeDATAFEED      =6
	xlConnectionTypeMODEL         =7
	xlConnectionTypeWORKSHEET     =8
	xlConnectionTypeNOSOURCE      =9

class XlConsolidationFunction(Enum):
	xlAverage                     =-4106
	xlCount                       =-4112
	xlCountNums                   =-4113
	xlMax                         =-4136
	xlMin                         =-4139
	xlProduct                     =-4149
	xlStDev                       =-4155
	xlStDevP                      =-4156
	xlSum                         =-4157
	xlVar                         =-4164
	xlVarP                        =-4165
	xlUnknown                     =1000
	xlDistinctCount               =11

class XlContainsOperator(Enum):
	xlContains                    =0
	xlDoesNotContain              =1
	xlBeginsWith                  =2
	xlEndsWith                    =3

class XlCopyPictureFormat(Enum):
	xlBitmap                      =2
	xlPicture                     =-4147

class XlCorruptLoad(Enum):
	xlNormalLoad                  =0
	xlRepairFile                  =1
	xlExtractData                 =2

class XlCreator(Enum):
	xlCreatorCode                 =1480803660

class XlCredentialsMethod(Enum):
	xlCredentialsMethodIntegrated =0
	xlCredentialsMethodNone       =1
	xlCredentialsMethodStored     =2

class XlCubeFieldSubType(Enum):
	xlCubeHierarchy               =1
	xlCubeMeasure                 =2
	xlCubeSet                     =3
	xlCubeAttribute               =4
	xlCubeCalculatedMeasure       =5
	xlCubeKPIValue                =6
	xlCubeKPIGoal                 =7
	xlCubeKPIStatus               =8
	xlCubeKPITrend                =9
	xlCubeKPIWeight               =10
	xlCubeImplicitMeasure         =11

class XlCubeFieldType(Enum):
	xlHierarchy                   =1
	xlMeasure                     =2
	xlSet                         =3

class XlCutCopyMode(Enum):
	xlCopy                        =1
	xlCut                         =2

class XlDVAlertStyle(Enum):
	xlValidAlertStop              =1
	xlValidAlertWarning           =2
	xlValidAlertInformation       =3

class XlDVType(Enum):
	xlValidateInputOnly           =0
	xlValidateWholeNumber         =1
	xlValidateDecimal             =2
	xlValidateList                =3
	xlValidateDate                =4
	xlValidateTime                =5
	xlValidateTextLength          =6
	xlValidateCustom              =7

class XlDataBarAxisPosition(Enum):
	xlDataBarAxisAutomatic        =0
	xlDataBarAxisMidpoint         =1
	xlDataBarAxisNone             =2

class XlDataBarBorderType(Enum):
	xlDataBarBorderNone           =0
	xlDataBarBorderSolid          =1

class XlDataBarFillType(Enum):
	xlDataBarFillSolid            =0
	xlDataBarFillGradient         =1

class XlDataBarNegativeColorType(Enum):
	xlDataBarColor                =0
	xlDataBarSameAsPositive       =1

class XlDataLabelPosition(Enum):
	xlLabelPositionCenter         =-4108
	xlLabelPositionAbove          =0
	xlLabelPositionBelow          =1
	xlLabelPositionLeft           =-4131
	xlLabelPositionRight          =-4152
	xlLabelPositionOutsideEnd     =2
	xlLabelPositionInsideEnd      =3
	xlLabelPositionInsideBase     =4
	xlLabelPositionBestFit        =5
	xlLabelPositionMixed          =6
	xlLabelPositionCustom         =7

class XlDataLabelSeparator(Enum):
	xlDataLabelSeparatorDefault   =1

class XlDataLabelsType(Enum):
	xlDataLabelsShowNone          =-4142
	xlDataLabelsShowValue         =2
	xlDataLabelsShowPercent       =3
	xlDataLabelsShowLabel         =4
	xlDataLabelsShowLabelAndPercent=5
	xlDataLabelsShowBubbleSizes   =6

class XlDataSeriesDate(Enum):
	xlDay                         =1
	xlMonth                       =3
	xlWeekday                     =2
	xlYear                        =4

class XlDataSeriesType(Enum):
	xlAutoFill                    =4
	xlChronological               =3
	xlGrowth                      =2
	xlDataSeriesLinear            =-4132

class XlDeleteShiftDirection(Enum):
	xlShiftToLeft                 =-4159
	xlShiftUp                     =-4162

class XlDirection(Enum):
	xlDown                        =-4121
	xlToLeft                      =-4159
	xlToRight                     =-4161
	xlUp                          =-4162

class XlDisplayBlanksAs(Enum):
	xlInterpolated                =3
	xlNotPlotted                  =1
	xlZero                        =2

class XlDisplayDrawingObjects(Enum):
	xlDisplayShapes               =-4104
	xlHide                        =3
	xlPlaceholders                =2

class XlDisplayUnit(Enum):
	xlHundreds                    =-2
	xlThousands                   =-3
	xlTenThousands                =-4
	xlHundredThousands            =-5
	xlMillions                    =-6
	xlTenMillions                 =-7
	xlHundredMillions             =-8
	xlThousandMillions            =-9
	xlMillionMillions             =-10

class XlDupeUnique(Enum):
	xlUnique                      =0
	xlDuplicate                   =1

class XlDynamicFilterCriteria(Enum):
	xlFilterToday                 =1
	xlFilterYesterday             =2
	xlFilterTomorrow              =3
	xlFilterThisWeek              =4
	xlFilterLastWeek              =5
	xlFilterNextWeek              =6
	xlFilterThisMonth             =7
	xlFilterLastMonth             =8
	xlFilterNextMonth             =9
	xlFilterThisQuarter           =10
	xlFilterLastQuarter           =11
	xlFilterNextQuarter           =12
	xlFilterThisYear              =13
	xlFilterLastYear              =14
	xlFilterNextYear              =15
	xlFilterYearToDate            =16
	xlFilterAllDatesInPeriodQuarter1=17
	xlFilterAllDatesInPeriodQuarter2=18
	xlFilterAllDatesInPeriodQuarter3=19
	xlFilterAllDatesInPeriodQuarter4=20
	xlFilterAllDatesInPeriodJanuary=21
	xlFilterAllDatesInPeriodFebruray=22
	xlFilterAllDatesInPeriodMarch =23
	xlFilterAllDatesInPeriodApril =24
	xlFilterAllDatesInPeriodMay   =25
	xlFilterAllDatesInPeriodJune  =26
	xlFilterAllDatesInPeriodJuly  =27
	xlFilterAllDatesInPeriodAugust=28
	xlFilterAllDatesInPeriodSeptember=29
	xlFilterAllDatesInPeriodOctober=30
	xlFilterAllDatesInPeriodNovember=31
	xlFilterAllDatesInPeriodDecember=32
	xlFilterAboveAverage          =33
	xlFilterBelowAverage          =34

class XlEditionFormat(Enum):
	xlBIFF                        =2
	xlPICT                        =1
	xlRTF                         =4
	xlVALU                        =8

class XlEditionOptionsOption(Enum):
	xlAutomaticUpdate             =4
	xlCancel                      =1
	xlChangeAttributes            =6
	xlManualUpdate                =5
	xlOpenSource                  =3
	xlSelect                      =3
	xlSendPublisher               =2
	xlUpdateSubscriber            =2

class XlEditionType(Enum):
	xlPublisher                   =1
	xlSubscriber                  =2

class XlEnableCancelKey(Enum):
	xlDisabled                    =0
	xlErrorHandler                =2
	xlInterrupt                   =1

class XlEnableSelection(Enum):
	xlNoRestrictions              =0
	xlUnlockedCells               =1
	xlNoSelection                 =-4142

class XlEndStyleCap(Enum):
	xlCap                         =1
	xlNoCap                       =2

class XlErrorBarDirection(Enum):
	xlX                           =-4168
	xlY                           =1

class XlErrorBarInclude(Enum):
	xlErrorBarIncludeBoth         =1
	xlErrorBarIncludeMinusValues  =3
	xlErrorBarIncludeNone         =-4142
	xlErrorBarIncludePlusValues   =2

class XlErrorBarType(Enum):
	xlErrorBarTypeCustom          =-4114
	xlErrorBarTypeFixedValue      =1
	xlErrorBarTypePercent         =2
	xlErrorBarTypeStDev           =-4155
	xlErrorBarTypeStError         =4

class XlErrorChecks(Enum):
	xlEvaluateToError             =1
	xlTextDate                    =2
	xlNumberAsText                =3
	xlInconsistentFormula         =4
	xlOmittedCells                =5
	xlUnlockedFormulaCells        =6
	xlEmptyCellReferences         =7
	xlListDataValidation          =8
	xlInconsistentListFormula     =9
	xlMisleadingFormat            =10
	xlOutdatedLinkedDataType      =11

class XlFileAccess(Enum):
	xlReadOnly                    =3
	xlReadWrite                   =2

class XlFileFormat(Enum):
	xlAddIn                       =18
	xlCSV                         =6
	xlCSVMac                      =22
	xlCSVMSDOS                    =24
	xlCSVWindows                  =23
	xlDBF2                        =7
	xlDBF3                        =8
	xlDBF4                        =11
	xlDIF                         =9
	xlExcel2                      =16
	xlExcel2FarEast               =27
	xlExcel3                      =29
	xlExcel4                      =33
	xlExcel5                      =39
	xlExcel7                      =39
	xlExcel9795                   =43
	xlExcel4Workbook              =35
	xlIntlAddIn                   =26
	xlIntlMacro                   =25
	xlWorkbookNormal              =-4143
	xlSYLK                        =2
	xlTemplate                    =17
	xlCurrentPlatformText         =-4158
	xlTextMac                     =19
	xlTextMSDOS                   =21
	xlTextPrinter                 =36
	xlTextWindows                 =20
	xlWJ2WD1                      =14
	xlWK1                         =5
	xlWK1ALL                      =31
	xlWK1FMT                      =30
	xlWK3                         =15
	xlWK4                         =38
	xlWK3FM3                      =32
	xlWKS                         =4
	xlWorks2FarEast               =28
	xlWQ1                         =34
	xlWJ3                         =40
	xlWJ3FJ3                      =41
	xlUnicodeText                 =42
	xlHtml                        =44
	xlWebArchive                  =45
	xlXMLSpreadsheet              =46
	xlExcel12                     =50
	xlOpenXMLWorkbook             =51
	xlOpenXMLWorkbookMacroEnabled =52
	xlOpenXMLTemplateMacroEnabled =53
	xlTemplate8                   =17
	xlOpenXMLTemplate             =54
	xlAddIn8                      =18
	xlOpenXMLAddIn                =55
	xlExcel8                      =56
	xlOpenDocumentSpreadsheet     =60
	xlOpenXMLStrictWorkbook       =61
	xlCSVUTF8                     =62
	xlWorkbookDefault             =51

class XlFileValidationPivotMode(Enum):
	xlFileValidationPivotDefault  =0
	xlFileValidationPivotRun      =1
	xlFileValidationPivotSkip     =2

class XlFillWith(Enum):
	xlFillWithAll                 =-4104
	xlFillWithContents            =2
	xlFillWithFormats             =-4122

class XlFilterAction(Enum):
	xlFilterCopy                  =2
	xlFilterInPlace               =1

class XlFilterAllDatesInPeriod(Enum):
	xlFilterAllDatesInPeriodYear  =0
	xlFilterAllDatesInPeriodMonth =1
	xlFilterAllDatesInPeriodDay   =2
	xlFilterAllDatesInPeriodHour  =3
	xlFilterAllDatesInPeriodMinute=4
	xlFilterAllDatesInPeriodSecond=5

class XlFilterStatus(Enum):
	xlFilterStatusOK              =0
	xlFilterStatusDateWrongOrder  =1
	xlFilterStatusDateHasTime     =2
	xlFilterStatusInvalidDate     =3

class XlFindLookIn(Enum):
	xlFormulas                    =-4123
	xlComments                    =-4144
	xlValues                      =-4163
	xlCommentsThreaded            =-4184
	xlFormulas2                   =-4185

class XlFixedFormatQuality(Enum):
	xlQualityStandard             =0
	xlQualityMinimum              =1

class XlFixedFormatType(Enum):
	xlTypePDF                     =0
	xlTypeXPS                     =1

class XlForecastAggregation(Enum):
	xlForecastAggregationAverage  =1
	xlForecastAggregationCount    =2
	xlForecastAggregationCountA   =3
	xlForecastAggregationMax      =4
	xlForecastAggregationMedian   =5
	xlForecastAggregationMin      =6
	xlForecastAggregationSum      =7

class XlForecastChartType(Enum):
	xlForecastChartTypeLine       =0
	xlForecastChartTypeColumn     =1

class XlForecastDataCompletion(Enum):
	xlForecastDataCompletionZeros =0
	xlForecastDataCompletionInterpolate=1

class XlFormControl(Enum):
	xlButtonControl               =0
	xlCheckBox                    =1
	xlDropDown                    =2
	xlEditBox                     =3
	xlGroupBox                    =4
	xlLabel                       =5
	xlListBox                     =6
	xlOptionButton                =7
	xlScrollBar                   =8
	xlSpinner                     =9

class XlFormatConditionOperator(Enum):
	xlBetween                     =1
	xlNotBetween                  =2
	xlEqual                       =3
	xlNotEqual                    =4
	xlGreater                     =5
	xlLess                        =6
	xlGreaterEqual                =7
	xlLessEqual                   =8

class XlFormatConditionType(Enum):
	xlCellValue                   =1
	xlExpression                  =2
	xlColorScale                  =3
	xlDatabar                     =4
	xlTop10                       =5
	xlIconSets                    =6
	xlUniqueValues                =8
	xlTextString                  =9
	xlBlanksCondition             =10
	xlTimePeriod                  =11
	xlAboveAverageCondition       =12
	xlNoBlanksCondition           =13
	xlErrorsCondition             =16
	xlNoErrorsCondition           =17

class XlFormatFilterTypes(Enum):
	xlFilterBottom                =0
	xlFilterTop                   =1
	xlFilterBottomPercent         =2
	xlFilterTopPercent            =3

class XlFormulaLabel(Enum):
	xlNoLabels                    =-4142
	xlRowLabels                   =1
	xlColumnLabels                =2
	xlMixedLabels                 =3

class XlFormulaVersion(Enum):
	xlReplaceFormula              =0
	xlReplaceFormula2             =1

class XlGenerateTableRefs(Enum):
	xlGenerateTableRefA1          =0
	xlGenerateTableRefStruct      =1

class XlGeoMappingLevel(Enum):
	xlGeoMappingLevelAutomatic    =0
	xlGeoMappingLevelDataOnly     =1
	xlGeoMappingLevelPostalCode   =2
	xlGeoMappingLevelCounty       =3
	xlGeoMappingLevelState        =4
	xlGeoMappingLevelCountryRegion=5
	xlGeoMappingLevelCountryRegionList=6
	xlGeoMappingLevelWorld        =7

class XlGeoProjectionType(Enum):
	xlGeoProjectionTypeAutomatic  =0
	xlGeoProjectionTypeMercator   =1
	xlGeoProjectionTypeMiller     =2
	xlGeoProjectionTypeAlbers     =3
	xlGeoProjectionTypeRobinson   =4

class XlGradientFillType(Enum):
	xlGradientFillLinear          =0
	xlGradientFillPath            =1

class XlGradientStopPositionType(Enum):
	xlGradientStopPositionTypeExtremeValue=0
	xlGradientStopPositionTypeNumber=1
	xlGradientStopPositionTypePercent=2

class XlHAlign(Enum):
	xlHAlignCenter                =-4108
	xlHAlignCenterAcrossSelection =7
	xlHAlignDistributed           =-4117
	xlHAlignFill                  =5
	xlHAlignGeneral               =1
	xlHAlignJustify               =-4130
	xlHAlignLeft                  =-4131
	xlHAlignRight                 =-4152

class XlHebrewModes(Enum):
	xlHebrewFullScript            =0
	xlHebrewPartialScript         =1
	xlHebrewMixedScript           =2
	xlHebrewMixedAuthorizedScript =3

class XlHighlightChangesTime(Enum):
	xlSinceMyLastSave             =1
	xlAllChanges                  =2
	xlNotYetReviewed              =3

class XlHtmlType(Enum):
	xlHtmlStatic                  =0
	xlHtmlCalc                    =1
	xlHtmlList                    =2
	xlHtmlChart                   =3

class XlIMEMode(Enum):
	xlIMEModeNoControl            =0
	xlIMEModeOn                   =1
	xlIMEModeOff                  =2
	xlIMEModeDisable              =3
	xlIMEModeHiragana             =4
	xlIMEModeKatakana             =5
	xlIMEModeKatakanaHalf         =6
	xlIMEModeAlphaFull            =7
	xlIMEModeAlpha                =8
	xlIMEModeHangulFull           =9
	xlIMEModeHangul               =10

class XlIcon(Enum):
	xlIconNoCellIcon              =-1
	xlIconGreenUpArrow            =1
	xlIconYellowSideArrow         =2
	xlIconRedDownArrow            =3
	xlIconGrayUpArrow             =4
	xlIconGraySideArrow           =5
	xlIconGrayDownArrow           =6
	xlIconGreenFlag               =7
	xlIconYellowFlag              =8
	xlIconRedFlag                 =9
	xlIconGreenCircle             =10
	xlIconYellowCircle            =11
	xlIconRedCircleWithBorder     =12
	xlIconBlackCircleWithBorder   =13
	xlIconGreenTrafficLight       =14
	xlIconYellowTrafficLight      =15
	xlIconRedTrafficLight         =16
	xlIconYellowTriangle          =17
	xlIconRedDiamond              =18
	xlIconGreenCheckSymbol        =19
	xlIconYellowExclamationSymbol =20
	xlIconRedCrossSymbol          =21
	xlIconGreenCheck              =22
	xlIconYellowExclamation       =23
	xlIconRedCross                =24
	xlIconYellowUpInclineArrow    =25
	xlIconYellowDownInclineArrow  =26
	xlIconGrayUpInclineArrow      =27
	xlIconGrayDownInclineArrow    =28
	xlIconRedCircle               =29
	xlIconPinkCircle              =30
	xlIconGrayCircle              =31
	xlIconBlackCircle             =32
	xlIconCircleWithOneWhiteQuarter=33
	xlIconCircleWithTwoWhiteQuarters=34
	xlIconCircleWithThreeWhiteQuarters=35
	xlIconWhiteCircleAllWhiteQuarters=36
	xlIcon0Bars                   =37
	xlIcon1Bar                    =38
	xlIcon2Bars                   =39
	xlIcon3Bars                   =40
	xlIcon4Bars                   =41
	xlIconGoldStar                =42
	xlIconHalfGoldStar            =43
	xlIconSilverStar              =44
	xlIconGreenUpTriangle         =45
	xlIconYellowDash              =46
	xlIconRedDownTriangle         =47
	xlIcon4FilledBoxes            =48
	xlIcon3FilledBoxes            =49
	xlIcon2FilledBoxes            =50
	xlIcon1FilledBox              =51
	xlIcon0FilledBoxes            =52

class XlIconSet(Enum):
	xlCustomSet                   =-1
	xl3Arrows                     =1
	xl3ArrowsGray                 =2
	xl3Flags                      =3
	xl3TrafficLights1             =4
	xl3TrafficLights2             =5
	xl3Signs                      =6
	xl3Symbols                    =7
	xl3Symbols2                   =8
	xl4Arrows                     =9
	xl4ArrowsGray                 =10
	xl4RedToBlack                 =11
	xl4CRV                        =12
	xl4TrafficLights              =13
	xl5Arrows                     =14
	xl5ArrowsGray                 =15
	xl5CRV                        =16
	xl5Quarters                   =17
	xl3Stars                      =18
	xl3Triangles                  =19
	xl5Boxes                      =20

class XlImportDataAs(Enum):
	xlQueryTable                  =0
	xlPivotTableReport            =1
	xlTable                       =2

class XlInsertFormatOrigin(Enum):
	xlFormatFromLeftOrAbove       =0
	xlFormatFromRightOrBelow      =1

class XlInsertShiftDirection(Enum):
	xlShiftDown                   =-4121
	xlShiftToRight                =-4161

class XlLayoutFormType(Enum):
	xlTabular                     =0
	xlOutline                     =1

class XlLayoutRowType(Enum):
	xlCompactRow                  =0
	xlTabularRow                  =1
	xlOutlineRow                  =2

class XlLegendPosition(Enum):
	xlLegendPositionBottom        =-4107
	xlLegendPositionCorner        =2
	xlLegendPositionLeft          =-4131
	xlLegendPositionRight         =-4152
	xlLegendPositionTop           =-4160
	xlLegendPositionCustom        =-4161

class XlLineStyle(Enum):
	xlContinuous                  =1
	xlDash                        =-4115
	xlDashDot                     =4
	xlDashDotDot                  =5
	xlDot                         =-4118
	xlDouble                      =-4119
	xlSlantDashDot                =13
	xlLineStyleNone               =-4142

class XlLink(Enum):
	xlExcelLinks                  =1
	xlOLELinks                    =2
	xlPublishers                  =5
	xlSubscribers                 =6

class XlLinkInfo(Enum):
	xlEditionDate                 =2
	xlUpdateState                 =1
	xlLinkInfoStatus              =3

class XlLinkInfoType(Enum):
	xlLinkInfoOLELinks            =2
	xlLinkInfoPublishers          =5
	xlLinkInfoSubscribers         =6

class XlLinkStatus(Enum):
	xlLinkStatusOK                =0
	xlLinkStatusMissingFile       =1
	xlLinkStatusMissingSheet      =2
	xlLinkStatusOld               =3
	xlLinkStatusSourceNotCalculated=4
	xlLinkStatusIndeterminate     =5
	xlLinkStatusNotStarted        =6
	xlLinkStatusInvalidName       =7
	xlLinkStatusSourceNotOpen     =8
	xlLinkStatusSourceOpen        =9
	xlLinkStatusCopiedValues      =10

class XlLinkType(Enum):
	xlLinkTypeExcelLinks          =1
	xlLinkTypeOLELinks            =2

class XlLinkedDataTypeState(Enum):
	xlLinkedDataTypeStateNone     =0
	xlLinkedDataTypeStateValidLinkedData=1
	xlLinkedDataTypeStateDisambiguationNeeded=2
	xlLinkedDataTypeStateBrokenLinkedData=3
	xlLinkedDataTypeStateFetchingData=4

class XlListConflict(Enum):
	xlListConflictDialog          =0
	xlListConflictRetryAllConflicts=1
	xlListConflictDiscardAllConflicts=2
	xlListConflictError           =3

class XlListDataType(Enum):
	xlListDataTypeNone            =0
	xlListDataTypeText            =1
	xlListDataTypeMultiLineText   =2
	xlListDataTypeNumber          =3
	xlListDataTypeCurrency        =4
	xlListDataTypeDateTime        =5
	xlListDataTypeChoice          =6
	xlListDataTypeChoiceMulti     =7
	xlListDataTypeListLookup      =8
	xlListDataTypeCheckbox        =9
	xlListDataTypeHyperLink       =10
	xlListDataTypeCounter         =11
	xlListDataTypeMultiLineRichText=12

class XlListObjectSourceType(Enum):
	xlSrcExternal                 =0
	xlSrcRange                    =1
	xlSrcXml                      =2
	xlSrcQuery                    =3
	xlSrcModel                    =4

class XlLocationInTable(Enum):
	xlColumnHeader                =-4110
	xlColumnItem                  =5
	xlDataHeader                  =3
	xlDataItem                    =7
	xlPageHeader                  =2
	xlPageItem                    =6
	xlRowHeader                   =-4153
	xlRowItem                     =4
	xlTableBody                   =8

class XlLookAt(Enum):
	xlPart                        =2
	xlWhole                       =1

class XlLookFor(Enum):
	xlLookForBlanks               =0
	xlLookForErrors               =1
	xlLookForFormulas             =2

class XlMSApplication(Enum):
	xlMicrosoftAccess             =4
	xlMicrosoftFoxPro             =5
	xlMicrosoftMail               =3
	xlMicrosoftPowerPoint         =2
	xlMicrosoftProject            =6
	xlMicrosoftSchedulePlus       =7
	xlMicrosoftWord               =1

class XlMailSystem(Enum):
	xlMAPI                        =1
	xlNoMailSystem                =0
	xlPowerTalk                   =2

class XlMarkerStyle(Enum):
	xlMarkerStyleAutomatic        =-4105
	xlMarkerStyleCircle           =8
	xlMarkerStyleDash             =-4115
	xlMarkerStyleDiamond          =2
	xlMarkerStyleDot              =-4118
	xlMarkerStyleNone             =-4142
	xlMarkerStylePicture          =-4147
	xlMarkerStylePlus             =9
	xlMarkerStyleSquare           =1
	xlMarkerStyleStar             =5
	xlMarkerStyleTriangle         =3
	xlMarkerStyleX                =-4168

class XlMeasurementUnits(Enum):
	xlInches                      =0
	xlCentimeters                 =1
	xlMillimeters                 =2

class XlModelChangeSource(Enum):
	xlChangeByExcel               =0
	xlChangeByPowerPivotAddIn     =1

class XlMouseButton(Enum):
	xlNoButton                    =0
	xlPrimaryButton               =1
	xlSecondaryButton             =2

class XlMousePointer(Enum):
	xlIBeam                       =3
	xlDefault                     =-4143
	xlNorthwestArrow              =1
	xlWait                        =2

class XlOLEType(Enum):
	xlOLEControl                  =2
	xlOLEEmbed                    =1
	xlOLELink                     =0

class XlOLEVerb(Enum):
	xlVerbOpen                    =2
	xlVerbPrimary                 =1

class XlOartHorizontalOverflow(Enum):
	xlOartHorizontalOverflowOverflow=0
	xlOartHorizontalOverflowClip  =1

class XlOartVerticalOverflow(Enum):
	xlOartVerticalOverflowOverflow=0
	xlOartVerticalOverflowClip    =1
	xlOartVerticalOverflowEllipsis=2

class XlObjectSize(Enum):
	xlFitToPage                   =2
	xlFullPage                    =3
	xlScreenSize                  =1

class XlOrder(Enum):
	xlDownThenOver                =1
	xlOverThenDown                =2

class XlOrientation(Enum):
	xlDownward                    =-4170
	xlHorizontal                  =-4128
	xlUpward                      =-4171
	xlVertical                    =-4166

class XlPTSelectionMode(Enum):
	xlLabelOnly                   =1
	xlDataAndLabel                =0
	xlDataOnly                    =2
	xlOrigin                      =3
	xlButton                      =15
	xlBlanks                      =4
	xlFirstRow                    =256

class XlPageBreak(Enum):
	xlPageBreakAutomatic          =-4105
	xlPageBreakManual             =-4135
	xlPageBreakNone               =-4142

class XlPageBreakExtent(Enum):
	xlPageBreakFull               =1
	xlPageBreakPartial            =2

class XlPageOrientation(Enum):
	xlLandscape                   =2
	xlPortrait                    =1

class XlPaperSize(Enum):
	xlPaper10x14                  =16
	xlPaper11x17                  =17
	xlPaperA3                     =8
	xlPaperA4                     =9
	xlPaperA4Small                =10
	xlPaperA5                     =11
	xlPaperB4                     =12
	xlPaperB5                     =13
	xlPaperCsheet                 =24
	xlPaperDsheet                 =25
	xlPaperEnvelope10             =20
	xlPaperEnvelope11             =21
	xlPaperEnvelope12             =22
	xlPaperEnvelope14             =23
	xlPaperEnvelope9              =19
	xlPaperEnvelopeB4             =33
	xlPaperEnvelopeB5             =34
	xlPaperEnvelopeB6             =35
	xlPaperEnvelopeC3             =29
	xlPaperEnvelopeC4             =30
	xlPaperEnvelopeC5             =28
	xlPaperEnvelopeC6             =31
	xlPaperEnvelopeC65            =32
	xlPaperEnvelopeDL             =27
	xlPaperEnvelopeItaly          =36
	xlPaperEnvelopeMonarch        =37
	xlPaperEnvelopePersonal       =38
	xlPaperEsheet                 =26
	xlPaperExecutive              =7
	xlPaperFanfoldLegalGerman     =41
	xlPaperFanfoldStdGerman       =40
	xlPaperFanfoldUS              =39
	xlPaperFolio                  =14
	xlPaperLedger                 =4
	xlPaperLegal                  =5
	xlPaperLetter                 =1
	xlPaperLetterSmall            =2
	xlPaperNote                   =18
	xlPaperQuarto                 =15
	xlPaperStatement              =6
	xlPaperTabloid                =3
	xlPaperUser                   =256

class XlParameterDataType(Enum):
	xlParamTypeUnknown            =0
	xlParamTypeChar               =1
	xlParamTypeNumeric            =2
	xlParamTypeDecimal            =3
	xlParamTypeInteger            =4
	xlParamTypeSmallInt           =5
	xlParamTypeFloat              =6
	xlParamTypeReal               =7
	xlParamTypeDouble             =8
	xlParamTypeVarChar            =12
	xlParamTypeDate               =9
	xlParamTypeTime               =10
	xlParamTypeTimestamp          =11
	xlParamTypeLongVarChar        =-1
	xlParamTypeBinary             =-2
	xlParamTypeVarBinary          =-3
	xlParamTypeLongVarBinary      =-4
	xlParamTypeBigInt             =-5
	xlParamTypeTinyInt            =-6
	xlParamTypeBit                =-7
	xlParamTypeWChar              =-8

class XlParameterType(Enum):
	xlPrompt                      =0
	xlConstant                    =1
	xlRange                       =2

class XlParentDataLabelOptions(Enum):
	xlParentDataLabelOptionsNone  =0
	xlParentDataLabelOptionsBanner=1
	xlParentDataLabelOptionsOverlapping=2

class XlPasteSpecialOperation(Enum):
	xlPasteSpecialOperationAdd    =2
	xlPasteSpecialOperationDivide =5
	xlPasteSpecialOperationMultiply=4
	xlPasteSpecialOperationNone   =-4142
	xlPasteSpecialOperationSubtract=3

class XlPasteType(Enum):
	xlPasteAll                    =-4104
	xlPasteAllUsingSourceTheme    =13
	xlPasteAllMergingConditionalFormats=14
	xlPasteAllExceptBorders       =7
	xlPasteFormats                =-4122
	xlPasteFormulas               =-4123
	xlPasteComments               =-4144
	xlPasteValues                 =-4163
	xlPasteColumnWidths           =8
	xlPasteValidation             =6
	xlPasteFormulasAndNumberFormats=11
	xlPasteValuesAndNumberFormats =12

class XlPattern(Enum):
	xlPatternAutomatic            =-4105
	xlPatternChecker              =9
	xlPatternCrissCross           =16
	xlPatternDown                 =-4121
	xlPatternGray16               =17
	xlPatternGray25               =-4124
	xlPatternGray50               =-4125
	xlPatternGray75               =-4126
	xlPatternGray8                =18
	xlPatternGrid                 =15
	xlPatternHorizontal           =-4128
	xlPatternLightDown            =13
	xlPatternLightHorizontal      =11
	xlPatternLightUp              =14
	xlPatternLightVertical        =12
	xlPatternNone                 =-4142
	xlPatternSemiGray75           =10
	xlPatternSolid                =1
	xlPatternUp                   =-4162
	xlPatternVertical             =-4166
	xlPatternLinearGradient       =4000
	xlPatternRectangularGradient  =4001

class XlPhoneticAlignment(Enum):
	xlPhoneticAlignNoControl      =0
	xlPhoneticAlignLeft           =1
	xlPhoneticAlignCenter         =2
	xlPhoneticAlignDistributed    =3

class XlPhoneticCharacterType(Enum):
	xlKatakanaHalf                =0
	xlKatakana                    =1
	xlHiragana                    =2
	xlNoConversion                =3

class XlPictureAppearance(Enum):
	xlPrinter                     =2
	xlScreen                      =1

class XlPictureConvertorType(Enum):
	xlBMP                         =1
	xlCGM                         =7
	xlDRW                         =4
	xlDXF                         =5
	xlEPS                         =8
	xlHGL                         =6
	xlPCT                         =13
	xlPCX                         =10
	xlPIC                         =11
	xlPLT                         =12
	xlTIF                         =9
	xlWMF                         =2
	xlWPG                         =3

class XlPieSliceIndex(Enum):
	xlOuterCounterClockwisePoint  =1
	xlOuterCenterPoint            =2
	xlOuterClockwisePoint         =3
	xlMidClockwiseRadiusPoint     =4
	xlCenterPoint                 =5
	xlMidCounterClockwiseRadiusPoint=6
	xlInnerClockwisePoint         =7
	xlInnerCenterPoint            =8
	xlInnerCounterClockwisePoint  =9

class XlPieSliceLocation(Enum):
	xlHorizontalCoordinate        =1
	xlVerticalCoordinate          =2

class XlPivotCellType(Enum):
	xlPivotCellValue              =0
	xlPivotCellPivotItem          =1
	xlPivotCellSubtotal           =2
	xlPivotCellGrandTotal         =3
	xlPivotCellDataField          =4
	xlPivotCellPivotField         =5
	xlPivotCellPageFieldItem      =6
	xlPivotCellCustomSubtotal     =7
	xlPivotCellDataPivotField     =8
	xlPivotCellBlankCell          =9

class XlPivotConditionScope(Enum):
	xlSelectionScope              =0
	xlFieldsScope                 =1
	xlDataFieldScope              =2

class XlPivotFieldCalculation(Enum):
	xlDifferenceFrom              =2
	xlIndex                       =9
	xlNoAdditionalCalculation     =-4143
	xlPercentDifferenceFrom       =4
	xlPercentOf                   =3
	xlPercentOfColumn             =7
	xlPercentOfRow                =6
	xlPercentOfTotal              =8
	xlRunningTotal                =5
	xlPercentOfParentRow          =10
	xlPercentOfParentColumn       =11
	xlPercentOfParent             =12
	xlPercentRunningTotal         =13
	xlRankAscending               =14
	xlRankDecending               =15

class XlPivotFieldDataType(Enum):
	xlDate                        =2
	xlNumber                      =-4145
	xlText                        =-4158

class XlPivotFieldOrientation(Enum):
	xlColumnField                 =2
	xlDataField                   =4
	xlHidden                      =0
	xlPageField                   =3
	xlRowField                    =1

class XlPivotFieldRepeatLabels(Enum):
	xlDoNotRepeatLabels           =1
	xlRepeatLabels                =2

class XlPivotFilterType(Enum):
	xlTopCount                    =1
	xlBottomCount                 =2
	xlTopPercent                  =3
	xlBottomPercent               =4
	xlTopSum                      =5
	xlBottomSum                   =6
	xlValueEquals                 =7
	xlValueDoesNotEqual           =8
	xlValueIsGreaterThan          =9
	xlValueIsGreaterThanOrEqualTo =10
	xlValueIsLessThan             =11
	xlValueIsLessThanOrEqualTo    =12
	xlValueIsBetween              =13
	xlValueIsNotBetween           =14
	xlCaptionEquals               =15
	xlCaptionDoesNotEqual         =16
	xlCaptionBeginsWith           =17
	xlCaptionDoesNotBeginWith     =18
	xlCaptionEndsWith             =19
	xlCaptionDoesNotEndWith       =20
	xlCaptionContains             =21
	xlCaptionDoesNotContain       =22
	xlCaptionIsGreaterThan        =23
	xlCaptionIsGreaterThanOrEqualTo=24
	xlCaptionIsLessThan           =25
	xlCaptionIsLessThanOrEqualTo  =26
	xlCaptionIsBetween            =27
	xlCaptionIsNotBetween         =28
	xlSpecificDate                =29
	xlNotSpecificDate             =30
	xlBefore                      =31
	xlBeforeOrEqualTo             =32
	xlAfter                       =33
	xlAfterOrEqualTo              =34
	xlDateBetween                 =35
	xlDateNotBetween              =36
	xlDateTomorrow                =37
	xlDateToday                   =38
	xlDateYesterday               =39
	xlDateNextWeek                =40
	xlDateThisWeek                =41
	xlDateLastWeek                =42
	xlDateNextMonth               =43
	xlDateThisMonth               =44
	xlDateLastMonth               =45
	xlDateNextQuarter             =46
	xlDateThisQuarter             =47
	xlDateLastQuarter             =48
	xlDateNextYear                =49
	xlDateThisYear                =50
	xlDateLastYear                =51
	xlYearToDate                  =52
	xlAllDatesInPeriodQuarter1    =53
	xlAllDatesInPeriodQuarter2    =54
	xlAllDatesInPeriodQuarter3    =55
	xlAllDatesInPeriodQuarter4    =56
	xlAllDatesInPeriodJanuary     =57
	xlAllDatesInPeriodFebruary    =58
	xlAllDatesInPeriodMarch       =59
	xlAllDatesInPeriodApril       =60
	xlAllDatesInPeriodMay         =61
	xlAllDatesInPeriodJune        =62
	xlAllDatesInPeriodJuly        =63
	xlAllDatesInPeriodAugust      =64
	xlAllDatesInPeriodSeptember   =65
	xlAllDatesInPeriodOctober     =66
	xlAllDatesInPeriodNovember    =67
	xlAllDatesInPeriodDecember    =68

class XlPivotFormatType(Enum):
	xlReport1                     =0
	xlReport2                     =1
	xlReport3                     =2
	xlReport4                     =3
	xlReport5                     =4
	xlReport6                     =5
	xlReport7                     =6
	xlReport8                     =7
	xlReport9                     =8
	xlReport10                    =9
	xlTable1                      =10
	xlTable2                      =11
	xlTable3                      =12
	xlTable4                      =13
	xlTable5                      =14
	xlTable6                      =15
	xlTable7                      =16
	xlTable8                      =17
	xlTable9                      =18
	xlTable10                     =19
	xlPTClassic                   =20
	xlPTNone                      =21

class XlPivotLineType(Enum):
	xlPivotLineRegular            =0
	xlPivotLineSubtotal           =1
	xlPivotLineGrandTotal         =2
	xlPivotLineBlank              =3

class XlPivotTableMissingItems(Enum):
	xlMissingItemsDefault         =-1
	xlMissingItemsNone            =0
	xlMissingItemsMax             =32500
	xlMissingItemsMax2            =1048576

class XlPivotTableSourceType(Enum):
	xlScenario                    =4
	xlConsolidation               =3
	xlDatabase                    =1
	xlExternal                    =2
	xlPivotTable                  =-4148

class XlPivotTableVersionList(Enum):
	xlPivotTableVersion2000       =0
	xlPivotTableVersion10         =1
	xlPivotTableVersion11         =2
	xlPivotTableVersion12         =3
	xlPivotTableVersion14         =4
	xlPivotTableVersion15         =5
	xlPivotTableVersionCurrent    =-1

class XlPlacement(Enum):
	xlFreeFloating                =3
	xlMove                        =2
	xlMoveAndSize                 =1

class XlPlatform(Enum):
	xlMacintosh                   =1
	xlMSDOS                       =3
	xlWindows                     =2

class XlPortugueseReform(Enum):
	xlPortuguesePreReform         =1
	xlPortuguesePostReform        =2
	xlPortugueseBoth              =3

class XlPrintErrors(Enum):
	xlPrintErrorsDisplayed        =0
	xlPrintErrorsBlank            =1
	xlPrintErrorsDash             =2
	xlPrintErrorsNA               =3

class XlPrintLocation(Enum):
	xlPrintSheetEnd               =1
	xlPrintInPlace                =16
	xlPrintNoComments             =-4142

class XlPriority(Enum):
	xlPriorityHigh                =-4127
	xlPriorityLow                 =-4134
	xlPriorityNormal              =-4143

class XlPropertyDisplayedIn(Enum):
	xlDisplayPropertyInPivotTable =1
	xlDisplayPropertyInTooltip    =2
	xlDisplayPropertyInPivotTableAndTooltip=3

class XlProtectedViewCloseReason(Enum):
	xlProtectedViewCloseNormal    =0
	xlProtectedViewCloseEdit      =1
	xlProtectedViewCloseForced    =2

class XlProtectedViewWindowState(Enum):
	xlProtectedViewWindowNormal   =0
	xlProtectedViewWindowMinimized=1
	xlProtectedViewWindowMaximized=2

class XlPublishToDocsDisclosureScope(Enum):
	msoPublic                     =0
	msoLimited                    =1
	msoOrganization               =2
	msoNoOverwrite                =3

class XlPublishToPBINameConflictAction(Enum):
	msoPBIIgnore                  =0
	msoPBIAbort                   =1
	msoPBIOverwrite               =2

class XlPublishToPBIPublishType(Enum):
	msoPBIExport                  =0
	msoPBIUpload                  =1

class XlQueryType(Enum):
	xlODBCQuery                   =1
	xlDAORecordset                =2
	xlWebQuery                    =4
	xlOLEDBQuery                  =5
	xlTextImport                  =6
	xlADORecordset                =7

class XlQuickAnalysisMode(Enum):
	xlLensOnly                    =0
	xlFormatConditions            =1
	xlRecommendedCharts           =2
	xlTotals                      =3
	xlTables                      =4
	xlSparklines                  =5

class XlRangeAutoFormat(Enum):
	xlRangeAutoFormat3DEffects1   =13
	xlRangeAutoFormat3DEffects2   =14
	xlRangeAutoFormatAccounting1  =4
	xlRangeAutoFormatAccounting2  =5
	xlRangeAutoFormatAccounting3  =6
	xlRangeAutoFormatAccounting4  =17
	xlRangeAutoFormatClassic1     =1
	xlRangeAutoFormatClassic2     =2
	xlRangeAutoFormatClassic3     =3
	xlRangeAutoFormatColor1       =7
	xlRangeAutoFormatColor2       =8
	xlRangeAutoFormatColor3       =9
	xlRangeAutoFormatList1        =10
	xlRangeAutoFormatList2        =11
	xlRangeAutoFormatList3        =12
	xlRangeAutoFormatLocalFormat1 =15
	xlRangeAutoFormatLocalFormat2 =16
	xlRangeAutoFormatLocalFormat3 =19
	xlRangeAutoFormatLocalFormat4 =20
	xlRangeAutoFormatReport1      =21
	xlRangeAutoFormatReport2      =22
	xlRangeAutoFormatReport3      =23
	xlRangeAutoFormatReport4      =24
	xlRangeAutoFormatReport5      =25
	xlRangeAutoFormatReport6      =26
	xlRangeAutoFormatReport7      =27
	xlRangeAutoFormatReport8      =28
	xlRangeAutoFormatReport9      =29
	xlRangeAutoFormatReport10     =30
	xlRangeAutoFormatClassicPivotTable=31
	xlRangeAutoFormatTable1       =32
	xlRangeAutoFormatTable2       =33
	xlRangeAutoFormatTable3       =34
	xlRangeAutoFormatTable4       =35
	xlRangeAutoFormatTable5       =36
	xlRangeAutoFormatTable6       =37
	xlRangeAutoFormatTable7       =38
	xlRangeAutoFormatTable8       =39
	xlRangeAutoFormatTable9       =40
	xlRangeAutoFormatTable10      =41
	xlRangeAutoFormatPTNone       =42
	xlRangeAutoFormatNone         =-4142
	xlRangeAutoFormatSimple       =-4154

class XlRangeValueDataType(Enum):
	xlRangeValueDefault           =10
	xlRangeValueXMLSpreadsheet    =11
	xlRangeValueMSPersistXML      =12

class XlReferenceStyle(Enum):
	xlA1                          =1
	xlR1C1                        =-4150

class XlReferenceType(Enum):
	xlAbsolute                    =1
	xlAbsRowRelColumn             =2
	xlRelative                    =4
	xlRelRowAbsColumn             =3

class XlRegionLabelOptions(Enum):
	xlRegionLabelOptionsNone      =0
	xlRegionLabelOptionsBestFitOnly=1
	xlRegionLabelOptionsShowAll   =2

class XlRemoveDocInfoType(Enum):
	xlRDIComments                 =1
	xlRDIRemovePersonalInformation=4
	xlRDIEmailHeader              =5
	xlRDIRoutingSlip              =6
	xlRDISendForReview            =7
	xlRDIDocumentProperties       =8
	xlRDIDocumentWorkspace        =10
	xlRDIInkAnnotations           =11
	xlRDIScenarioComments         =12
	xlRDIPublishInfo              =13
	xlRDIDocumentServerProperties =14
	xlRDIDocumentManagementPolicy =15
	xlRDIContentType              =16
	xlRDIDefinedNameComments      =18
	xlRDIInactiveDataConnections  =19
	xlRDIPrinterPath              =20
	xlRDIInlineWebExtensions      =21
	xlRDITaskpaneWebExtensions    =22
	xlRDIExcelDataModel           =23
	xlRDIAll                      =99

class XlRgbColor(Enum):
	rgbAliceBlue                  =16775408
	rgbAntiqueWhite               =14150650
	rgbAqua                       =16776960
	rgbAquamarine                 =13959039
	rgbAzure                      =16777200
	rgbBeige                      =14480885
	rgbBisque                     =12903679
	rgbBlack                      =0
	rgbBlanchedAlmond             =13495295
	rgbBlue                       =16711680
	rgbBlueViolet                 =14822282
	rgbBrown                      =2763429
	rgbBurlyWood                  =8894686
	rgbCadetBlue                  =10526303
	rgbChartreuse                 =65407
	rgbCoral                      =5275647
	rgbCornflowerBlue             =15570276
	rgbCornsilk                   =14481663
	rgbCrimson                    =3937500
	rgbDarkBlue                   =9109504
	rgbDarkCyan                   =9145088
	rgbDarkGoldenrod              =755384
	rgbDarkGreen                  =25600
	rgbDarkGray                   =11119017
	rgbDarkGrey                   =11119017
	rgbDarkKhaki                  =7059389
	rgbDarkMagenta                =9109643
	rgbDarkOliveGreen             =3107669
	rgbDarkOrange                 =36095
	rgbDarkOrchid                 =13382297
	rgbDarkRed                    =139
	rgbDarkSalmon                 =8034025
	rgbDarkSeaGreen               =9419919
	rgbDarkSlateBlue              =9125192
	rgbDarkSlateGray              =5197615
	rgbDarkSlateGrey              =5197615
	rgbDarkTurquoise              =13749760
	rgbDarkViolet                 =13828244
	rgbDeepPink                   =9639167
	rgbDeepSkyBlue                =16760576
	rgbDimGray                    =6908265
	rgbDimGrey                    =6908265
	rgbDodgerBlue                 =16748574
	rgbFireBrick                  =2237106
	rgbFloralWhite                =15792895
	rgbForestGreen                =2263842
	rgbFuchsia                    =16711935
	rgbGainsboro                  =14474460
	rgbGhostWhite                 =16775416
	rgbGold                       =55295
	rgbGoldenrod                  =2139610
	rgbGray                       =8421504
	rgbGreen                      =32768
	rgbGrey                       =8421504
	rgbGreenYellow                =3145645
	rgbHoneydew                   =15794160
	rgbHotPink                    =11823615
	rgbIndianRed                  =6053069
	rgbIndigo                     =8519755
	rgbIvory                      =15794175
	rgbKhaki                      =9234160
	rgbLavender                   =16443110
	rgbLavenderBlush              =16118015
	rgbLawnGreen                  =64636
	rgbLemonChiffon               =13499135
	rgbLightBlue                  =15128749
	rgbLightCoral                 =8421616
	rgbLightCyan                  =9145088
	rgbLightGoldenrodYellow       =13826810
	rgbLightGray                  =13882323
	rgbLightGreen                 =9498256
	rgbLightGrey                  =13882323
	rgbLightPink                  =12695295
	rgbLightSalmon                =8036607
	rgbLightSeaGreen              =11186720
	rgbLightSkyBlue               =16436871
	rgbLightSlateGray             =10061943
	rgbLightSlateGrey             =10061943
	rgbLightSteelBlue             =14599344
	rgbLightYellow                =14745599
	rgbLime                       =65280
	rgbLimeGreen                  =3329330
	rgbLinen                      =15134970
	rgbMaroon                     =128
	rgbMediumAquamarine           =11206502
	rgbMediumBlue                 =13434880
	rgbMediumOrchid               =13850042
	rgbMediumPurple               =14381203
	rgbMediumSeaGreen             =7451452
	rgbMediumSlateBlue            =15624315
	rgbMediumSpringGreen          =10156544
	rgbMediumTurquoise            =13422920
	rgbMediumVioletRed            =8721863
	rgbMidnightBlue               =7346457
	rgbMintCream                  =16449525
	rgbMistyRose                  =14804223
	rgbMoccasin                   =11920639
	rgbNavajoWhite                =11394815
	rgbNavy                       =8388608
	rgbNavyBlue                   =8388608
	rgbOldLace                    =15136253
	rgbOlive                      =32896
	rgbOliveDrab                  =2330219
	rgbOrange                     =42495
	rgbOrangeRed                  =17919
	rgbOrchid                     =14053594
	rgbPaleGoldenrod              =7071982
	rgbPaleGreen                  =10025880
	rgbPaleTurquoise              =15658671
	rgbPaleVioletRed              =9662683
	rgbPapayaWhip                 =14020607
	rgbPeachPuff                  =12180223
	rgbPeru                       =4163021
	rgbPink                       =13353215
	rgbPlum                       =14524637
	rgbPowderBlue                 =15130800
	rgbPurple                     =8388736
	rgbRed                        =255
	rgbRosyBrown                  =9408444
	rgbRoyalBlue                  =14772545
	rgbSalmon                     =7504122
	rgbSandyBrown                 =6333684
	rgbSeaGreen                   =5737262
	rgbSeashell                   =15660543
	rgbSienna                     =2970272
	rgbSilver                     =12632256
	rgbSkyBlue                    =15453831
	rgbSlateBlue                  =13458026
	rgbSlateGray                  =9470064
	rgbSlateGrey                  =9470064
	rgbSnow                       =16448255
	rgbSpringGreen                =8388352
	rgbSteelBlue                  =11829830
	rgbTan                        =9221330
	rgbTeal                       =8421376
	rgbThistle                    =14204888
	rgbTomato                     =4678655
	rgbTurquoise                  =13688896
	rgbYellow                     =65535
	rgbYellowGreen                =3329434
	rgbViolet                     =15631086
	rgbWheat                      =11788021
	rgbWhite                      =16777215
	rgbWhiteSmoke                 =16119285

class XlRobustConnect(Enum):
	xlAsRequired                  =0
	xlAlways                      =1
	xlNever                       =2

class XlRoutingSlipDelivery(Enum):
	xlAllAtOnce                   =2
	xlOneAfterAnother             =1

class XlRoutingSlipStatus(Enum):
	xlNotYetRouted                =0
	xlRoutingComplete             =2
	xlRoutingInProgress           =1

class XlRowCol(Enum):
	xlColumns                     =2
	xlRows                        =1

class XlRunAutoMacro(Enum):
	xlAutoActivate                =3
	xlAutoClose                   =2
	xlAutoDeactivate              =4
	xlAutoOpen                    =1

class XlSaveAction(Enum):
	xlDoNotSaveChanges            =2
	xlSaveChanges                 =1

class XlSaveAsAccessMode(Enum):
	xlExclusive                   =3
	xlNoChange                    =1
	xlShared                      =2

class XlSaveConflictResolution(Enum):
	xlLocalSessionChanges         =2
	xlOtherSessionChanges         =3
	xlUserResolution              =1

class XlScaleType(Enum):
	xlScaleLinear                 =-4132
	xlScaleLogarithmic            =-4133

class XlSearchDirection(Enum):
	xlNext                        =1
	xlPrevious                    =2

class XlSearchOrder(Enum):
	xlByColumns                   =2
	xlByRows                      =1

class XlSearchWithin(Enum):
	xlWithinSheet                 =1
	xlWithinWorkbook              =2

class XlSeriesColorGradientStyle(Enum):
	xlSeriesColorGradientStyleSequential=0
	xlSeriesColorGradientStyleDiverging=1

class XlSeriesNameLevel(Enum):
	xlSeriesNameLevelNone         =-3
	xlSeriesNameLevelCustom       =-2
	xlSeriesNameLevelAll          =-1

class XlSheetType(Enum):
	xlChart                       =-4109
	xlDialogSheet                 =-4116
	xlExcel4IntlMacroSheet        =4
	xlExcel4MacroSheet            =3
	xlWorksheet                   =-4167

class XlSheetVisibility(Enum):
	xlSheetVisible                =-1
	xlSheetHidden                 =0
	xlSheetVeryHidden             =2

class XlSizeRepresents(Enum):
	xlSizeIsWidth                 =2
	xlSizeIsArea                  =1

class XlSlicerCacheType(Enum):
	xlSlicer                      =1
	xlTimeline                    =2

class XlSlicerCrossFilterType(Enum):
	xlSlicerNoCrossFilter         =1
	xlSlicerCrossFilterShowItemsWithDataAtTop=2
	xlSlicerCrossFilterShowItemsWithNoData=3
	xlSlicerCrossFilterHideButtonsWithNoData=4

class XlSlicerSort(Enum):
	xlSlicerSortDataSourceOrder   =1
	xlSlicerSortAscending         =2
	xlSlicerSortDescending        =3

class XlSmartTagControlType(Enum):
	xlSmartTagControlSmartTag     =1
	xlSmartTagControlLink         =2
	xlSmartTagControlHelp         =3
	xlSmartTagControlHelpURL      =4
	xlSmartTagControlSeparator    =5
	xlSmartTagControlButton       =6
	xlSmartTagControlLabel        =7
	xlSmartTagControlImage        =8
	xlSmartTagControlCheckbox     =9
	xlSmartTagControlTextbox      =10
	xlSmartTagControlListbox      =11
	xlSmartTagControlCombo        =12
	xlSmartTagControlActiveX      =13
	xlSmartTagControlRadioGroup   =14

class XlSmartTagDisplayMode(Enum):
	xlIndicatorAndButton          =0
	xlDisplayNone                 =1
	xlButtonOnly                  =2

class XlSortDataOption(Enum):
	xlSortNormal                  =0
	xlSortTextAsNumbers           =1

class XlSortMethod(Enum):
	xlPinYin                      =1
	xlStroke                      =2

class XlSortMethodOld(Enum):
	xlCodePage                    =2
	xlSyllabary                   =1

class XlSortOn(Enum):
	xlSortOnValues                =0
	xlSortOnCellColor             =1
	xlSortOnFontColor             =2
	xlSortOnIcon                  =3

class XlSortOrder(Enum):
	xlAscending                   =1
	xlDescending                  =2

class XlSortOrientation(Enum):
	xlSortRows                    =2
	xlSortColumns                 =1

class XlSortType(Enum):
	xlSortLabels                  =2
	xlSortValues                  =1

class XlSourceType(Enum):
	xlSourceWorkbook              =0
	xlSourceSheet                 =1
	xlSourcePrintArea             =2
	xlSourceAutoFilter            =3
	xlSourceRange                 =4
	xlSourceChart                 =5
	xlSourcePivotTable            =6
	xlSourceQuery                 =7

class XlSpanishModes(Enum):
	xlSpanishTuteoOnly            =0
	xlSpanishTuteoAndVoseo        =1
	xlSpanishVoseoOnly            =2

class XlSparkScale(Enum):
	xlSparkScaleGroup             =1
	xlSparkScaleSingle            =2
	xlSparkScaleCustom            =3

class XlSparkType(Enum):
	xlSparkLine                   =1
	xlSparkColumn                 =2
	xlSparkColumnStacked100       =3

class XlSparklineRowCol(Enum):
	xlSparklineNonSquare          =0
	xlSparklineRowsSquare         =1
	xlSparklineColumnsSquare      =2

class XlSpeakDirection(Enum):
	xlSpeakByRows                 =0
	xlSpeakByColumns              =1

class XlSpecialCellsValue(Enum):
	xlErrors                      =16
	xlLogical                     =4
	xlNumbers                     =1
	xlTextValues                  =2

class XlStdColorScale(Enum):
	xlColorScaleRYG               =1
	xlColorScaleGYR               =2
	xlColorScaleBlackWhite        =3
	xlColorScaleWhiteBlack        =4

class XlSubscribeToFormat(Enum):
	xlSubscribeToPicture          =-4147
	xlSubscribeToText             =-4158

class XlSubtototalLocationType(Enum):
	xlAtTop                       =1
	xlAtBottom                    =2

class XlSummaryColumn(Enum):
	xlSummaryOnLeft               =-4131
	xlSummaryOnRight              =-4152

class XlSummaryReportType(Enum):
	xlSummaryPivotTable           =-4148
	xlStandardSummary             =1

class XlSummaryRow(Enum):
	xlSummaryAbove                =0
	xlSummaryBelow                =1

class XlTabPosition(Enum):
	xlTabPositionFirst            =0
	xlTabPositionLast             =1

class XlTableStyleElementType(Enum):
	xlWholeTable                  =0
	xlHeaderRow                   =1
	xlTotalRow                    =2
	xlGrandTotalRow               =2
	xlFirstColumn                 =3
	xlLastColumn                  =4
	xlGrandTotalColumn            =4
	xlRowStripe1                  =5
	xlRowStripe2                  =6
	xlColumnStripe1               =7
	xlColumnStripe2               =8
	xlFirstHeaderCell             =9
	xlLastHeaderCell              =10
	xlFirstTotalCell              =11
	xlLastTotalCell               =12
	xlSubtotalColumn1             =13
	xlSubtotalColumn2             =14
	xlSubtotalColumn3             =15
	xlSubtotalRow1                =16
	xlSubtotalRow2                =17
	xlSubtotalRow3                =18
	xlBlankRow                    =19
	xlColumnSubheading1           =20
	xlColumnSubheading2           =21
	xlColumnSubheading3           =22
	xlRowSubheading1              =23
	xlRowSubheading2              =24
	xlRowSubheading3              =25
	xlPageFieldLabels             =26
	xlPageFieldValues             =27
	xlSlicerUnselectedItemWithData=28
	xlSlicerUnselectedItemWithNoData=29
	xlSlicerSelectedItemWithData  =30
	xlSlicerSelectedItemWithNoData=31
	xlSlicerHoveredUnselectedItemWithData=32
	xlSlicerHoveredSelectedItemWithData=33
	xlSlicerHoveredUnselectedItemWithNoData=34
	xlSlicerHoveredSelectedItemWithNoData=35
	xlTimelineSelectionLabel      =36
	xlTimelineTimeLevel           =37
	xlTimelinePeriodLabels1       =38
	xlTimelinePeriodLabels2       =39
	xlTimelineSelectedTimeBlock   =40
	xlTimelineUnselectedTimeBlock =41
	xlTimelineSelectedTimeBlockSpace=42

class XlTextParsingType(Enum):
	xlDelimited                   =1
	xlFixedWidth                  =2

class XlTextQualifier(Enum):
	xlTextQualifierDoubleQuote    =1
	xlTextQualifierNone           =-4142
	xlTextQualifierSingleQuote    =2

class XlTextVisualLayoutType(Enum):
	xlTextVisualLTR               =1
	xlTextVisualRTL               =2

class XlThemeColor(Enum):
	xlThemeColorDark1             =1
	xlThemeColorLight1            =2
	xlThemeColorDark2             =3
	xlThemeColorLight2            =4
	xlThemeColorAccent1           =5
	xlThemeColorAccent2           =6
	xlThemeColorAccent3           =7
	xlThemeColorAccent4           =8
	xlThemeColorAccent5           =9
	xlThemeColorAccent6           =10
	xlThemeColorHyperlink         =11
	xlThemeColorFollowedHyperlink =12

class XlThemeFont(Enum):
	xlThemeFontNone               =0
	xlThemeFontMajor              =1
	xlThemeFontMinor              =2

class XlThreadMode(Enum):
	xlThreadModeAutomatic         =0
	xlThreadModeManual            =1

class XlTickLabelOrientation(Enum):
	xlTickLabelOrientationAutomatic=-4105
	xlTickLabelOrientationDownward=-4170
	xlTickLabelOrientationHorizontal=-4128
	xlTickLabelOrientationUpward  =-4171
	xlTickLabelOrientationVertical=-4166

class XlTickLabelPosition(Enum):
	xlTickLabelPositionHigh       =-4127
	xlTickLabelPositionLow        =-4134
	xlTickLabelPositionNextToAxis =4
	xlTickLabelPositionNone       =-4142

class XlTickMark(Enum):
	xlTickMarkCross               =4
	xlTickMarkInside              =2
	xlTickMarkNone                =-4142
	xlTickMarkOutside             =3

class XlTimePeriods(Enum):
	xlToday                       =0
	xlYesterday                   =1
	xlLast7Days                   =2
	xlThisWeek                    =3
	xlLastWeek                    =4
	xlLastMonth                   =5
	xlTomorrow                    =6
	xlNextWeek                    =7
	xlNextMonth                   =8
	xlThisMonth                   =9

class XlTimeUnit(Enum):
	xlDays                        =0
	xlMonths                      =1
	xlYears                       =2

class XlTimelineLevel(Enum):
	xlTimelineLevelYears          =0
	xlTimelineLevelQuarters       =1
	xlTimelineLevelMonths         =2
	xlTimelineLevelDays           =3

class XlToolbarProtection(Enum):
	xlNoButtonChanges             =1
	xlNoChanges                   =4
	xlNoDockingChanges            =3
	xlToolbarProtectionNone       =-4143
	xlNoShapeChanges              =2

class XlTopBottom(Enum):
	xlTop10Top                    =1
	xlTop10Bottom                 =0

class XlTotalsCalculation(Enum):
	xlTotalsCalculationNone       =0
	xlTotalsCalculationSum        =1
	xlTotalsCalculationAverage    =2
	xlTotalsCalculationCount      =3
	xlTotalsCalculationCountNums  =4
	xlTotalsCalculationMin        =5
	xlTotalsCalculationMax        =6
	xlTotalsCalculationStdDev     =7
	xlTotalsCalculationVar        =8
	xlTotalsCalculationCustom     =9

class XlTrendlineType(Enum):
	xlExponential                 =5
	xlLinear                      =-4132
	xlLogarithmic                 =-4133
	xlMovingAvg                   =6
	xlPolynomial                  =3
	xlPower                       =4

class XlUnderlineStyle(Enum):
	xlUnderlineStyleDouble        =-4119
	xlUnderlineStyleDoubleAccounting=5
	xlUnderlineStyleNone          =-4142
	xlUnderlineStyleSingle        =2
	xlUnderlineStyleSingleAccounting=4

class XlUpdateLinks(Enum):
	xlUpdateLinksUserSetting      =1
	xlUpdateLinksNever            =2
	xlUpdateLinksAlways           =3

class XlVAlign(Enum):
	xlVAlignBottom                =-4107
	xlVAlignCenter                =-4108
	xlVAlignDistributed           =-4117
	xlVAlignJustify               =-4130
	xlVAlignTop                   =-4160

class XlValueSortOrder(Enum):
	xlValueNone                   =0
	xlValueAscending              =1
	xlValueDescending             =2

class XlWBATemplate(Enum):
	xlWBATChart                   =-4109
	xlWBATExcel4IntlMacroSheet    =4
	xlWBATExcel4MacroSheet        =3
	xlWBATWorksheet               =-4167

class XlWebFormatting(Enum):
	xlWebFormattingAll            =1
	xlWebFormattingRTF            =2
	xlWebFormattingNone           =3

class XlWebSelectionType(Enum):
	xlEntirePage                  =1
	xlAllTables                   =2
	xlSpecifiedTables             =3

class XlWindowState(Enum):
	xlMaximized                   =-4137
	xlMinimized                   =-4140
	xlNormal                      =-4143

class XlWindowType(Enum):
	xlChartAsWindow               =5
	xlChartInPlace                =4
	xlClipboard                   =3
	xlInfo                        =-4129
	xlWorkbook                    =1

class XlWindowView(Enum):
	xlNormalView                  =1
	xlPageBreakPreview            =2
	xlPageLayoutView              =3

class XlXLMMacroType(Enum):
	xlCommand                     =2
	xlFunction                    =1
	xlNotXLM                      =3

class XlXmlExportResult(Enum):
	xlXmlExportSuccess            =0
	xlXmlExportValidationFailed   =1

class XlXmlImportResult(Enum):
	xlXmlImportSuccess            =0
	xlXmlImportElementsTruncated  =1
	xlXmlImportValidationFailed   =2

class XlXmlLoadOption(Enum):
	xlXmlLoadPromptUser           =0
	xlXmlLoadOpenXml              =1
	xlXmlLoadImportToList         =2
	xlXmlLoadMapXml               =3

class XlYesNoGuess(Enum):
	xlGuess                       =0
	xlNo                          =2
	xlYes                         =1


class AboveAverage(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
		# Method 'AboveBelow' returns enumeration of type 'XlAboveBelow'
	AboveBelow: XlAboveBelow
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'CalcFor' returns enumeration of type 'XlCalcFor'
	CalcFor: XlCalcFor
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	NumStdDev: typing.Any
	NumberFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class Action(typing.Protocol):

	def Execute(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
	Content: typing.Any
	Coordinate: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	Parent: typing.Any
		# Method 'Type' returns enumeration of type 'XlActionType'
	Type: XlActionType
	def __iter__(self):
		...

class Actions(typing.Protocol):

	# Result is of type Action
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Action:
		...
	# Result is of type Action
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Action:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Action:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class AddIn(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Author: typing.Any
	CLSID: typing.Any
	Comments: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	FullName: typing.Any
	Installed: typing.Any
	IsOpen: typing.Any
	Keywords: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Path: typing.Any
	Subject: typing.Any
	Title: typing.Any
	progID: typing.Any
	def __iter__(self):
		...

class AddIns(typing.Protocol):

	# Result is of type AddIn
	def Add(self, Filename: str=defaultNamedNotOptArg, CopyFile: typing.Any=defaultNamedOptArg) -> AddIn:
		...
	# Result is of type AddIn
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> AddIn:
		...
	# Result is of type AddIn
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> AddIn:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> AddIn:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class AddIns2(typing.Protocol):

	# Result is of type AddIn
	def Add(self, Filename: str=defaultNamedNotOptArg, CopyFile: typing.Any=defaultNamedOptArg) -> AddIn:
		...
	# Result is of type AddIn
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> AddIn:
		...
	# Result is of type AddIn
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> AddIn:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> AddIn:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Adjustments(typing.Protocol):

	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> float:
		...
	# The method SetItem is actually a property, but must be used as a method to correctly pass the arguments
	def SetItem(self, Index: int=defaultNamedNotOptArg, arg1: float=defaultUnnamedArg) -> None:
		...
	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	# Default method for this class is 'Item'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> float:
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class AllowEditRange(typing.Protocol):

	def ChangePassword(self, Password: str=defaultNamedNotOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def Unprotect(self, Password: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Range' returns object of type 'Range'
	Range: Range
	Title: typing.Any
		# Method 'Users' returns object of type 'UserAccessList'
	Users: UserAccessList
	def __iter__(self):
		...

class AllowEditRanges(typing.Protocol):

	# Result is of type AllowEditRange
	def Add(self, Title: str=defaultNamedNotOptArg, Range: Range=defaultNamedNotOptArg, Password: typing.Any=defaultNamedOptArg) -> AllowEditRange:
		...
	# Result is of type AllowEditRange
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> AllowEditRange:
		...
	# Result is of type AllowEditRange
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> AllowEditRange:
		...
	Count: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> AllowEditRange:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class AppEvents:

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnQueryInterface(self, riid: typing.Any=defaultNamedNotOptArg, ppvObj: None=pythoncom.Missing):
#	def OnAddRef(self):
#	def OnRelease(self):
#	def OnGetTypeInfoCount(self, pctinfo: int=pythoncom.Missing):
#	def OnGetTypeInfo(self, itinfo: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, pptinfo: None=pythoncom.Missing):
#	def OnGetIDsOfNames(self, riid: typing.Any=defaultNamedNotOptArg, rgszNames: int=defaultNamedNotOptArg, cNames: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg
#			, rgdispid: int=pythoncom.Missing):
#	def OnInvoke(self, dispidMember: int=defaultNamedNotOptArg, riid: typing.Any=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, wFlags: int=defaultNamedNotOptArg
#			, pdispparams: typing.Any=defaultNamedNotOptArg, pvarResult: typing.Any=pythoncom.Missing, pexcepinfo: typing.Any=pythoncom.Missing, puArgErr: int=pythoncom.Missing):
#	def OnNewWorkbook(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnSheetSelectionChange(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg):
#	def OnSheetBeforeDoubleClick(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetBeforeRightClick(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetActivate(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetDeactivate(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetCalculate(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetChange(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg):
#	def OnWorkbookOpen(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnWorkbookActivate(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnWorkbookDeactivate(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnWorkbookBeforeClose(self, Wb: Workbook=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnWorkbookBeforeSave(self, Wb: Workbook=defaultNamedNotOptArg, SaveAsUI: bool=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnWorkbookBeforePrint(self, Wb: Workbook=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnWorkbookNewSheet(self, Wb: Workbook=defaultNamedNotOptArg, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnWorkbookAddinInstall(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnWorkbookAddinUninstall(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnWindowResize(self, Wb: Workbook=defaultNamedNotOptArg, Wn: Window=defaultNamedNotOptArg):
#	def OnWindowActivate(self, Wb: Workbook=defaultNamedNotOptArg, Wn: Window=defaultNamedNotOptArg):
#	def OnWindowDeactivate(self, Wb: Workbook=defaultNamedNotOptArg, Wn: Window=defaultNamedNotOptArg):
#	def OnSheetFollowHyperlink(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Hyperlink=defaultNamedNotOptArg):
#	def OnSheetPivotTableUpdate(self, Sh: Dispatch=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
#	def OnWorkbookPivotTableCloseConnection(self, Wb: Workbook=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
#	def OnWorkbookPivotTableOpenConnection(self, Wb: Workbook=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
#	def OnWorkbookSync(self, Wb: Workbook=defaultNamedNotOptArg, SyncEventType: MsoSyncEventType=defaultNamedNotOptArg):
#	def OnWorkbookBeforeXmlImport(self, Wb: Workbook=defaultNamedNotOptArg, Map: XmlMap=defaultNamedNotOptArg, Url: str=defaultNamedNotOptArg, IsRefresh: bool=defaultNamedNotOptArg
#			, Cancel: bool=defaultNamedNotOptArg):
#	def OnWorkbookAfterXmlImport(self, Wb: Workbook=defaultNamedNotOptArg, Map: XmlMap=defaultNamedNotOptArg, IsRefresh: bool=defaultNamedNotOptArg, Result: XlXmlImportResult=defaultNamedNotOptArg):
#	def OnWorkbookBeforeXmlExport(self, Wb: Workbook=defaultNamedNotOptArg, Map: XmlMap=defaultNamedNotOptArg, Url: str=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnWorkbookAfterXmlExport(self, Wb: Workbook=defaultNamedNotOptArg, Map: XmlMap=defaultNamedNotOptArg, Url: str=defaultNamedNotOptArg, Result: XlXmlExportResult=defaultNamedNotOptArg):
#	def OnWorkbookRowsetComplete(self, Wb: Workbook=defaultNamedNotOptArg, Description: str=defaultNamedNotOptArg, Sheet: str=defaultNamedNotOptArg, Success: bool=defaultNamedNotOptArg):
#	def OnAfterCalculate(self):
#	def OnSheetPivotTableAfterValueChange(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, TargetRange: Range=defaultNamedNotOptArg):
#	def OnSheetPivotTableBeforeAllocateChanges(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg
#			, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetPivotTableBeforeCommitChanges(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg
#			, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetPivotTableBeforeDiscardChanges(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg):
#	def OnProtectedViewWindowOpen(self, Pvw: ProtectedViewWindow=defaultNamedNotOptArg):
#	def OnProtectedViewWindowBeforeEdit(self, Pvw: ProtectedViewWindow=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnProtectedViewWindowBeforeClose(self, Pvw: ProtectedViewWindow=defaultNamedNotOptArg, Reason: XlProtectedViewCloseReason=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnProtectedViewWindowResize(self, Pvw: ProtectedViewWindow=defaultNamedNotOptArg):
#	def OnProtectedViewWindowActivate(self, Pvw: ProtectedViewWindow=defaultNamedNotOptArg):
#	def OnProtectedViewWindowDeactivate(self, Pvw: ProtectedViewWindow=defaultNamedNotOptArg):
#	def OnWorkbookAfterSave(self, Wb: Workbook=defaultNamedNotOptArg, Success: bool=defaultNamedNotOptArg):
#	def OnWorkbookNewChart(self, Wb: Workbook=defaultNamedNotOptArg, Ch: Chart=defaultNamedNotOptArg):
#	def OnSheetLensGalleryRenderComplete(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetTableUpdate(self, Sh: Dispatch=defaultNamedNotOptArg, Target: TableObject=defaultNamedNotOptArg):
#	def OnWorkbookModelChange(self, Wb: Workbook=defaultNamedNotOptArg, Changes: ModelChanges=defaultNamedNotOptArg):
#	def OnSheetBeforeDelete(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnWorkbookBeforeRemoteChange(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnWorkbookAfterRemoteChange(self, Wb: Workbook=defaultNamedNotOptArg):
#	def OnRemoteSheetChange(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg):
#	def OnRemoteWorkbookNewSheet(self, Wb: Workbook=defaultNamedNotOptArg, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnRemoteWorkbookNewChart(self, Wb: Workbook=defaultNamedNotOptArg, Ch: Chart=defaultNamedNotOptArg):
#	def OnRemoteSheetBeforeDelete(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnRemoteSheetPivotTableUpdate(self, Sh: Dispatch=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
	...


class Arc(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class Arcs(typing.Protocol):

	# Result is of type Arc
	def Add(self, X1: float=defaultNamedNotOptArg, Y1: float=defaultNamedNotOptArg, X2: float=defaultNamedNotOptArg, Y2: float=defaultNamedNotOptArg) -> Arc:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Areas(typing.Protocol):

	# Result is of type Range
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> Range:
		...
	# Result is of type Range
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> Range:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> Range:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Author(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	Parent: typing.Any
	ProviderID: typing.Any
	UserID: typing.Any
	def __iter__(self):
		...

class AutoCorrect(typing.Protocol):

	def AddReplacement(self, What: str=defaultNamedNotOptArg, Replacement: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def DeleteReplacement(self, What: str=defaultNamedNotOptArg) -> typing.Any:
		...
	# The method GetReplacementList is actually a property, but must be used as a method to correctly pass the arguments
	def GetReplacementList(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method SetReplacementList is actually a property, but must be used as a method to correctly pass the arguments
	def SetReplacementList(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoExpandListRange: typing.Any
	AutoFillFormulasInLists: typing.Any
	CapitalizeNamesOfDays: typing.Any
	CorrectCapsLock: typing.Any
	CorrectSentenceCap: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayAutoCorrectOptions: typing.Any
	KeepGeneralFormatDigitsWithEAsText: typing.Any
	KeepGeneralFormatLargeNumbersAsText: typing.Any
	KeepGeneralFormatLeadingZerosAsText: typing.Any
	Parent: typing.Any
	ReplaceText: typing.Any
	ReplacementList: typing.Any
	TwoInitialCapitals: typing.Any
	def __iter__(self):
		...

class AutoFilter(typing.Protocol):

	def ApplyFilter(self) -> None:
		...
	def ShowAllData(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	FilterMode: typing.Any
		# Method 'Filters' returns object of type 'Filters'
	Filters: Filters
	Parent: typing.Any
		# Method 'Range' returns object of type 'Range'
	Range: Range
		# Method 'Sort' returns object of type 'Sort'
	Sort: Sort
		# Method '_Sort' returns object of type 'Sort'
	_Sort: Sort
	def __iter__(self):
		...

class AutoRecover(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Parent: typing.Any
	Path: typing.Any
	Time: typing.Any
	def __iter__(self):
		...

class Axes(typing.Protocol):

	# Result is of type Axis
	def Item(self, Type: XlAxisType=defaultNamedNotOptArg, AxisGroup: XlAxisGroup=1) -> Axis:
		...
	# Result is of type Axis
	def _Default(self, Type: XlAxisType=defaultNamedNotOptArg, AxisGroup: XlAxisGroup=1) -> Axis:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Type: XlAxisType=defaultNamedNotOptArg, AxisGroup: XlAxisGroup=1) -> Axis:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Axis(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AxisBetweenCategories: typing.Any
		# Method 'AxisGroup' returns enumeration of type 'XlAxisGroup'
	AxisGroup: XlAxisGroup
		# Method 'AxisTitle' returns object of type 'AxisTitle'
	AxisTitle: AxisTitle
		# Method 'BaseUnit' returns enumeration of type 'XlTimeUnit'
	BaseUnit: XlTimeUnit
	BaseUnitIsAuto: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	CategoryNames: typing.Any
		# Method 'CategorySortOrder' returns enumeration of type 'XlCategorySortOrder'
	CategorySortOrder: XlCategorySortOrder
		# Method 'CategoryType' returns enumeration of type 'XlCategoryType'
	CategoryType: XlCategoryType
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Crosses' returns enumeration of type 'XlAxisCrosses'
	Crosses: XlAxisCrosses
	CrossesAt: typing.Any
		# Method 'DisplayUnit' returns enumeration of type 'XlDisplayUnit'
	DisplayUnit: XlDisplayUnit
	DisplayUnitCustom: typing.Any
		# Method 'DisplayUnitLabel' returns object of type 'DisplayUnitLabel'
	DisplayUnitLabel: DisplayUnitLabel
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	HasDisplayUnitLabel: typing.Any
	HasMajorGridlines: typing.Any
	HasMinorGridlines: typing.Any
	HasTitle: typing.Any
	Height: typing.Any
	Left: typing.Any
	LogBase: typing.Any
		# Method 'MajorGridlines' returns object of type 'Gridlines'
	MajorGridlines: Gridlines
		# Method 'MajorTickMark' returns enumeration of type 'XlTickMark'
	MajorTickMark: XlTickMark
	MajorUnit: typing.Any
	MajorUnitIsAuto: typing.Any
		# Method 'MajorUnitScale' returns enumeration of type 'XlTimeUnit'
	MajorUnitScale: XlTimeUnit
	MaximumScale: typing.Any
	MaximumScaleIsAuto: typing.Any
	MinimumScale: typing.Any
	MinimumScaleIsAuto: typing.Any
		# Method 'MinorGridlines' returns object of type 'Gridlines'
	MinorGridlines: Gridlines
		# Method 'MinorTickMark' returns enumeration of type 'XlTickMark'
	MinorTickMark: XlTickMark
	MinorUnit: typing.Any
	MinorUnitIsAuto: typing.Any
		# Method 'MinorUnitScale' returns enumeration of type 'XlTimeUnit'
	MinorUnitScale: XlTimeUnit
	Parent: typing.Any
	ReversePlotOrder: typing.Any
		# Method 'ScaleType' returns enumeration of type 'XlScaleType'
	ScaleType: XlScaleType
		# Method 'TickLabelPosition' returns enumeration of type 'XlTickLabelPosition'
	TickLabelPosition: XlTickLabelPosition
	TickLabelSpacing: typing.Any
	TickLabelSpacingIsAuto: typing.Any
		# Method 'TickLabels' returns object of type 'TickLabels'
	TickLabels: TickLabels
	TickMarkSpacing: typing.Any
	Top: typing.Any
		# Method 'Type' returns enumeration of type 'XlAxisType'
	Type: XlAxisType
	Width: typing.Any
	def __iter__(self):
		...

class AxisTitle(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	IncludeInLayout: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlChartElementPosition'
	Position: XlChartElementPosition
	ReadingOrder: typing.Any
	Shadow: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class Border(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
	ColorIndex: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	LineStyle: typing.Any
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	Weight: typing.Any
	def __iter__(self):
		...

class Borders(typing.Protocol):

	# Result is of type Border
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: XlBordersIndex=defaultNamedNotOptArg) -> Border:
		...
	# Result is of type Border
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: XlBordersIndex=defaultNamedNotOptArg) -> Border:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
	ColorIndex: typing.Any
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	LineStyle: typing.Any
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	Value: typing.Any
	Weight: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: XlBordersIndex=defaultNamedNotOptArg) -> Border:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Button(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	CancelButton: typing.Any
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DefaultButton: typing.Any
	DismissButton: typing.Any
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HelpButton: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class Buttons(typing.Protocol):

	# Result is of type Button
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Button:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	CancelButton: typing.Any
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DefaultButton: typing.Any
	DismissButton: typing.Any
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HelpButton: typing.Any
	HorizontalAlignment: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CalculatedFields(typing.Protocol):

	# Result is of type PivotField
	def Add(self, Name: str=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg, UseStandardFormula: typing.Any=defaultNamedOptArg) -> PivotField:
		...
	# Result is of type PivotField
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotField:
		...
	# Result is of type PivotField
	def _Add(self, Name: str=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg) -> PivotField:
		...
	# Result is of type PivotField
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Field: typing.Any=defaultNamedNotOptArg) -> PivotField:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Field: typing.Any=defaultNamedNotOptArg) -> PivotField:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CalculatedItems(typing.Protocol):

	# Result is of type PivotItem
	def Add(self, Name: str=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg, UseStandardFormula: typing.Any=defaultNamedOptArg) -> PivotItem:
		...
	# Result is of type PivotItem
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotItem:
		...
	# Result is of type PivotItem
	def _Add(self, Name: str=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg) -> PivotItem:
		...
	# Result is of type PivotItem
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Field: typing.Any=defaultNamedNotOptArg) -> PivotItem:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Field: typing.Any=defaultNamedNotOptArg) -> PivotItem:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CalculatedMember(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayFolder: typing.Any
	Dynamic: typing.Any
	FlattenHierarchies: typing.Any
	Formula: typing.Any
	HierarchizeDistinct: typing.Any
	IsValid: typing.Any
	MeasureGroup: typing.Any
	Name: typing.Any
		# Method 'NumberFormat' returns enumeration of type 'XlCalcMemNumberFormatType'
	NumberFormat: XlCalcMemNumberFormatType
	Parent: typing.Any
	ParentHierarchy: typing.Any
	ParentMember: typing.Any
	SolveOrder: typing.Any
	SourceName: typing.Any
		# Method 'Type' returns enumeration of type 'XlCalculatedMemberType'
	Type: XlCalculatedMemberType
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class CalculatedMembers(typing.Protocol):

	# Result is of type CalculatedMember
	def Add(self, Name: str=defaultNamedNotOptArg, Formula: typing.Any=defaultNamedNotOptArg, SolveOrder: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg
			, Dynamic: typing.Any=defaultNamedOptArg, DisplayFolder: typing.Any=defaultNamedOptArg, HierarchizeDistinct: typing.Any=defaultNamedOptArg) -> CalculatedMember:
		...
	# Result is of type CalculatedMember
	def AddCalculatedMember(self, Name: str=defaultNamedNotOptArg, Formula: typing.Any=defaultNamedNotOptArg, SolveOrder: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg
			, DisplayFolder: typing.Any=defaultNamedOptArg, MeasureGroup: typing.Any=defaultNamedOptArg, ParentHierarchy: typing.Any=defaultNamedOptArg, ParentMember: typing.Any=defaultNamedOptArg, NumberFormat: typing.Any=defaultNamedOptArg) -> CalculatedMember:
		...
	# Result is of type CalculatedMember
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> CalculatedMember:
		...
	# Result is of type CalculatedMember
	def _Add(self, Name: str=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg, SolveOrder: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg) -> CalculatedMember:
		...
	# Result is of type CalculatedMember
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> CalculatedMember:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> CalculatedMember:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CalloutFormat(typing.Protocol):

	def AutomaticLength(self) -> None:
		...
	def CustomDrop(self, Drop: float=defaultNamedNotOptArg) -> None:
		...
	def CustomLength(self, Length: float=defaultNamedNotOptArg) -> None:
		...
	def PresetDrop(self, DropType: MsoCalloutDropType=defaultNamedNotOptArg) -> None:
		...
		# Method 'Accent' returns enumeration of type 'MsoTriState'
	Accent: MsoTriState
		# Method 'Angle' returns enumeration of type 'MsoCalloutAngleType'
	Angle: MsoCalloutAngleType
	Application: typing.Any
		# Method 'AutoAttach' returns enumeration of type 'MsoTriState'
	AutoAttach: MsoTriState
		# Method 'AutoLength' returns enumeration of type 'MsoTriState'
	AutoLength: MsoTriState
		# Method 'Border' returns enumeration of type 'MsoTriState'
	Border: MsoTriState
	Creator: typing.Any
	Drop: typing.Any
		# Method 'DropType' returns enumeration of type 'MsoCalloutDropType'
	DropType: MsoCalloutDropType
	Gap: typing.Any
	Length: typing.Any
	Parent: typing.Any
		# Method 'Type' returns enumeration of type 'MsoCalloutType'
	Type: MsoCalloutType
	def __iter__(self):
		...

class CategoryCollection(typing.Protocol):

	# Result is of type ChartCategory
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ChartCategory:
		...
	# Result is of type ChartCategory
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ChartCategory:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ChartCategory:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CellFormat(typing.Protocol):

	def Clear(self) -> None:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	FormulaHidden: typing.Any
	HorizontalAlignment: typing.Any
	IndentLevel: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Locked: typing.Any
	MergeCells: typing.Any
	NumberFormat: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ShrinkToFit: typing.Any
	VerticalAlignment: typing.Any
	WrapText: typing.Any
	def __iter__(self):
		...

class Characters(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def Insert(self, String: str=defaultNamedNotOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Parent: typing.Any
	PhoneticCharacters: typing.Any
	Text: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ChartArea(typing.Protocol):

	def Clear(self) -> typing.Any:
		...
	def ClearContents(self) -> typing.Any:
		...
	def ClearFormats(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ChartCategory(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	IsFiltered: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ChartColorFormat(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	RGB: typing.Any
	SchemeColor: typing.Any
	Type: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ChartEvents:

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnQueryInterface(self, riid: typing.Any=defaultNamedNotOptArg, ppvObj: None=pythoncom.Missing):
#	def OnAddRef(self):
#	def OnRelease(self):
#	def OnGetTypeInfoCount(self, pctinfo: int=pythoncom.Missing):
#	def OnGetTypeInfo(self, itinfo: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, pptinfo: None=pythoncom.Missing):
#	def OnGetIDsOfNames(self, riid: typing.Any=defaultNamedNotOptArg, rgszNames: int=defaultNamedNotOptArg, cNames: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg
#			, rgdispid: int=pythoncom.Missing):
#	def OnInvoke(self, dispidMember: int=defaultNamedNotOptArg, riid: typing.Any=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, wFlags: int=defaultNamedNotOptArg
#			, pdispparams: typing.Any=defaultNamedNotOptArg, pvarResult: typing.Any=pythoncom.Missing, pexcepinfo: typing.Any=pythoncom.Missing, puArgErr: int=pythoncom.Missing):
#	def OnActivate(self):
#	def OnDeactivate(self):
#	def OnResize(self):
#	def OnMouseDown(self, Button: int=defaultNamedNotOptArg, Shift: int=defaultNamedNotOptArg, x: int=defaultNamedNotOptArg, y: int=defaultNamedNotOptArg):
#	def OnMouseUp(self, Button: int=defaultNamedNotOptArg, Shift: int=defaultNamedNotOptArg, x: int=defaultNamedNotOptArg, y: int=defaultNamedNotOptArg):
#	def OnMouseMove(self, Button: int=defaultNamedNotOptArg, Shift: int=defaultNamedNotOptArg, x: int=defaultNamedNotOptArg, y: int=defaultNamedNotOptArg):
#	def OnBeforeRightClick(self, Cancel: bool=defaultNamedNotOptArg):
#	def OnDragPlot(self):
#	def OnDragOver(self):
#	def OnBeforeDoubleClick(self, ElementID: int=defaultNamedNotOptArg, Arg1: int=defaultNamedNotOptArg, Arg2: int=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnSelect(self, ElementID: int=defaultNamedNotOptArg, Arg1: int=defaultNamedNotOptArg, Arg2: int=defaultNamedNotOptArg):
#	def OnSeriesChange(self, SeriesIndex: int=defaultNamedNotOptArg, PointIndex: int=defaultNamedNotOptArg):
#	def OnCalculate(self):
#	def OnRemoteResize(self):
#	def OnRemoteSeriesChange(self, SeriesIndex: int=defaultNamedNotOptArg, PointIndex: int=defaultNamedNotOptArg):
	...


class ChartFillFormat(typing.Protocol):

	def OneColorGradient(self, Style: MsoGradientStyle=defaultNamedNotOptArg, Variant: int=defaultNamedNotOptArg, Degree: float=defaultNamedNotOptArg) -> None:
		...
	def Patterned(self, Pattern: MsoPatternType=defaultNamedNotOptArg) -> None:
		...
	def PresetGradient(self, Style: MsoGradientStyle=defaultNamedNotOptArg, Variant: int=defaultNamedNotOptArg, PresetGradientType: MsoPresetGradientType=defaultNamedNotOptArg) -> None:
		...
	def PresetTextured(self, PresetTexture: MsoPresetTexture=defaultNamedNotOptArg) -> None:
		...
	def Solid(self) -> None:
		...
	def TwoColorGradient(self, Style: MsoGradientStyle=defaultNamedNotOptArg, Variant: int=defaultNamedNotOptArg) -> None:
		...
	def UserPicture(self, PictureFile: typing.Any=defaultNamedOptArg, PictureFormat: typing.Any=defaultNamedOptArg, PictureStackUnit: typing.Any=defaultNamedOptArg, PicturePlacement: typing.Any=defaultNamedOptArg) -> None:
		...
	def UserTextured(self, TextureFile: str=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BackColor' returns object of type 'ChartColorFormat'
	BackColor: ChartColorFormat
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'ForeColor' returns object of type 'ChartColorFormat'
	ForeColor: ChartColorFormat
		# Method 'GradientColorType' returns enumeration of type 'MsoGradientColorType'
	GradientColorType: MsoGradientColorType
	GradientDegree: typing.Any
		# Method 'GradientStyle' returns enumeration of type 'MsoGradientStyle'
	GradientStyle: MsoGradientStyle
	GradientVariant: typing.Any
	Parent: typing.Any
		# Method 'Pattern' returns enumeration of type 'MsoPatternType'
	Pattern: MsoPatternType
		# Method 'PresetGradientType' returns enumeration of type 'MsoPresetGradientType'
	PresetGradientType: MsoPresetGradientType
		# Method 'PresetTexture' returns enumeration of type 'MsoPresetTexture'
	PresetTexture: MsoPresetTexture
	TextureName: typing.Any
		# Method 'TextureType' returns enumeration of type 'MsoTextureType'
	TextureType: MsoTextureType
		# Method 'Type' returns enumeration of type 'MsoFillType'
	Type: MsoFillType
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	def __iter__(self):
		...

class ChartFormat(typing.Protocol):

		# Method 'Adjustments' returns object of type 'Adjustments'
	Adjustments: Adjustments
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoShapeType' returns enumeration of type 'MsoAutoShapeType'
	AutoShapeType: MsoAutoShapeType
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'FillFormat'
	Fill: FillFormat
		# Method 'Glow' returns object of type 'GlowFormat'
	Glow: GlowFormat
		# Method 'Line' returns object of type 'LineFormat'
	Line: LineFormat
	Parent: typing.Any
		# Method 'PictureFormat' returns object of type 'PictureFormat'
	PictureFormat: PictureFormat
		# Method 'Shadow' returns object of type 'ShadowFormat'
	Shadow: ShadowFormat
		# Method 'SoftEdge' returns object of type 'SoftEdgeFormat'
	SoftEdge: SoftEdgeFormat
		# Method 'TextFrame2' returns object of type 'TextFrame2'
	TextFrame2: TextFrame2
		# Method 'ThreeD' returns object of type 'ThreeDFormat'
	ThreeD: ThreeDFormat
	def __iter__(self):
		...

class ChartGroup(typing.Protocol):

	def CategoryCollection(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def FullCategoryCollection(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def SeriesCollection(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AxisGroup' returns enumeration of type 'XlAxisGroup'
	AxisGroup: XlAxisGroup
	BinWidthValue: typing.Any
	BinsCountValue: typing.Any
	BinsOverflowEnabled: typing.Any
	BinsOverflowValue: typing.Any
		# Method 'BinsType' returns enumeration of type 'XlBinsType'
	BinsType: XlBinsType
	BinsUnderflowEnabled: typing.Any
	BinsUnderflowValue: typing.Any
	BubbleScale: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DoughnutHoleSize: typing.Any
		# Method 'DownBars' returns object of type 'DownBars'
	DownBars: DownBars
		# Method 'DropLines' returns object of type 'DropLines'
	DropLines: DropLines
	FirstSliceAngle: typing.Any
	GapWidth: typing.Any
	Has3DShading: typing.Any
	HasDropLines: typing.Any
	HasHiLoLines: typing.Any
	HasRadarAxisLabels: typing.Any
	HasSeriesLines: typing.Any
	HasUpDownBars: typing.Any
		# Method 'HiLoLines' returns object of type 'HiLoLines'
	HiLoLines: HiLoLines
	Index: typing.Any
	Overlap: typing.Any
	Parent: typing.Any
		# Method 'RadarAxisLabels' returns object of type 'TickLabels'
	RadarAxisLabels: TickLabels
	SecondPlotSize: typing.Any
		# Method 'SeriesLines' returns object of type 'SeriesLines'
	SeriesLines: SeriesLines
	ShowNegativeBubbles: typing.Any
		# Method 'SizeRepresents' returns enumeration of type 'XlSizeRepresents'
	SizeRepresents: XlSizeRepresents
		# Method 'SplitType' returns enumeration of type 'XlChartSplitType'
	SplitType: XlChartSplitType
	SplitValue: typing.Any
	SubType: typing.Any
	Type: typing.Any
		# Method 'UpBars' returns object of type 'UpBars'
	UpBars: UpBars
	VaryByCategories: typing.Any
	def __iter__(self):
		...

class ChartGroups(typing.Protocol):

	# Result is of type ChartGroup
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ChartGroup:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ChartObject(typing.Protocol):

	def Activate(self) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	def _Copy(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Chart' returns object of type 'Chart'
	Chart: Chart
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ProtectChartObject: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class ChartObjects(typing.Protocol):

	# Result is of type ChartObject
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> ChartObject:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	def _Copy(self) -> typing.Any:
		...
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ProtectChartObject: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ChartSeriesGradientStopData(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'StopColor' returns object of type 'SeriesGradientStopColorFormat'
	StopColor: SeriesGradientStopColorFormat
		# Method 'StopPositionType' returns enumeration of type 'XlGradientStopPositionType'
	StopPositionType: XlGradientStopPositionType
	StopValue: typing.Any
	def __iter__(self):
		...

class ChartTitle(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	IncludeInLayout: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlChartElementPosition'
	Position: XlChartElementPosition
	ReadingOrder: typing.Any
	Shadow: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ChartView(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class Charts(typing.Protocol):

	# Result is of type Chart
	def Add(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg) -> Chart:
		...
	# Result is of type Chart
	def Add2(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, NewLayout: typing.Any=defaultNamedOptArg) -> Chart:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
	Parent: typing.Any
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
	Visible: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CheckBox(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class CheckBoxes(typing.Protocol):

	# Result is of type CheckBox
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> CheckBox:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ColorFormat(typing.Protocol):

	Application: typing.Any
	Brightness: typing.Any
	Creator: typing.Any
		# Method 'ObjectThemeColor' returns enumeration of type 'MsoThemeColorIndex'
	ObjectThemeColor: MsoThemeColorIndex
	Parent: typing.Any
	RGB: typing.Any
	SchemeColor: typing.Any
	TintAndShade: typing.Any
		# Method 'Type' returns enumeration of type 'MsoColorType'
	Type: MsoColorType
	# Default property for this class is 'RGB'
	def __call__(self):
		...
	def __iter__(self):
		...

class ColorScale(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
		# Method 'ColorScaleCriteria' returns object of type 'ColorScaleCriteria'
	ColorScaleCriteria: ColorScaleCriteria
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Formula: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class ColorScaleCriteria(typing.Protocol):

	# Result is of type ColorScaleCriterion
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ColorScaleCriterion:
		...
	# Result is of type ColorScaleCriterion
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ColorScaleCriterion:
		...
	Count: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ColorScaleCriterion:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ColorScaleCriterion(typing.Protocol):

		# Method 'FormatColor' returns object of type 'FormatColor'
	FormatColor: FormatColor
	Index: typing.Any
		# Method 'Type' returns enumeration of type 'XlConditionValueTypes'
	Type: XlConditionValueTypes
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ColorStop(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Position: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class ColorStops(typing.Protocol):

	# Result is of type ColorStop
	def Add(self, Position: float=defaultNamedNotOptArg) -> ColorStop:
		...
	def Clear(self) -> None:
		...
	# Result is of type ColorStop
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ColorStop:
		...
	# Result is of type ColorStop
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ColorStop:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ColorStop:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Comment(typing.Protocol):

	def Delete(self) -> None:
		...
	# Result is of type Comment
	def Next(self) -> Comment:
		...
	# Result is of type Comment
	def Previous(self) -> Comment:
		...
	def Text(self, Text: typing.Any=defaultNamedOptArg, Start: typing.Any=defaultNamedOptArg, Overwrite: typing.Any=defaultNamedOptArg) -> str:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Author: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'Shape' returns object of type 'Shape'
	Shape: Shape
	Visible: typing.Any
	def __iter__(self):
		...

class CommentThreaded(typing.Protocol):

	# Result is of type CommentThreaded
	def AddReply(self, Text: typing.Any=defaultNamedOptArg) -> CommentThreaded:
		...
	def Delete(self) -> None:
		...
	# Result is of type CommentThreaded
	def Next(self) -> CommentThreaded:
		...
	# Result is of type CommentThreaded
	def Previous(self) -> CommentThreaded:
		...
	def Text(self, Text: typing.Any=defaultNamedOptArg, Start: typing.Any=defaultNamedOptArg, Overwrite: typing.Any=defaultNamedOptArg) -> str:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Author' returns object of type 'Author'
	Author: Author
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Date: typing.Any
	Parent: typing.Any
		# Method 'Replies' returns object of type 'CommentsThreaded'
	Replies: CommentsThreaded
	Resolved: typing.Any
	def __iter__(self):
		...

class Comments(typing.Protocol):

	# Result is of type Comment
	def Item(self, Index: int=defaultNamedNotOptArg) -> Comment:
		...
	# Result is of type Comment
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> Comment:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> Comment:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CommentsThreaded(typing.Protocol):

	# Result is of type CommentThreaded
	def Item(self, Index: int=defaultNamedNotOptArg) -> CommentThreaded:
		...
	# Result is of type CommentThreaded
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> CommentThreaded:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> CommentThreaded:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ConditionValue(typing.Protocol):

	def Modify(self, newtype: XlConditionValueTypes=defaultNamedNotOptArg, newvalue: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'Type' returns enumeration of type 'XlConditionValueTypes'
	Type: XlConditionValueTypes
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class Connections(typing.Protocol):

	# Result is of type WorkbookConnection
	def Add(self, Name: str=defaultNamedNotOptArg, Description: str=defaultNamedNotOptArg, ConnectionString: typing.Any=defaultNamedNotOptArg, CommandText: typing.Any=defaultNamedNotOptArg
			, lCmdtype: typing.Any=defaultNamedOptArg) -> WorkbookConnection:
		...
	# Result is of type WorkbookConnection
	def Add2(self, Name: str=defaultNamedNotOptArg, Description: str=defaultNamedNotOptArg, ConnectionString: typing.Any=defaultNamedNotOptArg, CommandText: typing.Any=defaultNamedNotOptArg
			, lCmdtype: typing.Any=defaultNamedOptArg, CreateModelConnection: typing.Any=defaultNamedOptArg, ImportRelationships: typing.Any=defaultNamedOptArg) -> WorkbookConnection:
		...
	# Result is of type WorkbookConnection
	def AddFromFile(self, Filename: str=defaultNamedNotOptArg, CreateModelConnection: typing.Any=defaultNamedOptArg, ImportRelationships: typing.Any=defaultNamedOptArg) -> WorkbookConnection:
		...
	# Result is of type WorkbookConnection
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> WorkbookConnection:
		...
	# Result is of type WorkbookConnection
	def _AddFromFile(self, Filename: str=defaultNamedNotOptArg) -> WorkbookConnection:
		...
	# Result is of type WorkbookConnection
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> WorkbookConnection:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> WorkbookConnection:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ConnectorFormat(typing.Protocol):

	def BeginConnect(self, ConnectedShape: Shape=defaultNamedNotOptArg, ConnectionSite: int=defaultNamedNotOptArg) -> None:
		...
	def BeginDisconnect(self) -> None:
		...
	def EndConnect(self, ConnectedShape: Shape=defaultNamedNotOptArg, ConnectionSite: int=defaultNamedNotOptArg) -> None:
		...
	def EndDisconnect(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BeginConnected' returns enumeration of type 'MsoTriState'
	BeginConnected: MsoTriState
		# Method 'BeginConnectedShape' returns object of type 'Shape'
	BeginConnectedShape: Shape
	BeginConnectionSite: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'EndConnected' returns enumeration of type 'MsoTriState'
	EndConnected: MsoTriState
		# Method 'EndConnectedShape' returns object of type 'Shape'
	EndConnectedShape: Shape
	EndConnectionSite: typing.Any
	Parent: typing.Any
		# Method 'Type' returns enumeration of type 'MsoConnectorType'
	Type: MsoConnectorType
	def __iter__(self):
		...

class ControlFormat(typing.Protocol):

	def AddItem(self, Text: str=defaultNamedNotOptArg, Index: typing.Any=defaultNamedOptArg) -> None:
		...
	def List(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def RemoveAllItems(self) -> None:
		...
	def RemoveItem(self, Index: int=defaultNamedNotOptArg, Count: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DropDownLines: typing.Any
	Enabled: typing.Any
	LargeChange: typing.Any
	LinkedCell: typing.Any
	ListCount: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	LockedText: typing.Any
	Max: typing.Any
	Min: typing.Any
	MultiSelect: typing.Any
	Parent: typing.Any
	PrintObject: typing.Any
	SmallChange: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class Corners(typing.Protocol):

	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class CubeField(typing.Protocol):

	def AddMemberPropertyField(self, Property: str=defaultNamedNotOptArg, PropertyOrder: typing.Any=defaultNamedOptArg, PropertyDisplayedIn: typing.Any=defaultNamedOptArg) -> None:
		...
	def AutoGroup(self, Orientation: typing.Any=defaultNamedOptArg, Position: typing.Any=defaultNamedOptArg) -> None:
		...
	def ClearManualFilter(self) -> None:
		...
	def CreatePivotFields(self) -> None:
		...
	def Delete(self) -> None:
		...
	def _AddMemberPropertyField(self, Property: str=defaultNamedNotOptArg, PropertyOrder: typing.Any=defaultNamedOptArg) -> None:
		...
	AllItemsVisible: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CubeFieldSubType' returns enumeration of type 'XlCubeFieldSubType'
	CubeFieldSubType: XlCubeFieldSubType
		# Method 'CubeFieldType' returns enumeration of type 'XlCubeFieldType'
	CubeFieldType: XlCubeFieldType
	CurrentPageName: typing.Any
	DragToColumn: typing.Any
	DragToData: typing.Any
	DragToHide: typing.Any
	DragToPage: typing.Any
	DragToRow: typing.Any
	EnableMultiplePageItems: typing.Any
	FlattenHierarchies: typing.Any
	HasMemberProperties: typing.Any
	HiddenLevels: typing.Any
	HierarchizeDistinct: typing.Any
	IncludeNewItemsInFilter: typing.Any
	IsDate: typing.Any
		# Method 'LayoutForm' returns enumeration of type 'XlLayoutFormType'
	LayoutForm: XlLayoutFormType
		# Method 'LayoutSubtotalLocation' returns enumeration of type 'XlSubtototalLocationType'
	LayoutSubtotalLocation: XlSubtototalLocationType
	Name: typing.Any
		# Method 'Orientation' returns enumeration of type 'XlPivotFieldOrientation'
	Orientation: XlPivotFieldOrientation
	Parent: typing.Any
		# Method 'PivotFields' returns object of type 'PivotFields'
	PivotFields: PivotFields
	Position: typing.Any
	ShowInFieldList: typing.Any
		# Method 'TreeviewControl' returns object of type 'TreeviewControl'
	TreeviewControl: TreeviewControl
	Value: typing.Any
	_Caption: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class CubeFields(typing.Protocol):

	# Result is of type CubeField
	def AddSet(self, Name: str=defaultNamedNotOptArg, Caption: str=defaultNamedNotOptArg) -> CubeField:
		...
	# Result is of type CubeField
	def GetMeasure(self, AttributeHierarchy: typing.Any=defaultNamedNotOptArg, Function: XlConsolidationFunction=defaultNamedNotOptArg, Caption: typing.Any=defaultNamedOptArg) -> CubeField:
		...
	# Result is of type CubeField
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> CubeField:
		...
	# Result is of type CubeField
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> CubeField:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> CubeField:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CustomProperties(typing.Protocol):

	# Result is of type CustomProperty
	def Add(self, Name: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> CustomProperty:
		...
	# Result is of type CustomProperty
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> CustomProperty:
		...
	# Result is of type CustomProperty
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> CustomProperty:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> CustomProperty:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class CustomProperty(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	Parent: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class CustomView(typing.Protocol):

	def Delete(self) -> None:
		...
	def Show(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	Parent: typing.Any
	PrintSettings: typing.Any
	RowColSettings: typing.Any
	def __iter__(self):
		...

class CustomViews(typing.Protocol):

	# Result is of type CustomView
	def Add(self, ViewName: str=defaultNamedNotOptArg, PrintSettings: typing.Any=defaultNamedOptArg, RowColSettings: typing.Any=defaultNamedOptArg) -> CustomView:
		...
	# Result is of type CustomView
	def Item(self, ViewName: typing.Any=defaultNamedNotOptArg) -> CustomView:
		...
	# Result is of type CustomView
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, ViewName: typing.Any=defaultNamedNotOptArg) -> CustomView:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, ViewName: typing.Any=defaultNamedNotOptArg) -> CustomView:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class DataBarBorder(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'Type' returns enumeration of type 'XlDataBarBorderType'
	Type: XlDataBarBorderType
	def __iter__(self):
		...

class DataFeedConnection(typing.Protocol):

	def CancelRefresh(self) -> None:
		...
	def Refresh(self) -> None:
		...
	def SaveAsODC(self, ODCFileName: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg, Keywords: typing.Any=defaultNamedOptArg) -> None:
		...
	AlwaysUseConnectionFile: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EnableRefresh: typing.Any
	Parent: typing.Any
	RefreshDate: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	Refreshing: typing.Any
	SavePassword: typing.Any
		# Method 'ServerCredentialsMethod' returns enumeration of type 'XlCredentialsMethod'
	ServerCredentialsMethod: XlCredentialsMethod
	SourceConnectionFile: typing.Any
	SourceDataFile: typing.Any
	def __iter__(self):
		...

class DataLabel(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoText: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	NumberFormatLinked: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlDataLabelPosition'
	Position: XlDataLabelPosition
	ReadingOrder: typing.Any
	Separator: typing.Any
	Shadow: typing.Any
	ShowBubbleSize: typing.Any
	ShowCategoryName: typing.Any
	ShowLegendKey: typing.Any
	ShowPercentage: typing.Any
	ShowRange: typing.Any
	ShowSeriesName: typing.Any
	ShowValue: typing.Any
	Text: typing.Any
	Top: typing.Any
	Type: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	_Height: typing.Any
	_Width: typing.Any
	def __iter__(self):
		...

class DataLabels(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	# Result is of type DataLabel
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> DataLabel:
		...
	def Propagate(self, Index: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
	# Result is of type DataLabel
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> DataLabel:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoText: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Name: typing.Any
	NumberFormat: typing.Any
	NumberFormatLinked: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlDataLabelPosition'
	Position: XlDataLabelPosition
	ReadingOrder: typing.Any
	Separator: typing.Any
	Shadow: typing.Any
	ShowBubbleSize: typing.Any
	ShowCategoryName: typing.Any
	ShowLegendKey: typing.Any
	ShowPercentage: typing.Any
	ShowRange: typing.Any
	ShowSeriesName: typing.Any
	ShowValue: typing.Any
	Type: typing.Any
	VerticalAlignment: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> DataLabel:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class DataTable(typing.Protocol):

	def Delete(self) -> None:
		...
	def Select(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	HasBorderHorizontal: typing.Any
	HasBorderOutline: typing.Any
	HasBorderVertical: typing.Any
	Parent: typing.Any
	ShowLegendKey: typing.Any
	def __iter__(self):
		...

class Databar(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
	AxisColor: typing.Any
		# Method 'AxisPosition' returns enumeration of type 'XlDataBarAxisPosition'
	AxisPosition: XlDataBarAxisPosition
		# Method 'BarBorder' returns object of type 'DataBarBorder'
	BarBorder: DataBarBorder
	BarColor: typing.Any
		# Method 'BarFillType' returns enumeration of type 'XlDataBarFillType'
	BarFillType: XlDataBarFillType
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Direction: typing.Any
	Formula: typing.Any
		# Method 'MaxPoint' returns object of type 'ConditionValue'
	MaxPoint: ConditionValue
		# Method 'MinPoint' returns object of type 'ConditionValue'
	MinPoint: ConditionValue
		# Method 'NegativeBarFormat' returns object of type 'NegativeBarFormat'
	NegativeBarFormat: NegativeBarFormat
	PTCondition: typing.Any
	Parent: typing.Any
	PercentMax: typing.Any
	PercentMin: typing.Any
	Priority: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	ShowValue: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class DefaultPivotTableLayoutOptions(typing.Protocol):

	AllowMultipleFilters: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CalculatedMembersInFilters: typing.Any
	ColumnGrand: typing.Any
	CompactRowIndent: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayContextTooltips: typing.Any
	DisplayEmptyColumn: typing.Any
	DisplayEmptyRow: typing.Any
	DisplayErrorString: typing.Any
	DisplayFieldCaptions: typing.Any
	DisplayImmediateItems: typing.Any
	DisplayMemberPropertyTooltips: typing.Any
	DisplayNullString: typing.Any
	EnableDrilldown: typing.Any
	EnableWriteback: typing.Any
	ErrorString: typing.Any
	FieldListSortAscending: typing.Any
	HasAutoFormat: typing.Any
	InGridDropZones: typing.Any
	LayoutBlankLine: typing.Any
	MergeLabels: typing.Any
	NullString: typing.Any
	PageFieldOrder: typing.Any
	PageFieldWrapCount: typing.Any
	Parent: typing.Any
	PreserveFormatting: typing.Any
	PrintDrillIndicators: typing.Any
	PrintTitles: typing.Any
	RefreshOnFileOpen: typing.Any
		# Method 'RepeatAllLabels' returns enumeration of type 'XlPivotFieldRepeatLabels'
	RepeatAllLabels: XlPivotFieldRepeatLabels
	RepeatItemsOnEachPrintedPage: typing.Any
		# Method 'RowAxisLayout' returns enumeration of type 'XlLayoutRowType'
	RowAxisLayout: XlLayoutRowType
	RowGrand: typing.Any
	SaveData: typing.Any
	ShowDrillIndicators: typing.Any
	ShowValuesRow: typing.Any
	SortUsingCustomLists: typing.Any
	SubtotalHiddenPageItems: typing.Any
	SubtotalLocation: typing.Any
	Subtotals: typing.Any
	TotalsAnnotation: typing.Any
	ViewCalculatedMembers: typing.Any
	VisualTotals: typing.Any
	VisualTotalsForSets: typing.Any
	xlMissingItemsNone: typing.Any
	def __iter__(self):
		...

class DefaultWebOptions(typing.Protocol):

	AllowPNG: typing.Any
	AlwaysSaveInDefaultEncoding: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CheckIfOfficeIsHTMLEditor: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DownloadComponents: typing.Any
		# Method 'Encoding' returns enumeration of type 'MsoEncoding'
	Encoding: MsoEncoding
	FolderSuffix: typing.Any
		# Method 'Fonts' returns object of type 'WebPageFonts'
	Fonts: WebPageFonts
	LoadPictures: typing.Any
	LocationOfComponents: typing.Any
	OrganizeInFolder: typing.Any
	Parent: typing.Any
	PixelsPerInch: typing.Any
	RelyOnCSS: typing.Any
	RelyOnVML: typing.Any
	SaveHiddenData: typing.Any
	SaveNewWebPagesAsWebArchives: typing.Any
		# Method 'ScreenSize' returns enumeration of type 'MsoScreenSize'
	ScreenSize: MsoScreenSize
		# Method 'TargetBrowser' returns enumeration of type 'MsoTargetBrowser'
	TargetBrowser: MsoTargetBrowser
	UpdateLinksOnSave: typing.Any
	UseLongFileNames: typing.Any
	def __iter__(self):
		...

class Diagram(typing.Protocol):

	def Convert(self, Type: MsoDiagramType=defaultNamedNotOptArg) -> None:
		...
	def FitText(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoFormat' returns enumeration of type 'MsoTriState'
	AutoFormat: MsoTriState
		# Method 'AutoLayout' returns enumeration of type 'MsoTriState'
	AutoLayout: MsoTriState
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Nodes' returns object of type 'DiagramNodes'
	Nodes: DiagramNodes
	Parent: typing.Any
		# Method 'Reverse' returns enumeration of type 'MsoTriState'
	Reverse: MsoTriState
		# Method 'Type' returns enumeration of type 'MsoDiagramType'
	Type: MsoDiagramType
	def __iter__(self):
		...

class DiagramNode(typing.Protocol):

	# Result is of type DiagramNode
	def AddNode(self, pos: MsoRelativeNodePosition=2, nodeType: MsoDiagramNodeType=1) -> DiagramNode:
		...
	# Result is of type DiagramNode
	def CloneNode(self, copyChildren: bool=defaultNamedNotOptArg, pTargetNode: DiagramNode=defaultNamedNotOptArg, pos: MsoRelativeNodePosition=2) -> DiagramNode:
		...
	def Delete(self) -> None:
		...
	def MoveNode(self, pTargetNode: DiagramNode=defaultNamedNotOptArg, pos: MsoRelativeNodePosition=defaultNamedNotOptArg) -> None:
		...
	# Result is of type DiagramNode
	def NextNode(self) -> DiagramNode:
		...
	# Result is of type DiagramNode
	def PrevNode(self) -> DiagramNode:
		...
	def ReplaceNode(self, pTargetNode: DiagramNode=defaultNamedNotOptArg) -> None:
		...
	def SwapNode(self, pTargetNode: DiagramNode=defaultNamedNotOptArg, swapChildren: bool=True) -> None:
		...
	def TransferChildren(self, pReceivingNode: DiagramNode=defaultNamedNotOptArg) -> None:
		...
	Application: typing.Any
		# Method 'Children' returns object of type 'DiagramNodeChildren'
	Children: DiagramNodeChildren
	Creator: typing.Any
		# Method 'Diagram' returns object of type 'IMsoDiagram'
	Diagram: IMsoDiagram
		# Method 'Layout' returns enumeration of type 'MsoOrgChartLayoutType'
	Layout: MsoOrgChartLayoutType
	Parent: typing.Any
		# Method 'Root' returns object of type 'DiagramNode'
	Root: DiagramNode
		# Method 'Shape' returns object of type 'Shape'
	Shape: Shape
		# Method 'TextShape' returns object of type 'Shape'
	TextShape: Shape
	def __iter__(self):
		...

class DiagramNodeChildren(typing.Protocol):

	# Result is of type DiagramNode
	def AddNode(self, Index: typing.Any=-1, nodeType: MsoDiagramNodeType=1) -> DiagramNode:
		...
	# Result is of type DiagramNode
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> DiagramNode:
		...
	def SelectAll(self) -> None:
		...
	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
		# Method 'FirstChild' returns object of type 'DiagramNode'
	FirstChild: DiagramNode
		# Method 'LastChild' returns object of type 'DiagramNode'
	LastChild: DiagramNode
	Parent: typing.Any
	# Default method for this class is 'Item'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> DiagramNode:
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class DiagramNodes(typing.Protocol):

	# Result is of type DiagramNode
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> DiagramNode:
		...
	def SelectAll(self) -> None:
		...
	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	# Default method for this class is 'Item'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> DiagramNode:
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Dialog(typing.Protocol):

	def Show(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> bool:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class DialogFrame(typing.Protocol):

	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class DialogSheet(typing.Protocol):

	def Activate(self) -> None:
		...
	def Arcs(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Buttons(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ChartObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def CheckBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> None:
		...
	def CircleInvalid(self) -> None:
		...
	def ClearCircles(self) -> None:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def DrawingObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Drawings(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def DropDowns(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def EditBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg
			, WorkIdentity: typing.Any=defaultNamedOptArg) -> None:
		...
	def GroupBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def GroupObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Hide(self, Cancel: typing.Any=defaultNamedOptArg) -> bool:
		...
	def Labels(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Lines(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ListBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def OLEObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def OptionButtons(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Ovals(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Paste(self, Destination: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg) -> None:
		...
	def PasteSpecial(self, Format: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg, DisplayAsIcon: typing.Any=defaultNamedOptArg, IconFileName: typing.Any=defaultNamedOptArg
			, IconIndex: typing.Any=defaultNamedOptArg, IconLabel: typing.Any=defaultNamedOptArg, NoHTMLFormatting: typing.Any=defaultNamedOptArg) -> None:
		...
	def Pictures(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg, AllowFormattingCells: typing.Any=defaultNamedOptArg, AllowFormattingColumns: typing.Any=defaultNamedOptArg, AllowFormattingRows: typing.Any=defaultNamedOptArg, AllowInsertingColumns: typing.Any=defaultNamedOptArg
			, AllowInsertingRows: typing.Any=defaultNamedOptArg, AllowInsertingHyperlinks: typing.Any=defaultNamedOptArg, AllowDeletingColumns: typing.Any=defaultNamedOptArg, AllowDeletingRows: typing.Any=defaultNamedOptArg, AllowSorting: typing.Any=defaultNamedOptArg
			, AllowFiltering: typing.Any=defaultNamedOptArg, AllowUsingPivotTables: typing.Any=defaultNamedOptArg) -> None:
		...
	def Rectangles(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ResetAllPageBreaks(self) -> None:
		...
	def SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def ScrollBars(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	def Show(self) -> bool:
		...
	def Spinners(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def TextBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Unprotect(self, Password: typing.Any=defaultNamedOptArg) -> None:
		...
	def _CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg
			, IgnoreFinalYaa: typing.Any=defaultNamedOptArg, SpellScript: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def _ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PasteSpecial(self, Format: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg, DisplayAsIcon: typing.Any=defaultNamedOptArg, IconFileName: typing.Any=defaultNamedOptArg
			, IconIndex: typing.Any=defaultNamedOptArg, IconLabel: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs_(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoFilter' returns object of type 'AutoFilter'
	AutoFilter: AutoFilter
	CodeName: typing.Any
		# Method 'Comments' returns object of type 'Comments'
	Comments: Comments
		# Method 'CommentsThreaded' returns object of type 'CommentsThreaded'
	CommentsThreaded: CommentsThreaded
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CustomProperties' returns object of type 'CustomProperties'
	CustomProperties: CustomProperties
	DefaultButton: typing.Any
		# Method 'DialogFrame' returns object of type 'DialogFrame'
	DialogFrame: DialogFrame
	DisplayAutomaticPageBreaks: typing.Any
	DisplayPageBreaks: typing.Any
	DisplayRightToLeft: typing.Any
	EnableAutoFilter: typing.Any
	EnableCalculation: typing.Any
	EnableFormatConditionsCalculation: typing.Any
	EnableOutlining: typing.Any
	EnablePivotTable: typing.Any
		# Method 'EnableSelection' returns enumeration of type 'XlEnableSelection'
	EnableSelection: XlEnableSelection
	Focus: typing.Any
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
		# Method 'Hyperlinks' returns object of type 'Hyperlinks'
	Hyperlinks: Hyperlinks
	Index: typing.Any
		# Method 'MailEnvelope' returns object of type 'MsoEnvelope'
	MailEnvelope: MsoEnvelope
	Name: typing.Any
		# Method 'NamedSheetViews' returns object of type 'NamedSheetViewCollection'
	NamedSheetViews: NamedSheetViewCollection
		# Method 'Names' returns object of type 'Names'
	Names: Names
	Next: typing.Any
	OnDoubleClick: typing.Any
	OnSheetActivate: typing.Any
	OnSheetDeactivate: typing.Any
		# Method 'PageSetup' returns object of type 'PageSetup'
	PageSetup: PageSetup
	Parent: typing.Any
	Previous: typing.Any
	PrintedCommentPages: typing.Any
	ProtectContents: typing.Any
	ProtectDrawingObjects: typing.Any
	ProtectScenarios: typing.Any
		# Method 'Protection' returns object of type 'Protection'
	Protection: Protection
	ProtectionMode: typing.Any
		# Method 'QueryTables' returns object of type 'QueryTables'
	QueryTables: QueryTables
		# Method 'Scripts' returns object of type 'Scripts'
	Scripts: Scripts
	ScrollArea: typing.Any
		# Method 'Shapes' returns object of type 'Shapes'
	Shapes: Shapes
		# Method 'SmartTags' returns object of type 'SmartTags'
	SmartTags: SmartTags
		# Method 'Sort' returns object of type 'Sort'
	Sort: Sort
		# Method 'Tab' returns object of type 'Tab'
	Tab: Tab
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
		# Method 'Visible' returns enumeration of type 'XlSheetVisibility'
	Visible: XlSheetVisibility
		# Method '_AutoFilter' returns object of type 'AutoFilter'
	_AutoFilter: AutoFilter
	_CodeName: typing.Any
	_DisplayRightToLeft: typing.Any
		# Method '_Sort' returns object of type 'Sort'
	_Sort: Sort
	def __iter__(self):
		...

class DialogSheetView(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class DialogSheets(typing.Protocol):

	# Result is of type DialogSheet
	def Add(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg) -> DialogSheet:
		...
	def Add2(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, NewLayout: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
	Parent: typing.Any
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
	Visible: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Dialogs(typing.Protocol):

	# Result is of type Dialog
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: XlBuiltInDialog=defaultNamedNotOptArg) -> Dialog:
		...
	# Result is of type Dialog
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: XlBuiltInDialog=defaultNamedNotOptArg) -> Dialog:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: XlBuiltInDialog=defaultNamedNotOptArg) -> Dialog:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class DisplayFormat(typing.Protocol):

	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	FormulaHidden: typing.Any
	HorizontalAlignment: typing.Any
	IndentLevel: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Locked: typing.Any
	MergeCells: typing.Any
	NumberFormat: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ReadingOrder: typing.Any
	ShrinkToFit: typing.Any
	Style: typing.Any
	VerticalAlignment: typing.Any
	WrapText: typing.Any
	def __iter__(self):
		...

class DisplayUnitLabel(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlChartElementPosition'
	Position: XlChartElementPosition
	ReadingOrder: typing.Any
	Shadow: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class DocEvents:

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnQueryInterface(self, riid: typing.Any=defaultNamedNotOptArg, ppvObj: None=pythoncom.Missing):
#	def OnAddRef(self):
#	def OnRelease(self):
#	def OnGetTypeInfoCount(self, pctinfo: int=pythoncom.Missing):
#	def OnGetTypeInfo(self, itinfo: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, pptinfo: None=pythoncom.Missing):
#	def OnGetIDsOfNames(self, riid: typing.Any=defaultNamedNotOptArg, rgszNames: int=defaultNamedNotOptArg, cNames: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg
#			, rgdispid: int=pythoncom.Missing):
#	def OnInvoke(self, dispidMember: int=defaultNamedNotOptArg, riid: typing.Any=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, wFlags: int=defaultNamedNotOptArg
#			, pdispparams: typing.Any=defaultNamedNotOptArg, pvarResult: typing.Any=pythoncom.Missing, pexcepinfo: typing.Any=pythoncom.Missing, puArgErr: int=pythoncom.Missing):
#	def OnSelectionChange(self, Target: Range=defaultNamedNotOptArg):
#	def OnBeforeDoubleClick(self, Target: Range=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnBeforeRightClick(self, Target: Range=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnActivate(self):
#	def OnDeactivate(self):
#	def OnCalculate(self):
#	def OnChange(self, Target: Range=defaultNamedNotOptArg):
#	def OnFollowHyperlink(self, Target: Hyperlink=defaultNamedNotOptArg):
#	def OnPivotTableUpdate(self, Target: PivotTable=defaultNamedNotOptArg):
#	def OnPivotTableAfterValueChange(self, TargetPivotTable: PivotTable=defaultNamedNotOptArg, TargetRange: Range=defaultNamedNotOptArg):
#	def OnPivotTableBeforeAllocateChanges(self, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnPivotTableBeforeCommitChanges(self, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnPivotTableBeforeDiscardChanges(self, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg):
#	def OnPivotTableChangeSync(self, Target: PivotTable=defaultNamedNotOptArg):
#	def OnLensGalleryRenderComplete(self):
#	def OnTableUpdate(self, Target: TableObject=defaultNamedNotOptArg):
#	def OnBeforeDelete(self):
#	def OnRemoteChange(self, Target: Range=defaultNamedNotOptArg):
#	def OnRemoteBeforeDelete(self):
#	def OnRemotePivotTableUpdate(self, Target: PivotTable=defaultNamedNotOptArg):
#	def OnRemotePivotTableChangeSync(self, Target: PivotTable=defaultNamedNotOptArg):
	...


class DownBars(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class Drawing(typing.Protocol):

	def AddVertex(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# The method GetVertices is actually a property, but must be used as a method to correctly pass the arguments
	def GetVertices(self, Index1: typing.Any=defaultNamedOptArg, Index2: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Reshape(self, Vertex: int=defaultNamedNotOptArg, Insert: bool=defaultNamedNotOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Vertices: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class DrawingObjects(typing.Protocol):

	def AddItem(self, Text: typing.Any=defaultNamedNotOptArg, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def LinkCombo(self, Link: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def List(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def RemoveAllItems(self) -> typing.Any:
		...
	def RemoveItem(self, Index: int=defaultNamedNotOptArg, Count: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Reshape(self, Vertex: int=defaultNamedNotOptArg, Insert: typing.Any=defaultNamedNotOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Selected(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	def Ungroup(self) -> Dispatch:
		...
	def Vertices(self, Index1: typing.Any=defaultNamedOptArg, Index2: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	Accelerator: typing.Any
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	CancelButton: typing.Any
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DefaultButton: typing.Any
	DismissButton: typing.Any
	Display3DShading: typing.Any
	DisplayVerticalScrollBar: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Height: typing.Any
	HelpButton: typing.Any
	HorizontalAlignment: typing.Any
	InputType: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	LargeChange: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Max: typing.Any
	Min: typing.Any
	MultiLine: typing.Any
	MultiSelect: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SmallChange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Drawings(typing.Protocol):

	# Result is of type Drawing
	def Add(self, X1: float=defaultNamedNotOptArg, Y1: float=defaultNamedNotOptArg, X2: float=defaultNamedNotOptArg, Y2: float=defaultNamedNotOptArg
			, Closed: bool=defaultNamedNotOptArg) -> Drawing:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Reshape(self, Vertex: int=defaultNamedNotOptArg, Insert: bool=defaultNamedNotOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class DropDown(typing.Protocol):

	def AddItem(self, Text: typing.Any=defaultNamedNotOptArg, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# The method GetList is actually a property, but must be used as a method to correctly pass the arguments
	def GetList(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def GetSelected(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def RemoveAllItems(self) -> typing.Any:
		...
	def RemoveItem(self, Index: int=defaultNamedNotOptArg, Count: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	# The method SetList is actually a property, but must be used as a method to correctly pass the arguments
	def SetList(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	# The method SetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def SetSelected(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	LinkedObject: typing.Any
	List: typing.Any
	ListCount: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class DropDowns(typing.Protocol):

	# Result is of type DropDown
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg
			, Editable: typing.Any=defaultNamedOptArg) -> DropDown:
		...
	def AddItem(self, Text: typing.Any=defaultNamedNotOptArg, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# The method GetList is actually a property, but must be used as a method to correctly pass the arguments
	def GetList(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def GetSelected(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def RemoveAllItems(self) -> typing.Any:
		...
	def RemoveItem(self, Index: int=defaultNamedNotOptArg, Count: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	# The method SetList is actually a property, but must be used as a method to correctly pass the arguments
	def SetList(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	# The method SetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def SetSelected(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	List: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class DropLines(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class EditBox(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayVerticalScrollBar: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	InputType: typing.Any
	Left: typing.Any
	LinkedObject: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	MultiLine: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PasswordEdit: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class EditBoxes(typing.Protocol):

	# Result is of type EditBox
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> EditBox:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayVerticalScrollBar: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	InputType: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	MultiLine: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PasswordEdit: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Error(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Ignore: typing.Any
	Parent: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ErrorBars(typing.Protocol):

	def ClearFormats(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'EndStyle' returns enumeration of type 'XlEndStyleCap'
	EndStyle: XlEndStyleCap
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ErrorCheckingOptions(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	BackgroundChecking: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EmptyCellReferences: typing.Any
	EvaluateToError: typing.Any
	InconsistentFormula: typing.Any
	InconsistentTableFormula: typing.Any
		# Method 'IndicatorColorIndex' returns enumeration of type 'XlColorIndex'
	IndicatorColorIndex: XlColorIndex
	ListDataValidation: typing.Any
	MisleadingNumberFormats: typing.Any
	NumberAsText: typing.Any
	OmittedCells: typing.Any
	OutdatedLinkedDataType: typing.Any
	Parent: typing.Any
	TextDate: typing.Any
	UnlockedFormulaCells: typing.Any
	def __iter__(self):
		...

class Errors(typing.Protocol):

	# Result is of type Error
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Error:
		...
	# Result is of type Error
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Error:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Error:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...

class FileExportConverter(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Description: typing.Any
	Extensions: typing.Any
	FileFormat: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class FileExportConverters(typing.Protocol):

	# Result is of type FileExportConverter
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> FileExportConverter:
		...
	# Result is of type FileExportConverter
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> FileExportConverter:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> FileExportConverter:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class FillFormat(typing.Protocol):

	def Background(self) -> None:
		...
	def OneColorGradient(self, Style: MsoGradientStyle=defaultNamedNotOptArg, Variant: int=defaultNamedNotOptArg, Degree: float=defaultNamedNotOptArg) -> None:
		...
	def Patterned(self, Pattern: MsoPatternType=defaultNamedNotOptArg) -> None:
		...
	def PresetGradient(self, Style: MsoGradientStyle=defaultNamedNotOptArg, Variant: int=defaultNamedNotOptArg, PresetGradientType: MsoPresetGradientType=defaultNamedNotOptArg) -> None:
		...
	def PresetTextured(self, PresetTexture: MsoPresetTexture=defaultNamedNotOptArg) -> None:
		...
	def Solid(self) -> None:
		...
	def TwoColorGradient(self, Style: MsoGradientStyle=defaultNamedNotOptArg, Variant: int=defaultNamedNotOptArg) -> None:
		...
	def UserPicture(self, PictureFile: str=defaultNamedNotOptArg) -> None:
		...
	def UserTextured(self, TextureFile: str=defaultNamedNotOptArg) -> None:
		...
	Application: typing.Any
		# Method 'BackColor' returns object of type 'ColorFormat'
	BackColor: ColorFormat
	Creator: typing.Any
		# Method 'ForeColor' returns object of type 'ColorFormat'
	ForeColor: ColorFormat
	GradientAngle: typing.Any
		# Method 'GradientColorType' returns enumeration of type 'MsoGradientColorType'
	GradientColorType: MsoGradientColorType
	GradientDegree: typing.Any
		# Method 'GradientStops' returns object of type 'GradientStops'
	GradientStops: GradientStops
		# Method 'GradientStyle' returns enumeration of type 'MsoGradientStyle'
	GradientStyle: MsoGradientStyle
	GradientVariant: typing.Any
	Parent: typing.Any
		# Method 'Pattern' returns enumeration of type 'MsoPatternType'
	Pattern: MsoPatternType
		# Method 'PictureEffects' returns object of type 'PictureEffects'
	PictureEffects: PictureEffects
		# Method 'PresetGradientType' returns enumeration of type 'MsoPresetGradientType'
	PresetGradientType: MsoPresetGradientType
		# Method 'PresetTexture' returns enumeration of type 'MsoPresetTexture'
	PresetTexture: MsoPresetTexture
		# Method 'RotateWithObject' returns enumeration of type 'MsoTriState'
	RotateWithObject: MsoTriState
		# Method 'TextureAlignment' returns enumeration of type 'MsoTextureAlignment'
	TextureAlignment: MsoTextureAlignment
	TextureHorizontalScale: typing.Any
	TextureName: typing.Any
	TextureOffsetX: typing.Any
	TextureOffsetY: typing.Any
		# Method 'TextureTile' returns enumeration of type 'MsoTriState'
	TextureTile: MsoTriState
		# Method 'TextureType' returns enumeration of type 'MsoTextureType'
	TextureType: MsoTextureType
	TextureVerticalScale: typing.Any
	Transparency: typing.Any
		# Method 'Type' returns enumeration of type 'MsoFillType'
	Type: MsoFillType
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	def __iter__(self):
		...

class Filter(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Criteria1: typing.Any
	Criteria2: typing.Any
	On: typing.Any
		# Method 'Operator' returns enumeration of type 'XlAutoFilterOperator'
	Operator: XlAutoFilterOperator
	Parent: typing.Any
		# Method '_Operator' returns enumeration of type 'XlAutoFilterOperator'
	_Operator: XlAutoFilterOperator
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Filters(typing.Protocol):

	# Result is of type Filter
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> Filter:
		...
	# Result is of type Filter
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> Filter:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> Filter:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Floor(typing.Protocol):

	def ClearFormats(self) -> typing.Any:
		...
	def Paste(self) -> None:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Name: typing.Any
	Parent: typing.Any
	PictureType: typing.Any
	Thickness: typing.Any
	def __iter__(self):
		...

class Font(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Background: typing.Any
	Bold: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	FontStyle: typing.Any
	Italic: typing.Any
	Name: typing.Any
	OutlineFont: typing.Any
	Parent: typing.Any
	Shadow: typing.Any
	Size: typing.Any
	Strikethrough: typing.Any
	Subscript: typing.Any
	Superscript: typing.Any
	ThemeColor: typing.Any
		# Method 'ThemeFont' returns enumeration of type 'XlThemeFont'
	ThemeFont: XlThemeFont
	TintAndShade: typing.Any
	Underline: typing.Any
	def __iter__(self):
		...

class FormatColor(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
		# Method 'ColorIndex' returns enumeration of type 'XlColorIndex'
	ColorIndex: XlColorIndex
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class FormatCondition(typing.Protocol):

	def Delete(self) -> None:
		...
	def Modify(self, Type: XlFormatConditionType=defaultNamedNotOptArg, Operator: typing.Any=defaultNamedOptArg, Formula1: typing.Any=defaultNamedOptArg, Formula2: typing.Any=defaultNamedOptArg
			, String: typing.Any=defaultNamedOptArg, Operator2: typing.Any=defaultNamedOptArg) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
	def _Modify(self, Type: XlFormatConditionType=defaultNamedNotOptArg, Operator: typing.Any=defaultNamedOptArg, Formula1: typing.Any=defaultNamedOptArg, Formula2: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DateOperator' returns enumeration of type 'XlTimePeriods'
	DateOperator: XlTimePeriods
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula1: typing.Any
	Formula2: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	NumberFormat: typing.Any
	Operator: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	StopIfTrue: typing.Any
	Text: typing.Any
		# Method 'TextOperator' returns enumeration of type 'XlContainsOperator'
	TextOperator: XlContainsOperator
	Type: typing.Any
	def __iter__(self):
		...

class FormatConditions(typing.Protocol):

	def Add(self, Type: XlFormatConditionType=defaultNamedNotOptArg, Operator: typing.Any=defaultNamedOptArg, Formula1: typing.Any=defaultNamedOptArg, Formula2: typing.Any=defaultNamedOptArg
			, String: typing.Any=defaultNamedOptArg, TextOperator: typing.Any=defaultNamedOptArg, DateOperator: typing.Any=defaultNamedOptArg, ScopeType: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def AddAboveAverage(self) -> Dispatch:
		...
	def AddColorScale(self, ColorScaleType: int=defaultNamedNotOptArg) -> Dispatch:
		...
	def AddDatabar(self) -> Dispatch:
		...
	def AddIconSetCondition(self) -> Dispatch:
		...
	def AddTop10(self) -> Dispatch:
		...
	def AddUniqueValues(self) -> Dispatch:
		...
	def Delete(self) -> None:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class FreeformBuilder(typing.Protocol):

	def AddNodes(self, SegmentType: MsoSegmentType=defaultNamedNotOptArg, EditingType: MsoEditingType=defaultNamedNotOptArg, X1: float=defaultNamedNotOptArg, Y1: float=defaultNamedNotOptArg
			, X2: typing.Any=defaultNamedOptArg, Y2: typing.Any=defaultNamedOptArg, X3: typing.Any=defaultNamedOptArg, Y3: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Shape
	def ConvertToShape(self) -> Shape:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class FullSeriesCollection(typing.Protocol):

	# Result is of type Series
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Series:
		...
	# Result is of type Series
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Series:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Series:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Graphic(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Brightness: typing.Any
		# Method 'ColorType' returns enumeration of type 'MsoPictureColorType'
	ColorType: MsoPictureColorType
	Contrast: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	CropBottom: typing.Any
	CropLeft: typing.Any
	CropRight: typing.Any
	CropTop: typing.Any
	Filename: typing.Any
	Height: typing.Any
		# Method 'LockAspectRatio' returns enumeration of type 'MsoTriState'
	LockAspectRatio: MsoTriState
	Parent: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class Gridlines(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class GroupBox(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class GroupBoxes(typing.Protocol):

	# Result is of type GroupBox
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> GroupBox:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class GroupObject(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	def Ungroup(self) -> Dispatch:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class GroupObjects(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	def Ungroup(self) -> Dispatch:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class GroupShapes(typing.Protocol):

	# Result is of type Shape
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type ShapeRange
	# The method Range is actually a property, but must be used as a method to correctly pass the arguments
	def Range(self, Index: typing.Any=defaultNamedNotOptArg) -> ShapeRange:
		...
	# Result is of type Shape
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class HPageBreak(typing.Protocol):

	def Delete(self) -> None:
		...
	def DragOff(self, Direction: XlDirection=defaultNamedNotOptArg, RegionIndex: int=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Extent' returns enumeration of type 'XlPageBreakExtent'
	Extent: XlPageBreakExtent
		# Method 'Location' returns object of type 'Range'
	Location: Range
		# Method 'Parent' returns object of type 'Worksheet'
	Parent: Worksheet
		# Method 'Type' returns enumeration of type 'XlPageBreak'
	Type: XlPageBreak
	def __iter__(self):
		...

class HPageBreaks(typing.Protocol):

	# Result is of type HPageBreak
	def Add(self, Before: Dispatch=defaultNamedNotOptArg) -> HPageBreak:
		...
	# Result is of type HPageBreak
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> HPageBreak:
		...
	# Result is of type HPageBreak
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> HPageBreak:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> HPageBreak:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class HeaderFooter(typing.Protocol):

		# Method 'Picture' returns object of type 'Graphic'
	Picture: Graphic
	Text: typing.Any
	def __iter__(self):
		...

class HiLoLines(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class Hyperlink(typing.Protocol):

	def AddToFavorites(self) -> None:
		...
	def CreateNewDocument(self, Filename: str=defaultNamedNotOptArg, EditNow: bool=defaultNamedNotOptArg, Overwrite: bool=defaultNamedNotOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def Follow(self, NewWindow: typing.Any=defaultNamedOptArg, AddHistory: typing.Any=defaultNamedOptArg, ExtraInfo: typing.Any=defaultNamedOptArg, Method: typing.Any=defaultNamedOptArg
			, HeaderInfo: typing.Any=defaultNamedOptArg) -> None:
		...
	Address: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EmailSubject: typing.Any
	Name: typing.Any
	Parent: typing.Any
		# Method 'Range' returns object of type 'Range'
	Range: Range
	ScreenTip: typing.Any
		# Method 'Shape' returns object of type 'Shape'
	Shape: Shape
	SubAddress: typing.Any
	TextToDisplay: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class Hyperlinks(typing.Protocol):

	def Add(self, Anchor: Dispatch=defaultNamedNotOptArg, Address: str=defaultNamedNotOptArg, SubAddress: typing.Any=defaultNamedOptArg, ScreenTip: typing.Any=defaultNamedOptArg
			, TextToDisplay: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Delete(self) -> None:
		...
	# Result is of type Hyperlink
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Hyperlink:
		...
	# Result is of type Hyperlink
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Hyperlink:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Hyperlink:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAboveAverage(typing.Protocol):

	AboveBelow: typing.Any
	Application: typing.Any
	AppliesTo: typing.Any
	Borders: typing.Any
	CalcFor: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Interior: typing.Any
	NumStdDev: typing.Any
	NumberFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
	ScopeType: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IAction(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Content: typing.Any
	Coordinate: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IActions(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAddIn(typing.Protocol):

	Application: typing.Any
	Author: typing.Any
	CLSID: typing.Any
	Comments: typing.Any
	Creator: typing.Any
	FullName: typing.Any
	Installed: typing.Any
	IsOpen: typing.Any
	Keywords: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Path: typing.Any
	Subject: typing.Any
	Title: typing.Any
	progID: typing.Any
	def __iter__(self):
		...

class IAddIns(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAddIns2(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAllowEditRange(typing.Protocol):

	Range: typing.Any
	Title: typing.Any
	Users: typing.Any
	def __iter__(self):
		...

class IAllowEditRanges(typing.Protocol):

	Count: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAppEvents(typing.Protocol):

	def __iter__(self):
		...

class IArc(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IArcs(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAreas(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAuthor(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Parent: typing.Any
	ProviderID: typing.Any
	UserID: typing.Any
	def __iter__(self):
		...

class IAutoCorrect(typing.Protocol):

	Application: typing.Any
	AutoExpandListRange: typing.Any
	AutoFillFormulasInLists: typing.Any
	CapitalizeNamesOfDays: typing.Any
	CorrectCapsLock: typing.Any
	CorrectSentenceCap: typing.Any
	Creator: typing.Any
	DisplayAutoCorrectOptions: typing.Any
	KeepGeneralFormatDigitsWithEAsText: typing.Any
	KeepGeneralFormatLargeNumbersAsText: typing.Any
	KeepGeneralFormatLeadingZerosAsText: typing.Any
	Parent: typing.Any
	ReplaceText: typing.Any
	ReplacementList: typing.Any
	TwoInitialCapitals: typing.Any
	def __iter__(self):
		...

class IAutoFilter(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	FilterMode: typing.Any
	Filters: typing.Any
	Parent: typing.Any
	Range: typing.Any
	Sort: typing.Any
	_Sort: typing.Any
	def __iter__(self):
		...

class IAutoRecover(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Parent: typing.Any
	Path: typing.Any
	Time: typing.Any
	def __iter__(self):
		...

class IAxes(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IAxis(typing.Protocol):

	Application: typing.Any
	AxisBetweenCategories: typing.Any
	AxisGroup: typing.Any
	AxisTitle: typing.Any
	BaseUnit: typing.Any
	BaseUnitIsAuto: typing.Any
	Border: typing.Any
	CategoryNames: typing.Any
	CategorySortOrder: typing.Any
	CategoryType: typing.Any
	Creator: typing.Any
	Crosses: typing.Any
	CrossesAt: typing.Any
	DisplayUnit: typing.Any
	DisplayUnitCustom: typing.Any
	DisplayUnitLabel: typing.Any
	Format: typing.Any
	HasDisplayUnitLabel: typing.Any
	HasMajorGridlines: typing.Any
	HasMinorGridlines: typing.Any
	HasTitle: typing.Any
	Height: typing.Any
	Left: typing.Any
	LogBase: typing.Any
	MajorGridlines: typing.Any
	MajorTickMark: typing.Any
	MajorUnit: typing.Any
	MajorUnitIsAuto: typing.Any
	MajorUnitScale: typing.Any
	MaximumScale: typing.Any
	MaximumScaleIsAuto: typing.Any
	MinimumScale: typing.Any
	MinimumScaleIsAuto: typing.Any
	MinorGridlines: typing.Any
	MinorTickMark: typing.Any
	MinorUnit: typing.Any
	MinorUnitIsAuto: typing.Any
	MinorUnitScale: typing.Any
	Parent: typing.Any
	ReversePlotOrder: typing.Any
	ScaleType: typing.Any
	TickLabelPosition: typing.Any
	TickLabelSpacing: typing.Any
	TickLabelSpacingIsAuto: typing.Any
	TickLabels: typing.Any
	TickMarkSpacing: typing.Any
	Top: typing.Any
	Type: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IAxisTitle(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	IncludeInLayout: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Position: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IBorder(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
	Creator: typing.Any
	LineStyle: typing.Any
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	Weight: typing.Any
	def __iter__(self):
		...

class IBorders(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
	Count: typing.Any
	Creator: typing.Any
	LineStyle: typing.Any
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	Value: typing.Any
	Weight: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IButton(typing.Protocol):

	Accelerator: typing.Any
	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	BottomRightCell: typing.Any
	CancelButton: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	DefaultButton: typing.Any
	DismissButton: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HelpButton: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IButtons(typing.Protocol):

	Accelerator: typing.Any
	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	CancelButton: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	DefaultButton: typing.Any
	DismissButton: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HelpButton: typing.Any
	HorizontalAlignment: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICalculatedFields(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICalculatedItems(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICalculatedMember(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DisplayFolder: typing.Any
	Dynamic: typing.Any
	FlattenHierarchies: typing.Any
	Formula: typing.Any
	HierarchizeDistinct: typing.Any
	IsValid: typing.Any
	MeasureGroup: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	Parent: typing.Any
	ParentHierarchy: typing.Any
	ParentMember: typing.Any
	SolveOrder: typing.Any
	SourceName: typing.Any
	Type: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ICalculatedMembers(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICanvasShapes(typing.Protocol):

	def __iter__(self):
		...

class ICategoryCollection(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICellFormat(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	Borders: typing.Any
	Creator: typing.Any
	Font: typing.Any
	FormulaHidden: typing.Any
	HorizontalAlignment: typing.Any
	IndentLevel: typing.Any
	Interior: typing.Any
	Locked: typing.Any
	MergeCells: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ShrinkToFit: typing.Any
	VerticalAlignment: typing.Any
	WrapText: typing.Any
	def __iter__(self):
		...

class ICharacters(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Parent: typing.Any
	PhoneticCharacters: typing.Any
	Text: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IChartArea(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	Height: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IChartCategory(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	IsFiltered: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IChartColorFormat(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	RGB: typing.Any
	SchemeColor: typing.Any
	Type: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IChartEvents(typing.Protocol):

	def __iter__(self):
		...

class IChartFillFormat(typing.Protocol):

	Application: typing.Any
	BackColor: typing.Any
	Creator: typing.Any
	ForeColor: typing.Any
	GradientColorType: typing.Any
	GradientDegree: typing.Any
	GradientStyle: typing.Any
	GradientVariant: typing.Any
	Parent: typing.Any
	Pattern: typing.Any
	PresetGradientType: typing.Any
	PresetTexture: typing.Any
	TextureName: typing.Any
	TextureType: typing.Any
	Type: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...

class IChartFormat(typing.Protocol):

	Adjustments: typing.Any
	Application: typing.Any
	AutoShapeType: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Glow: typing.Any
	Line: typing.Any
	Parent: typing.Any
	PictureFormat: typing.Any
	Shadow: typing.Any
	SoftEdge: typing.Any
	TextFrame2: typing.Any
	ThreeD: typing.Any
	def __iter__(self):
		...

class IChartGroup(typing.Protocol):

	Application: typing.Any
	AxisGroup: typing.Any
	BinWidthValue: typing.Any
	BinsCountValue: typing.Any
	BinsOverflowEnabled: typing.Any
	BinsOverflowValue: typing.Any
	BinsType: typing.Any
	BinsUnderflowEnabled: typing.Any
	BinsUnderflowValue: typing.Any
	BubbleScale: typing.Any
	Creator: typing.Any
	DoughnutHoleSize: typing.Any
	DownBars: typing.Any
	DropLines: typing.Any
	FirstSliceAngle: typing.Any
	GapWidth: typing.Any
	Has3DShading: typing.Any
	HasDropLines: typing.Any
	HasHiLoLines: typing.Any
	HasRadarAxisLabels: typing.Any
	HasSeriesLines: typing.Any
	HasUpDownBars: typing.Any
	HiLoLines: typing.Any
	Index: typing.Any
	Overlap: typing.Any
	Parent: typing.Any
	RadarAxisLabels: typing.Any
	SecondPlotSize: typing.Any
	SeriesLines: typing.Any
	ShowNegativeBubbles: typing.Any
	SizeRepresents: typing.Any
	SplitType: typing.Any
	SplitValue: typing.Any
	SubType: typing.Any
	Type: typing.Any
	UpBars: typing.Any
	VaryByCategories: typing.Any
	def __iter__(self):
		...

class IChartGroups(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IChartObject(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Chart: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ProtectChartObject: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IChartObjects(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ProtectChartObject: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IChartSeriesGradientStopData(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	StopColor: typing.Any
	StopPositionType: typing.Any
	StopValue: typing.Any
	def __iter__(self):
		...

class IChartTitle(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	IncludeInLayout: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Position: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IChartView(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class ICharts(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	HPageBreaks: typing.Any
	Parent: typing.Any
	VPageBreaks: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICheckBox(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ICheckBoxes(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Interior: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IColorScale(typing.Protocol):

	Application: typing.Any
	AppliesTo: typing.Any
	ColorScaleCriteria: typing.Any
	Creator: typing.Any
	Formula: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
	ScopeType: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IColorScaleCriteria(typing.Protocol):

	Count: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IColorScaleCriterion(typing.Protocol):

	FormatColor: typing.Any
	Index: typing.Any
	Type: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IColorStop(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Position: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class IColorStops(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IComment(typing.Protocol):

	Application: typing.Any
	Author: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Shape: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...

class ICommentThreaded(typing.Protocol):

	Application: typing.Any
	Author: typing.Any
	Creator: typing.Any
	Date: typing.Any
	Parent: typing.Any
	Replies: typing.Any
	Resolved: typing.Any
	def __iter__(self):
		...

class IComments(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICommentsThreaded(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IConditionValue(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Type: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IConnections(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IConnectorFormat(typing.Protocol):

	Application: typing.Any
	BeginConnected: typing.Any
	BeginConnectedShape: typing.Any
	BeginConnectionSite: typing.Any
	Creator: typing.Any
	EndConnected: typing.Any
	EndConnectedShape: typing.Any
	EndConnectionSite: typing.Any
	Parent: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IControlFormat(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
	LargeChange: typing.Any
	LinkedCell: typing.Any
	ListCount: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	LockedText: typing.Any
	Max: typing.Any
	Min: typing.Any
	MultiSelect: typing.Any
	Parent: typing.Any
	PrintObject: typing.Any
	SmallChange: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ICorners(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ICustomProperties(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ICustomProperty(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ICustomView(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PrintSettings: typing.Any
	RowColSettings: typing.Any
	def __iter__(self):
		...

class ICustomViews(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDataBarBorder(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IDataFeedConnection(typing.Protocol):

	AlwaysUseConnectionFile: typing.Any
	Application: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	EnableRefresh: typing.Any
	Parent: typing.Any
	RefreshDate: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	Refreshing: typing.Any
	SavePassword: typing.Any
	ServerCredentialsMethod: typing.Any
	SourceConnectionFile: typing.Any
	SourceDataFile: typing.Any
	def __iter__(self):
		...

class IDataLabel(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoText: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	NumberFormatLinked: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Position: typing.Any
	ReadingOrder: typing.Any
	Separator: typing.Any
	Shadow: typing.Any
	ShowBubbleSize: typing.Any
	ShowCategoryName: typing.Any
	ShowLegendKey: typing.Any
	ShowPercentage: typing.Any
	ShowRange: typing.Any
	ShowSeriesName: typing.Any
	ShowValue: typing.Any
	Text: typing.Any
	Top: typing.Any
	Type: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	_Height: typing.Any
	_Width: typing.Any
	def __iter__(self):
		...

class IDataLabels(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoText: typing.Any
	Border: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	NumberFormatLinked: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Position: typing.Any
	ReadingOrder: typing.Any
	Separator: typing.Any
	Shadow: typing.Any
	ShowBubbleSize: typing.Any
	ShowCategoryName: typing.Any
	ShowLegendKey: typing.Any
	ShowPercentage: typing.Any
	ShowRange: typing.Any
	ShowSeriesName: typing.Any
	ShowValue: typing.Any
	Type: typing.Any
	VerticalAlignment: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDataTable(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Format: typing.Any
	HasBorderHorizontal: typing.Any
	HasBorderOutline: typing.Any
	HasBorderVertical: typing.Any
	Parent: typing.Any
	ShowLegendKey: typing.Any
	def __iter__(self):
		...

class IDatabar(typing.Protocol):

	Application: typing.Any
	AppliesTo: typing.Any
	AxisColor: typing.Any
	AxisPosition: typing.Any
	BarBorder: typing.Any
	BarColor: typing.Any
	BarFillType: typing.Any
	Creator: typing.Any
	Direction: typing.Any
	Formula: typing.Any
	MaxPoint: typing.Any
	MinPoint: typing.Any
	NegativeBarFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	PercentMax: typing.Any
	PercentMin: typing.Any
	Priority: typing.Any
	ScopeType: typing.Any
	ShowValue: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IDefaultPivotTableLayoutOptions(typing.Protocol):

	AllowMultipleFilters: typing.Any
	Application: typing.Any
	CalculatedMembersInFilters: typing.Any
	ColumnGrand: typing.Any
	CompactRowIndent: typing.Any
	Creator: typing.Any
	DisplayContextTooltips: typing.Any
	DisplayEmptyColumn: typing.Any
	DisplayEmptyRow: typing.Any
	DisplayErrorString: typing.Any
	DisplayFieldCaptions: typing.Any
	DisplayImmediateItems: typing.Any
	DisplayMemberPropertyTooltips: typing.Any
	DisplayNullString: typing.Any
	EnableDrilldown: typing.Any
	EnableWriteback: typing.Any
	ErrorString: typing.Any
	FieldListSortAscending: typing.Any
	HasAutoFormat: typing.Any
	InGridDropZones: typing.Any
	LayoutBlankLine: typing.Any
	MergeLabels: typing.Any
	NullString: typing.Any
	PageFieldOrder: typing.Any
	PageFieldWrapCount: typing.Any
	Parent: typing.Any
	PreserveFormatting: typing.Any
	PrintDrillIndicators: typing.Any
	PrintTitles: typing.Any
	RefreshOnFileOpen: typing.Any
	RepeatAllLabels: typing.Any
	RepeatItemsOnEachPrintedPage: typing.Any
	RowAxisLayout: typing.Any
	RowGrand: typing.Any
	SaveData: typing.Any
	ShowDrillIndicators: typing.Any
	ShowValuesRow: typing.Any
	SortUsingCustomLists: typing.Any
	SubtotalHiddenPageItems: typing.Any
	SubtotalLocation: typing.Any
	Subtotals: typing.Any
	TotalsAnnotation: typing.Any
	ViewCalculatedMembers: typing.Any
	VisualTotals: typing.Any
	VisualTotalsForSets: typing.Any
	xlMissingItemsNone: typing.Any
	def __iter__(self):
		...

class IDiagram(typing.Protocol):

	Application: typing.Any
	AutoFormat: typing.Any
	AutoLayout: typing.Any
	Creator: typing.Any
	Nodes: typing.Any
	Parent: typing.Any
	Reverse: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IDialog(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IDialogFrame(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IDialogSheet(typing.Protocol):

	Application: typing.Any
	AutoFilter: typing.Any
	CodeName: typing.Any
	Comments: typing.Any
	CommentsThreaded: typing.Any
	Creator: typing.Any
	CustomProperties: typing.Any
	DefaultButton: typing.Any
	DialogFrame: typing.Any
	DisplayPageBreaks: typing.Any
	EnableCalculation: typing.Any
	EnableFormatConditionsCalculation: typing.Any
	EnableSelection: typing.Any
	Focus: typing.Any
	HPageBreaks: typing.Any
	Hyperlinks: typing.Any
	MailEnvelope: typing.Any
	Name: typing.Any
	NamedSheetViews: typing.Any
	Names: typing.Any
	Next: typing.Any
	PageSetup: typing.Any
	Parent: typing.Any
	Previous: typing.Any
	PrintedCommentPages: typing.Any
	Protection: typing.Any
	QueryTables: typing.Any
	Scripts: typing.Any
	ScrollArea: typing.Any
	Shapes: typing.Any
	SmartTags: typing.Any
	Sort: typing.Any
	Tab: typing.Any
	VPageBreaks: typing.Any
	_AutoFilter: typing.Any
	_CodeName: typing.Any
	_Sort: typing.Any
	def __iter__(self):
		...

class IDialogSheetView(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class IDialogSheets(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	HPageBreaks: typing.Any
	Parent: typing.Any
	VPageBreaks: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDialogs(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDisplayFormat(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	Borders: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Font: typing.Any
	FormulaHidden: typing.Any
	HorizontalAlignment: typing.Any
	IndentLevel: typing.Any
	Interior: typing.Any
	Locked: typing.Any
	MergeCells: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ReadingOrder: typing.Any
	ShrinkToFit: typing.Any
	Style: typing.Any
	VerticalAlignment: typing.Any
	WrapText: typing.Any
	def __iter__(self):
		...

class IDisplayUnitLabel(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Position: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IDocEvents(typing.Protocol):

	def __iter__(self):
		...

class IDownBars(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Interior: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IDrawing(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Vertices: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IDrawingObjects(typing.Protocol):

	Accelerator: typing.Any
	AddIndent: typing.Any
	Application: typing.Any
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	CancelButton: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	DefaultButton: typing.Any
	DismissButton: typing.Any
	Display3DShading: typing.Any
	DisplayVerticalScrollBar: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Height: typing.Any
	HelpButton: typing.Any
	HorizontalAlignment: typing.Any
	InputType: typing.Any
	Interior: typing.Any
	LargeChange: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Max: typing.Any
	Min: typing.Any
	MultiLine: typing.Any
	MultiSelect: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	SmallChange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDrawings(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDropDown(typing.Protocol):

	Application: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	LinkedObject: typing.Any
	List: typing.Any
	ListCount: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IDropDowns(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	DropDownLines: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	List: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IDropLines(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Format: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IDummy(typing.Protocol):

	ShowSignaturesPane: typing.Any
	def __iter__(self):
		...

class IEditBox(typing.Protocol):

	Application: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	DisplayVerticalScrollBar: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	InputType: typing.Any
	Left: typing.Any
	LinkedObject: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	MultiLine: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PasswordEdit: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IEditBoxes(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	DisplayVerticalScrollBar: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	InputType: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	MultiLine: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PasswordEdit: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IError(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Ignore: typing.Any
	Parent: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IErrorBars(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	EndStyle: typing.Any
	Format: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IErrorCheckingOptions(typing.Protocol):

	Application: typing.Any
	BackgroundChecking: typing.Any
	Creator: typing.Any
	EmptyCellReferences: typing.Any
	EvaluateToError: typing.Any
	InconsistentFormula: typing.Any
	InconsistentTableFormula: typing.Any
	IndicatorColorIndex: typing.Any
	ListDataValidation: typing.Any
	MisleadingNumberFormats: typing.Any
	NumberAsText: typing.Any
	OmittedCells: typing.Any
	OutdatedLinkedDataType: typing.Any
	Parent: typing.Any
	TextDate: typing.Any
	UnlockedFormulaCells: typing.Any
	def __iter__(self):
		...

class IErrors(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IFileExportConverter(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Description: typing.Any
	Extensions: typing.Any
	FileFormat: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IFileExportConverters(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IFilter(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Criteria1: typing.Any
	Criteria2: typing.Any
	On: typing.Any
	Operator: typing.Any
	Parent: typing.Any
	_Operator: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IFilters(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IFloor(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Interior: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PictureType: typing.Any
	Thickness: typing.Any
	def __iter__(self):
		...

class IFont(typing.Protocol):

	Application: typing.Any
	Background: typing.Any
	Bold: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
	Creator: typing.Any
	FontStyle: typing.Any
	Italic: typing.Any
	Name: typing.Any
	OutlineFont: typing.Any
	Parent: typing.Any
	Shadow: typing.Any
	Size: typing.Any
	Strikethrough: typing.Any
	Subscript: typing.Any
	Superscript: typing.Any
	ThemeColor: typing.Any
	ThemeFont: typing.Any
	TintAndShade: typing.Any
	Underline: typing.Any
	def __iter__(self):
		...

class IFormatColor(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class IFormatCondition(typing.Protocol):

	Application: typing.Any
	AppliesTo: typing.Any
	Borders: typing.Any
	Creator: typing.Any
	DateOperator: typing.Any
	Font: typing.Any
	Formula1: typing.Any
	Formula2: typing.Any
	Interior: typing.Any
	NumberFormat: typing.Any
	Operator: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
	ScopeType: typing.Any
	StopIfTrue: typing.Any
	Text: typing.Any
	TextOperator: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IFormatConditions(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IFreeformBuilder(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IFullSeriesCollection(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGraphic(typing.Protocol):

	Application: typing.Any
	Brightness: typing.Any
	ColorType: typing.Any
	Contrast: typing.Any
	Creator: typing.Any
	CropBottom: typing.Any
	CropLeft: typing.Any
	CropRight: typing.Any
	CropTop: typing.Any
	Filename: typing.Any
	Height: typing.Any
	LockAspectRatio: typing.Any
	Parent: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IGridlines(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Format: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IGroupBox(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IGroupBoxes(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGroupObject(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IGroupObjects(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IGroupShapes(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IHPageBreak(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Extent: typing.Any
	Location: typing.Any
	Parent: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IHPageBreaks(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IHeaderFooter(typing.Protocol):

	Picture: typing.Any
	Text: typing.Any
	def __iter__(self):
		...

class IHiLoLines(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Format: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IHyperlink(typing.Protocol):

	Address: typing.Any
	Application: typing.Any
	Creator: typing.Any
	EmailSubject: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Range: typing.Any
	ScreenTip: typing.Any
	Shape: typing.Any
	SubAddress: typing.Any
	TextToDisplay: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IHyperlinks(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IIcon(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Index: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IIconCriteria(typing.Protocol):

	Count: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IIconCriterion(typing.Protocol):

	Icon: typing.Any
	Index: typing.Any
	Operator: typing.Any
	Type: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IIconSet(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	ID: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IIconSetCondition(typing.Protocol):

	Application: typing.Any
	AppliesTo: typing.Any
	Creator: typing.Any
	Formula: typing.Any
	IconCriteria: typing.Any
	IconSet: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	PercentileValues: typing.Any
	Priority: typing.Any
	ReverseOrder: typing.Any
	ScopeType: typing.Any
	ShowIconOnly: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IIconSets(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IInterior(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
	Creator: typing.Any
	Gradient: typing.Any
	InvertIfNegative: typing.Any
	Parent: typing.Any
	Pattern: typing.Any
	PatternColor: typing.Any
	PatternColorIndex: typing.Any
	PatternThemeColor: typing.Any
	PatternTintAndShade: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class ILabel(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class ILabels(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ILeaderLines(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Format: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ILegend(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Font: typing.Any
	Format: typing.Any
	Height: typing.Any
	IncludeInLayout: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Position: typing.Any
	Shadow: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ILegendEntries(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ILegendEntry(typing.Protocol):

	Application: typing.Any
	AutoScaleFont: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Format: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LegendKey: typing.Any
	Parent: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ILegendKey(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Height: typing.Any
	Interior: typing.Any
	InvertIfNegative: typing.Any
	Left: typing.Any
	MarkerBackgroundColor: typing.Any
	MarkerBackgroundColorIndex: typing.Any
	MarkerForegroundColor: typing.Any
	MarkerForegroundColorIndex: typing.Any
	MarkerSize: typing.Any
	MarkerStyle: typing.Any
	Parent: typing.Any
	PictureType: typing.Any
	PictureUnit: typing.Any
	PictureUnit2: typing.Any
	Shadow: typing.Any
	Smooth: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ILine(typing.Protocol):

	Application: typing.Any
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class ILinearGradient(typing.Protocol):

	Application: typing.Any
	ColorStops: typing.Any
	Creator: typing.Any
	Degree: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ILines(typing.Protocol):

	Application: typing.Any
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
	Border: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ILinkFormat(typing.Protocol):

	Application: typing.Any
	AutoUpdate: typing.Any
	Creator: typing.Any
	Locked: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IListBox(typing.Protocol):

	Application: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	LinkedObject: typing.Any
	List: typing.Any
	ListCount: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	MultiSelect: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IListBoxes(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	List: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	MultiSelect: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IListColumn(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DataBodyRange: typing.Any
	Index: typing.Any
	ListDataFormat: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Range: typing.Any
	SharePointFormula: typing.Any
	Total: typing.Any
	TotalsCalculation: typing.Any
	XPath: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IListColumns(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IListDataFormat(typing.Protocol):

	AllowFillIn: typing.Any
	Application: typing.Any
	Choices: typing.Any
	Creator: typing.Any
	DecimalPlaces: typing.Any
	DefaultValue: typing.Any
	IsPercent: typing.Any
	MaxCharacters: typing.Any
	MaxNumber: typing.Any
	MinNumber: typing.Any
	Parent: typing.Any
	ReadOnly: typing.Any
	Required: typing.Any
	Type: typing.Any
	_Default: typing.Any
	lcid: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IListObject(typing.Protocol):

	Active: typing.Any
	AlternativeText: typing.Any
	Application: typing.Any
	AutoFilter: typing.Any
	Comment: typing.Any
	Creator: typing.Any
	DataBodyRange: typing.Any
	DisplayName: typing.Any
	DisplayRightToLeft: typing.Any
	HeaderRowRange: typing.Any
	InsertRowRange: typing.Any
	ListColumns: typing.Any
	ListRows: typing.Any
	Name: typing.Any
	Parent: typing.Any
	QueryTable: typing.Any
	Range: typing.Any
	SharePointURL: typing.Any
	ShowAutoFilter: typing.Any
	ShowAutoFilterDropDown: typing.Any
	ShowHeaders: typing.Any
	ShowTableStyleColumnStripes: typing.Any
	ShowTableStyleFirstColumn: typing.Any
	ShowTableStyleLastColumn: typing.Any
	ShowTableStyleRowStripes: typing.Any
	ShowTotals: typing.Any
	Slicers: typing.Any
	Sort: typing.Any
	SourceType: typing.Any
	Summary: typing.Any
	TableObject: typing.Any
	TableStyle: typing.Any
	TotalsRowRange: typing.Any
	XmlMap: typing.Any
	_AutoFilter: typing.Any
	_Default: typing.Any
	_Sort: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IListObjects(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IListRow(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Index: typing.Any
	InvalidData: typing.Any
	Parent: typing.Any
	Range: typing.Any
	def __iter__(self):
		...

class IListRows(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMailer(typing.Protocol):

	Application: typing.Any
	BCCRecipients: typing.Any
	CCRecipients: typing.Any
	Creator: typing.Any
	Enclosures: typing.Any
	Parent: typing.Any
	Received: typing.Any
	SendDateTime: typing.Any
	Sender: typing.Any
	Subject: typing.Any
	ToRecipients: typing.Any
	WhichAddress: typing.Any
	def __iter__(self):
		...

class IMenu(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Index: typing.Any
	MenuItems: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IMenuBar(typing.Protocol):

	Application: typing.Any
	BuiltIn: typing.Any
	Caption: typing.Any
	Creator: typing.Any
	Index: typing.Any
	Menus: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IMenuBars(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMenuItem(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Checked: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	HelpContextID: typing.Any
	HelpFile: typing.Any
	Index: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	StatusBar: typing.Any
	def __iter__(self):
		...

class IMenuItems(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMenus(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModel(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DataModelConnection: typing.Any
	ModelFormatBoolean: typing.Any
	ModelFormatCurrency: typing.Any
	ModelFormatDate: typing.Any
	ModelFormatDecimalNumber: typing.Any
	ModelFormatGeneral: typing.Any
	ModelFormatPercentageNumber: typing.Any
	ModelFormatScientificNumber: typing.Any
	ModelFormatWholeNumber: typing.Any
	ModelMeasures: typing.Any
	ModelRelationships: typing.Any
	ModelTables: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelChanges(typing.Protocol):

	Application: typing.Any
	ColumnsAdded: typing.Any
	ColumnsChanged: typing.Any
	ColumnsDeleted: typing.Any
	Creator: typing.Any
	MeasuresAdded: typing.Any
	Parent: typing.Any
	RelationshipChange: typing.Any
	Source: typing.Any
	TableNamesChanged: typing.Any
	TablesAdded: typing.Any
	TablesDeleted: typing.Any
	TablesModified: typing.Any
	UnknownChange: typing.Any
	def __iter__(self):
		...

class IModelColumnChange(typing.Protocol):

	Application: typing.Any
	ColumnName: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	TableName: typing.Any
	def __iter__(self):
		...

class IModelColumnChanges(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelColumnName(typing.Protocol):

	Application: typing.Any
	ColumnName: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	TableName: typing.Any
	def __iter__(self):
		...

class IModelColumnNames(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelConnection(typing.Protocol):

	ADOConnection: typing.Any
	Application: typing.Any
	CalculatedMembers: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelFormatBoolean(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelFormatCurrency(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DecimalPlaces: typing.Any
	Parent: typing.Any
	Symbol: typing.Any
	def __iter__(self):
		...

class IModelFormatDate(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	FormatString: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelFormatDecimalNumber(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DecimalPlaces: typing.Any
	Parent: typing.Any
	UseThousandSeparator: typing.Any
	def __iter__(self):
		...

class IModelFormatGeneral(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelFormatPercentageNumber(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DecimalPlaces: typing.Any
	Parent: typing.Any
	UseThousandSeparator: typing.Any
	def __iter__(self):
		...

class IModelFormatScientificNumber(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DecimalPlaces: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelFormatWholeNumber(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	UseThousandSeparator: typing.Any
	def __iter__(self):
		...

class IModelMeasure(typing.Protocol):

	Application: typing.Any
	AssociatedTable: typing.Any
	Creator: typing.Any
	Description: typing.Any
	FormatInformation: typing.Any
	Formula: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelMeasureName(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	MeasureName: typing.Any
	Parent: typing.Any
	TableName: typing.Any
	def __iter__(self):
		...

class IModelMeasureNames(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelMeasures(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelRelationship(typing.Protocol):

	Active: typing.Any
	Application: typing.Any
	Creator: typing.Any
	ForeignKeyColumn: typing.Any
	ForeignKeyTable: typing.Any
	Parent: typing.Any
	PrimaryKeyColumn: typing.Any
	PrimaryKeyTable: typing.Any
	def __iter__(self):
		...

class IModelRelationships(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelTable(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	ModelTableColumns: typing.Any
	Name: typing.Any
	Parent: typing.Any
	RecordCount: typing.Any
	SourceName: typing.Any
	SourceWorkbookConnection: typing.Any
	def __iter__(self):
		...

class IModelTableColumn(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DataType: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IModelTableColumns(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelTableNameChange(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	TableNameNew: typing.Any
	TableNameOld: typing.Any
	def __iter__(self):
		...

class IModelTableNameChanges(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelTableNames(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModelTables(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IModule(typing.Protocol):

	Application: typing.Any
	CodeName: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Next: typing.Any
	PageSetup: typing.Any
	Parent: typing.Any
	Previous: typing.Any
	Shapes: typing.Any
	_CodeName: typing.Any
	def __iter__(self):
		...

class IModuleView(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class IModules(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	HPageBreaks: typing.Any
	Parent: typing.Any
	VPageBreaks: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IMultiThreadedCalculation(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Parent: typing.Any
	ThreadCount: typing.Any
	ThreadMode: typing.Any
	def __iter__(self):
		...

class IName(typing.Protocol):

	Application: typing.Any
	CategoryLocal: typing.Any
	Comment: typing.Any
	Creator: typing.Any
	Index: typing.Any
	MacroType: typing.Any
	NameLocal: typing.Any
	Parent: typing.Any
	RefersToLocal: typing.Any
	RefersToR1C1Local: typing.Any
	RefersToRange: typing.Any
	ShortcutKey: typing.Any
	ValidWorkbookParameter: typing.Any
	Value: typing.Any
	Visible: typing.Any
	WorkbookParameter: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class INamedSheetView(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class INamedSheetViewCollection(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class INames(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class INegativeBarFormat(typing.Protocol):

	Application: typing.Any
	BorderColor: typing.Any
	BorderColorType: typing.Any
	Color: typing.Any
	ColorType: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IODBCConnection(typing.Protocol):

	AlwaysUseConnectionFile: typing.Any
	Application: typing.Any
	BackgroundQuery: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	EnableRefresh: typing.Any
	Parent: typing.Any
	RefreshDate: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	Refreshing: typing.Any
	RobustConnect: typing.Any
	SavePassword: typing.Any
	ServerCredentialsMethod: typing.Any
	ServerSSOApplicationID: typing.Any
	SourceConnectionFile: typing.Any
	SourceData: typing.Any
	SourceDataFile: typing.Any
	def __iter__(self):
		...

class IODBCError(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	ErrorString: typing.Any
	Parent: typing.Any
	SqlState: typing.Any
	def __iter__(self):
		...

class IODBCErrors(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IOLEDBConnection(typing.Protocol):

	ADOConnection: typing.Any
	AlwaysUseConnectionFile: typing.Any
	Application: typing.Any
	BackgroundQuery: typing.Any
	CalculatedMembers: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	EnableRefresh: typing.Any
	IsConnected: typing.Any
	LocalConnection: typing.Any
	LocaleID: typing.Any
	MaintainConnection: typing.Any
	MaxDrillthroughRecords: typing.Any
	OLAP: typing.Any
	Parent: typing.Any
	RefreshDate: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	Refreshing: typing.Any
	RetrieveInOfficeUILang: typing.Any
	RobustConnect: typing.Any
	SavePassword: typing.Any
	ServerCredentialsMethod: typing.Any
	ServerFillColor: typing.Any
	ServerFontStyle: typing.Any
	ServerNumberFormat: typing.Any
	ServerSSOApplicationID: typing.Any
	ServerTextColor: typing.Any
	SourceConnectionFile: typing.Any
	SourceDataFile: typing.Any
	UseLocalConnection: typing.Any
	def __iter__(self):
		...

class IOLEDBError(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	ErrorString: typing.Any
	Native: typing.Any
	Number: typing.Any
	Parent: typing.Any
	SqlState: typing.Any
	Stage: typing.Any
	def __iter__(self):
		...

class IOLEDBErrors(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IOLEFormat(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Object: typing.Any
	Parent: typing.Any
	progID: typing.Any
	def __iter__(self):
		...

class IOLEObjectEvents(typing.Protocol):

	def __iter__(self):
		...

class IOLEObjects(typing.Protocol):

	Application: typing.Any
	AutoLoad: typing.Any
	Border: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	SourceName: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IOptionButton(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	GroupBox: typing.Any
	Height: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IOptionButtons(typing.Protocol):

	Accelerator: typing.Any
	Application: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	GroupBox: typing.Any
	Height: typing.Any
	Interior: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IOutline(typing.Protocol):

	Application: typing.Any
	AutomaticStyles: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	SummaryColumn: typing.Any
	SummaryRow: typing.Any
	def __iter__(self):
		...

class IOval(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IOvals(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPage(typing.Protocol):

	CenterFooter: typing.Any
	CenterHeader: typing.Any
	LeftFooter: typing.Any
	LeftHeader: typing.Any
	RightFooter: typing.Any
	RightHeader: typing.Any
	def __iter__(self):
		...

class IPageSetup(typing.Protocol):

	AlignMarginsHeaderFooter: typing.Any
	Application: typing.Any
	BlackAndWhite: typing.Any
	BottomMargin: typing.Any
	CenterFooter: typing.Any
	CenterFooterPicture: typing.Any
	CenterHeader: typing.Any
	CenterHeaderPicture: typing.Any
	CenterHorizontally: typing.Any
	CenterVertically: typing.Any
	ChartSize: typing.Any
	Creator: typing.Any
	DifferentFirstPageHeaderFooter: typing.Any
	Draft: typing.Any
	EvenPage: typing.Any
	FirstPage: typing.Any
	FirstPageNumber: typing.Any
	FitToPagesTall: typing.Any
	FitToPagesWide: typing.Any
	FooterMargin: typing.Any
	HeaderMargin: typing.Any
	LeftFooter: typing.Any
	LeftFooterPicture: typing.Any
	LeftHeader: typing.Any
	LeftHeaderPicture: typing.Any
	LeftMargin: typing.Any
	OddAndEvenPagesHeaderFooter: typing.Any
	Order: typing.Any
	Orientation: typing.Any
	Pages: typing.Any
	PaperSize: typing.Any
	Parent: typing.Any
	PrintArea: typing.Any
	PrintComments: typing.Any
	PrintErrors: typing.Any
	PrintGridlines: typing.Any
	PrintHeadings: typing.Any
	PrintNotes: typing.Any
	PrintQuality: typing.Any
	PrintTitleColumns: typing.Any
	PrintTitleRows: typing.Any
	RightFooter: typing.Any
	RightFooterPicture: typing.Any
	RightHeader: typing.Any
	RightHeaderPicture: typing.Any
	RightMargin: typing.Any
	ScaleWithDocHeaderFooter: typing.Any
	TopMargin: typing.Any
	Zoom: typing.Any
	def __iter__(self):
		...

class IPages(typing.Protocol):

	Count: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPane(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Index: typing.Any
	Parent: typing.Any
	ScrollColumn: typing.Any
	ScrollRow: typing.Any
	VisibleRange: typing.Any
	def __iter__(self):
		...

class IPanes(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IParameter(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DataType: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PromptString: typing.Any
	RefreshOnChange: typing.Any
	SourceRange: typing.Any
	Type: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IParameters(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPhonetic(typing.Protocol):

	Alignment: typing.Any
	Application: typing.Any
	CharacterType: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Parent: typing.Any
	Text: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...

class IPhonetics(typing.Protocol):

	Alignment: typing.Any
	Application: typing.Any
	CharacterType: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Length: typing.Any
	Parent: typing.Any
	Start: typing.Any
	Text: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPicture(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Formula: typing.Any
	Height: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IPictures(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Formula: typing.Any
	Height: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotAxis(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	PivotLines: typing.Any
	def __iter__(self):
		...

class IPivotCache(typing.Protocol):

	ADOConnection: typing.Any
	Application: typing.Any
	BackgroundQuery: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	EnableRefresh: typing.Any
	Index: typing.Any
	IsConnected: typing.Any
	LocalConnection: typing.Any
	MaintainConnection: typing.Any
	MemoryUsed: typing.Any
	MissingItemsLimit: typing.Any
	OLAP: typing.Any
	OptimizeCache: typing.Any
	Parent: typing.Any
	QueryType: typing.Any
	RecordCount: typing.Any
	Recordset: typing.Any
	RefreshDate: typing.Any
	RefreshName: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	RobustConnect: typing.Any
	SavePassword: typing.Any
	SourceConnectionFile: typing.Any
	SourceData: typing.Any
	SourceDataFile: typing.Any
	SourceType: typing.Any
	Sql: typing.Any
	UpgradeOnRefresh: typing.Any
	UseLocalConnection: typing.Any
	Version: typing.Any
	WorkbookConnection: typing.Any
	def __iter__(self):
		...

class IPivotCaches(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotCell(typing.Protocol):

	Application: typing.Any
	CellChanged: typing.Any
	ColumnItems: typing.Any
	Creator: typing.Any
	CustomSubtotalFunction: typing.Any
	DataField: typing.Any
	DataSourceValue: typing.Any
	Dummy18: typing.Any
	MDX: typing.Any
	Parent: typing.Any
	PivotCellType: typing.Any
	PivotColumnLine: typing.Any
	PivotField: typing.Any
	PivotItem: typing.Any
	PivotRowLine: typing.Any
	PivotTable: typing.Any
	Range: typing.Any
	RowItems: typing.Any
	ServerActions: typing.Any
	def __iter__(self):
		...

class IPivotField(typing.Protocol):

	AllItemsVisible: typing.Any
	Application: typing.Any
	AutoShowCount: typing.Any
	AutoShowField: typing.Any
	AutoShowRange: typing.Any
	AutoShowType: typing.Any
	AutoSortCustomSubtotal: typing.Any
	AutoSortField: typing.Any
	AutoSortOrder: typing.Any
	AutoSortPivotLine: typing.Any
	BaseField: typing.Any
	BaseItem: typing.Any
	Calculation: typing.Any
	Caption: typing.Any
	ChildField: typing.Any
	ChildItems: typing.Any
	Creator: typing.Any
	CubeField: typing.Any
	CurrentPage: typing.Any
	CurrentPageList: typing.Any
	CurrentPageName: typing.Any
	DataRange: typing.Any
	DataType: typing.Any
	DatabaseSort: typing.Any
	DisplayAsCaption: typing.Any
	DisplayAsTooltip: typing.Any
	DisplayInReport: typing.Any
	DragToColumn: typing.Any
	DragToData: typing.Any
	DragToHide: typing.Any
	DragToPage: typing.Any
	DragToRow: typing.Any
	DrilledDown: typing.Any
	EnableItemSelection: typing.Any
	EnableMultiplePageItems: typing.Any
	Formula: typing.Any
	Function: typing.Any
	GroupLevel: typing.Any
	Hidden: typing.Any
	HiddenItems: typing.Any
	HiddenItemsList: typing.Any
	IncludeNewItemsInFilter: typing.Any
	IsCalculated: typing.Any
	IsMemberProperty: typing.Any
	LabelRange: typing.Any
	LayoutBlankLine: typing.Any
	LayoutCompactRow: typing.Any
	LayoutForm: typing.Any
	LayoutPageBreak: typing.Any
	LayoutSubtotalLocation: typing.Any
	MemberPropertyCaption: typing.Any
	MemoryUsed: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ParentField: typing.Any
	ParentItems: typing.Any
	PivotFilters: typing.Any
	Position: typing.Any
	PropertyOrder: typing.Any
	PropertyParentField: typing.Any
	RepeatLabels: typing.Any
	ServerBased: typing.Any
	ShowAllItems: typing.Any
	ShowDetail: typing.Any
	ShowingInAxis: typing.Any
	SourceCaption: typing.Any
	SourceName: typing.Any
	StandardFormula: typing.Any
	SubtotalName: typing.Any
	Subtotals: typing.Any
	TotalLevels: typing.Any
	UseMemberPropertyAsCaption: typing.Any
	Value: typing.Any
	VisibleItems: typing.Any
	VisibleItemsList: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IPivotFields(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotFilter(typing.Protocol):

	Active: typing.Any
	Application: typing.Any
	Creator: typing.Any
	DataCubeField: typing.Any
	DataField: typing.Any
	Description: typing.Any
	FilterType: typing.Any
	IsMemberPropertyFilter: typing.Any
	MemberPropertyField: typing.Any
	Name: typing.Any
	Order: typing.Any
	Parent: typing.Any
	PivotField: typing.Any
	Value1: typing.Any
	Value2: typing.Any
	WholeDayFilter: typing.Any
	def __iter__(self):
		...

class IPivotFilters(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotFormula(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Formula: typing.Any
	Index: typing.Any
	Parent: typing.Any
	StandardFormula: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IPivotFormulas(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotItem(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	ChildItems: typing.Any
	Creator: typing.Any
	DataRange: typing.Any
	DrilledDown: typing.Any
	Formula: typing.Any
	IsCalculated: typing.Any
	LabelRange: typing.Any
	Name: typing.Any
	Parent: typing.Any
	ParentItem: typing.Any
	ParentShowDetail: typing.Any
	Position: typing.Any
	RecordCount: typing.Any
	ShowDetail: typing.Any
	SourceName: typing.Any
	SourceNameStandard: typing.Any
	StandardFormula: typing.Any
	Value: typing.Any
	Visible: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IPivotItemList(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotItems(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotLayout(typing.Protocol):

	Application: typing.Any
	ColumnFields: typing.Any
	Creator: typing.Any
	CubeFields: typing.Any
	DataFields: typing.Any
	HiddenFields: typing.Any
	InnerDetail: typing.Any
	PageFields: typing.Any
	Parent: typing.Any
	PivotCache: typing.Any
	PivotFields: typing.Any
	PivotTable: typing.Any
	RowFields: typing.Any
	VisibleFields: typing.Any
	def __iter__(self):
		...

class IPivotLine(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	LineType: typing.Any
	Parent: typing.Any
	PivotLineCells: typing.Any
	PivotLineCellsFull: typing.Any
	Position: typing.Any
	def __iter__(self):
		...

class IPivotLineCells(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Full: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotLines(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotTable(typing.Protocol):

	ActiveFilters: typing.Any
	Allocation: typing.Any
	AllocationMethod: typing.Any
	AllocationValue: typing.Any
	AllocationWeightExpression: typing.Any
	AllowMultipleFilters: typing.Any
	AlternativeText: typing.Any
	Application: typing.Any
	CacheIndex: typing.Any
	CalculatedMembers: typing.Any
	CalculatedMembersInFilters: typing.Any
	ChangeList: typing.Any
	ColumnFields: typing.Any
	ColumnGrand: typing.Any
	ColumnRange: typing.Any
	CompactLayoutColumnHeader: typing.Any
	CompactLayoutRowHeader: typing.Any
	CompactRowIndent: typing.Any
	Creator: typing.Any
	CubeFields: typing.Any
	DataBodyRange: typing.Any
	DataFields: typing.Any
	DataLabelRange: typing.Any
	DataPivotField: typing.Any
	DisplayContextTooltips: typing.Any
	DisplayEmptyColumn: typing.Any
	DisplayEmptyRow: typing.Any
	DisplayErrorString: typing.Any
	DisplayFieldCaptions: typing.Any
	DisplayImmediateItems: typing.Any
	DisplayMemberPropertyTooltips: typing.Any
	DisplayNullString: typing.Any
	EnableDataValueEditing: typing.Any
	EnableDrilldown: typing.Any
	EnableFieldDialog: typing.Any
	EnableFieldList: typing.Any
	EnableWizard: typing.Any
	EnableWriteback: typing.Any
	ErrorString: typing.Any
	FieldListSortAscending: typing.Any
	GrandTotalName: typing.Any
	HasAutoFormat: typing.Any
	Hidden: typing.Any
	HiddenFields: typing.Any
	InGridDropZones: typing.Any
	InnerDetail: typing.Any
	LayoutRowDefault: typing.Any
	Location: typing.Any
	MDX: typing.Any
	ManualUpdate: typing.Any
	MergeLabels: typing.Any
	Name: typing.Any
	NullString: typing.Any
	PageFieldOrder: typing.Any
	PageFieldStyle: typing.Any
	PageFieldWrapCount: typing.Any
	PageFields: typing.Any
	PageRange: typing.Any
	PageRangeCells: typing.Any
	Parent: typing.Any
	PivotChart: typing.Any
	PivotColumnAxis: typing.Any
	PivotFormulas: typing.Any
	PivotRowAxis: typing.Any
	PivotSelection: typing.Any
	PivotSelectionStandard: typing.Any
	PreserveFormatting: typing.Any
	PrintDrillIndicators: typing.Any
	PrintTitles: typing.Any
	RefreshDate: typing.Any
	RefreshName: typing.Any
	RepeatItemsOnEachPrintedPage: typing.Any
	RowFields: typing.Any
	RowGrand: typing.Any
	RowRange: typing.Any
	SaveData: typing.Any
	SelectionMode: typing.Any
	ShowCellBackgroundFromOLAP: typing.Any
	ShowDrillIndicators: typing.Any
	ShowPageMultipleItemLabel: typing.Any
	ShowTableStyleColumnHeaders: typing.Any
	ShowTableStyleColumnStripes: typing.Any
	ShowTableStyleLastColumn: typing.Any
	ShowTableStyleRowHeaders: typing.Any
	ShowTableStyleRowStripes: typing.Any
	ShowValuesRow: typing.Any
	Slicers: typing.Any
	SmallGrid: typing.Any
	SortUsingCustomLists: typing.Any
	SourceData: typing.Any
	SubtotalHiddenPageItems: typing.Any
	Summary: typing.Any
	TableRange1: typing.Any
	TableRange2: typing.Any
	TableStyle: typing.Any
	TableStyle2: typing.Any
	Tag: typing.Any
	TotalsAnnotation: typing.Any
	VacatedStyle: typing.Any
	Value: typing.Any
	Version: typing.Any
	ViewCalculatedMembers: typing.Any
	VisibleFields: typing.Any
	VisualTotals: typing.Any
	VisualTotalsForSets: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IPivotTableChangeList(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotTables(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPivotValueCell(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	PivotCell: typing.Any
	ServerActions: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IPlotArea(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Height: typing.Any
	InsideHeight: typing.Any
	InsideLeft: typing.Any
	InsideTop: typing.Any
	InsideWidth: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Position: typing.Any
	Top: typing.Any
	Width: typing.Any
	_InsideHeight: typing.Any
	_InsideLeft: typing.Any
	_InsideTop: typing.Any
	_InsideWidth: typing.Any
	def __iter__(self):
		...

class IPoint(typing.Protocol):

	Application: typing.Any
	ApplyPictToEnd: typing.Any
	ApplyPictToFront: typing.Any
	ApplyPictToSides: typing.Any
	Border: typing.Any
	Creator: typing.Any
	DataLabel: typing.Any
	Explosion: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Has3DEffect: typing.Any
	HasDataLabel: typing.Any
	Height: typing.Any
	Interior: typing.Any
	InvertIfNegative: typing.Any
	IsTotal: typing.Any
	Left: typing.Any
	MarkerBackgroundColor: typing.Any
	MarkerBackgroundColorIndex: typing.Any
	MarkerForegroundColor: typing.Any
	MarkerForegroundColorIndex: typing.Any
	MarkerSize: typing.Any
	MarkerStyle: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PictureType: typing.Any
	PictureUnit: typing.Any
	PictureUnit2: typing.Any
	SecondaryPlot: typing.Any
	Shadow: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IPoints(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IProtectedViewWindow(typing.Protocol):

	Caption: typing.Any
	EnableResize: typing.Any
	Height: typing.Any
	Left: typing.Any
	SourceName: typing.Any
	SourcePath: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	WindowState: typing.Any
	Workbook: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IProtectedViewWindows(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IProtection(typing.Protocol):

	AllowDeletingColumns: typing.Any
	AllowDeletingRows: typing.Any
	AllowEditRanges: typing.Any
	AllowFiltering: typing.Any
	AllowFormattingCells: typing.Any
	AllowFormattingColumns: typing.Any
	AllowFormattingRows: typing.Any
	AllowInsertingColumns: typing.Any
	AllowInsertingHyperlinks: typing.Any
	AllowInsertingRows: typing.Any
	AllowSorting: typing.Any
	AllowUsingPivotTables: typing.Any
	def __iter__(self):
		...

class IPublishObjects(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IPublishedDoc(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DisclosureScope: typing.Any
	Parent: typing.Any
	PublishedDate: typing.Any
	Title: typing.Any
	Url: typing.Any
	def __iter__(self):
		...

class IPublishedDocs(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IQueries(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	FastCombine: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IQueryTables(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IQuickAnalysis(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IRTD(typing.Protocol):

	ThrottleInterval: typing.Any
	def __iter__(self):
		...

class IRTDUpdateEvent(typing.Protocol):

	def Disconnect(self) -> None:
		...
	def UpdateNotify(self) -> None:
		...
	HeartbeatInterval: typing.Any
	def __iter__(self):
		...

class IRange(typing.Protocol):

	AddIndent: typing.Any
	AddressLocal: typing.Any
	AllowEdit: typing.Any
	Application: typing.Any
	Areas: typing.Any
	Borders: typing.Any
	Cells: typing.Any
	Characters: typing.Any
	Column: typing.Any
	ColumnWidth: typing.Any
	Columns: typing.Any
	Comment: typing.Any
	CommentThreaded: typing.Any
	Count: typing.Any
	CountLarge: typing.Any
	Creator: typing.Any
	CurrentArray: typing.Any
	CurrentRegion: typing.Any
	Dependents: typing.Any
	DirectDependents: typing.Any
	DirectPrecedents: typing.Any
	DisplayFormat: typing.Any
	EntireColumn: typing.Any
	EntireRow: typing.Any
	Errors: typing.Any
	Font: typing.Any
	FormatConditions: typing.Any
	Formula2Local: typing.Any
	Formula2R1C1Local: typing.Any
	FormulaArray: typing.Any
	FormulaHidden: typing.Any
	FormulaLabel: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1Local: typing.Any
	HasArray: typing.Any
	HasFormula: typing.Any
	HasRichDataType: typing.Any
	HasSpill: typing.Any
	Height: typing.Any
	Hidden: typing.Any
	HorizontalAlignment: typing.Any
	Hyperlinks: typing.Any
	ID: typing.Any
	IndentLevel: typing.Any
	Interior: typing.Any
	Left: typing.Any
	LinkedDataTypeState: typing.Any
	ListHeaderRows: typing.Any
	ListObject: typing.Any
	LocationInTable: typing.Any
	Locked: typing.Any
	MDX: typing.Any
	MergeArea: typing.Any
	MergeCells: typing.Any
	Name: typing.Any
	Next: typing.Any
	NumberFormat: typing.Any
	NumberFormatLocal: typing.Any
	Offset: typing.Any
	Orientation: typing.Any
	OutlineLevel: typing.Any
	PageBreak: typing.Any
	Parent: typing.Any
	Phonetic: typing.Any
	Phonetics: typing.Any
	PivotCell: typing.Any
	PivotField: typing.Any
	PivotItem: typing.Any
	PivotTable: typing.Any
	Precedents: typing.Any
	PrefixCharacter: typing.Any
	Previous: typing.Any
	QueryTable: typing.Any
	ReadingOrder: typing.Any
	Resize: typing.Any
	Row: typing.Any
	RowHeight: typing.Any
	Rows: typing.Any
	SavedAsArray: typing.Any
	ServerActions: typing.Any
	ShowDetail: typing.Any
	ShrinkToFit: typing.Any
	SmartTags: typing.Any
	SoundNote: typing.Any
	SparklineGroups: typing.Any
	SpillParent: typing.Any
	SpillingToRange: typing.Any
	Style: typing.Any
	Summary: typing.Any
	Text: typing.Any
	Top: typing.Any
	UseStandardHeight: typing.Any
	UseStandardWidth: typing.Any
	Validation: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
	Worksheet: typing.Any
	WrapText: typing.Any
	XPath: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRanges(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRecentFile(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Index: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Path: typing.Any
	def __iter__(self):
		...

class IRecentFiles(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Maximum: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRectangle(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class IRectangles(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IRectangularGradient(typing.Protocol):

	Application: typing.Any
	ColorStops: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	RectangleBottom: typing.Any
	RectangleLeft: typing.Any
	RectangleRight: typing.Any
	RectangleTop: typing.Any
	def __iter__(self):
		...

class IRefreshEvents(typing.Protocol):

	def __iter__(self):
		...

class IResearch(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IRoutingSlip(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Delivery: typing.Any
	Message: typing.Any
	Parent: typing.Any
	Recipients: typing.Any
	ReturnWhenDone: typing.Any
	Status: typing.Any
	Subject: typing.Any
	TrackStatus: typing.Any
	def __iter__(self):
		...

class IRtdServer(typing.Protocol):

	def ConnectData(self, TopicID: int=defaultNamedNotOptArg, Strings: typing.List[typing.Any]=defaultNamedNotOptArg, GetNewValues: bool=defaultNamedNotOptArg) -> typing.Any:
		...
	def DisconnectData(self, TopicID: int=defaultNamedNotOptArg) -> None:
		...
	def Heartbeat(self) -> int:
		...
	def RefreshData(self, TopicCount: int=defaultNamedNotOptArg) -> typing.List[typing.Any]:
		...
	def ServerStart(self, CallbackObject: IRTDUpdateEvent=defaultNamedNotOptArg) -> int:
		...
	def ServerTerminate(self) -> None:
		...
	def __iter__(self):
		...

class IScenario(typing.Protocol):

	Application: typing.Any
	ChangingCells: typing.Any
	Comment: typing.Any
	Creator: typing.Any
	Hidden: typing.Any
	Index: typing.Any
	Locked: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Values: typing.Any
	def __iter__(self):
		...

class IScenarios(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IScrollBar(typing.Protocol):

	Application: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	LargeChange: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	SmallChange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IScrollBars(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	LargeChange: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	SmallChange: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISeries(typing.Protocol):

	Application: typing.Any
	ApplyPictToEnd: typing.Any
	ApplyPictToFront: typing.Any
	ApplyPictToSides: typing.Any
	AxisGroup: typing.Any
	BarShape: typing.Any
	Border: typing.Any
	BubbleSizes: typing.Any
	ChartType: typing.Any
	Creator: typing.Any
	ErrorBars: typing.Any
	Explosion: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	GeoMappingLevel: typing.Any
	GeoProjectionType: typing.Any
	Has3DEffect: typing.Any
	HasDataLabels: typing.Any
	HasErrorBars: typing.Any
	HasLeaderLines: typing.Any
	Interior: typing.Any
	InvertColor: typing.Any
	InvertColorIndex: typing.Any
	InvertIfNegative: typing.Any
	IsFiltered: typing.Any
	LeaderLines: typing.Any
	MarkerBackgroundColor: typing.Any
	MarkerBackgroundColorIndex: typing.Any
	MarkerForegroundColor: typing.Any
	MarkerForegroundColorIndex: typing.Any
	MarkerSize: typing.Any
	MarkerStyle: typing.Any
	Name: typing.Any
	Parent: typing.Any
	ParentDataLabelOption: typing.Any
	PictureType: typing.Any
	PictureUnit: typing.Any
	PictureUnit2: typing.Any
	PlotColorIndex: typing.Any
	PlotOrder: typing.Any
	QuartileCalculationInclusiveMedian: typing.Any
	RegionLabelOption: typing.Any
	SeriesColorGradientStyle: typing.Any
	SeriesColorMaxGradientStop: typing.Any
	SeriesColorMidGradientStop: typing.Any
	SeriesColorMinGradientStop: typing.Any
	Shadow: typing.Any
	Smooth: typing.Any
	Type: typing.Any
	ValueSortOrder: typing.Any
	Values: typing.Any
	XValues: typing.Any
	def __iter__(self):
		...

class ISeriesCollection(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISeriesGradientStopColorFormat(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	ObjectThemeColor: typing.Any
	Parent: typing.Any
	RGB: typing.Any
	TintAndShade: typing.Any
	Transparency: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class ISeriesLines(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Format: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IServerViewableItems(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IShape(typing.Protocol):

	Adjustments: typing.Any
	AlternativeText: typing.Any
	Application: typing.Any
	AutoShapeType: typing.Any
	BackgroundStyle: typing.Any
	BlackWhiteMode: typing.Any
	BottomRightCell: typing.Any
	Callout: typing.Any
	CanvasItems: typing.Any
	Chart: typing.Any
	Child: typing.Any
	ConnectionSiteCount: typing.Any
	Connector: typing.Any
	ConnectorFormat: typing.Any
	ControlFormat: typing.Any
	Creator: typing.Any
	Decorative: typing.Any
	Diagram: typing.Any
	DiagramNode: typing.Any
	DrawingObject: typing.Any
	Fill: typing.Any
	FormControlType: typing.Any
	Glow: typing.Any
	GraphicStyle: typing.Any
	GroupItems: typing.Any
	HasChart: typing.Any
	HasDiagram: typing.Any
	HasDiagramNode: typing.Any
	HasSmartArt: typing.Any
	Height: typing.Any
	HorizontalFlip: typing.Any
	Hyperlink: typing.Any
	ID: typing.Any
	Left: typing.Any
	Line: typing.Any
	LinkFormat: typing.Any
	LockAspectRatio: typing.Any
	Locked: typing.Any
	Model3D: typing.Any
	Name: typing.Any
	Nodes: typing.Any
	OLEFormat: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	ParentGroup: typing.Any
	PictureFormat: typing.Any
	Placement: typing.Any
	Reflection: typing.Any
	Rotation: typing.Any
	Script: typing.Any
	Shadow: typing.Any
	ShapeStyle: typing.Any
	SmartArt: typing.Any
	SoftEdge: typing.Any
	TextEffect: typing.Any
	TextFrame: typing.Any
	TextFrame2: typing.Any
	ThreeD: typing.Any
	Title: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Type: typing.Any
	VerticalFlip: typing.Any
	Vertices: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrderPosition: typing.Any
	def __iter__(self):
		...

class IShapeRange(typing.Protocol):

	Adjustments: typing.Any
	AlternativeText: typing.Any
	Application: typing.Any
	AutoShapeType: typing.Any
	BackgroundStyle: typing.Any
	BlackWhiteMode: typing.Any
	Callout: typing.Any
	CanvasItems: typing.Any
	Chart: typing.Any
	Child: typing.Any
	ConnectionSiteCount: typing.Any
	Connector: typing.Any
	ConnectorFormat: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Decorative: typing.Any
	Diagram: typing.Any
	DiagramNode: typing.Any
	Fill: typing.Any
	Glow: typing.Any
	GraphicStyle: typing.Any
	GroupItems: typing.Any
	HasChart: typing.Any
	HasDiagram: typing.Any
	HasDiagramNode: typing.Any
	Height: typing.Any
	HorizontalFlip: typing.Any
	ID: typing.Any
	Left: typing.Any
	Line: typing.Any
	LockAspectRatio: typing.Any
	Model3D: typing.Any
	Name: typing.Any
	Nodes: typing.Any
	Parent: typing.Any
	ParentGroup: typing.Any
	PictureFormat: typing.Any
	Reflection: typing.Any
	Rotation: typing.Any
	Shadow: typing.Any
	ShapeStyle: typing.Any
	SoftEdge: typing.Any
	TextEffect: typing.Any
	TextFrame: typing.Any
	TextFrame2: typing.Any
	ThreeD: typing.Any
	Title: typing.Any
	Top: typing.Any
	Type: typing.Any
	VerticalFlip: typing.Any
	Vertices: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrderPosition: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IShapes(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISheetViews(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISlicer(typing.Protocol):

	ActiveItem: typing.Any
	Application: typing.Any
	Caption: typing.Any
	ColumnWidth: typing.Any
	Creator: typing.Any
	DisableMoveResizeUI: typing.Any
	DisplayHeader: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	NumberOfColumns: typing.Any
	Parent: typing.Any
	RowHeight: typing.Any
	Shape: typing.Any
	SlicerCache: typing.Any
	SlicerCacheLevel: typing.Any
	SlicerCacheType: typing.Any
	Style: typing.Any
	TimelineViewState: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ISlicerCache(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	CrossFilterType: typing.Any
	FilterCleared: typing.Any
	Index: typing.Any
	List: typing.Any
	ListObject: typing.Any
	Name: typing.Any
	OLAP: typing.Any
	Parent: typing.Any
	PivotTables: typing.Any
	RequireManualUpdate: typing.Any
	ShowAllItems: typing.Any
	SlicerCacheLevels: typing.Any
	SlicerCacheType: typing.Any
	SlicerItems: typing.Any
	Slicers: typing.Any
	SortItems: typing.Any
	SortUsingCustomLists: typing.Any
	SourceName: typing.Any
	SourceType: typing.Any
	TimelineState: typing.Any
	VisibleSlicerItems: typing.Any
	VisibleSlicerItemsList: typing.Any
	WorkbookConnection: typing.Any
	def __iter__(self):
		...

class ISlicerCacheLevel(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	CrossFilterType: typing.Any
	Name: typing.Any
	Ordinal: typing.Any
	Parent: typing.Any
	SlicerItems: typing.Any
	SortItems: typing.Any
	VisibleSlicerItemsList: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISlicerCacheLevels(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Item: typing.Any
	Parent: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISlicerCaches(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISlicerItem(typing.Protocol):

	Application: typing.Any
	Caption: typing.Any
	Creator: typing.Any
	HasData: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Selected: typing.Any
	SourceName: typing.Any
	SourceNameStandard: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ISlicerItems(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISlicerPivotTables(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISlicers(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISmartTag(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DownloadURL: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Properties: typing.Any
	Range: typing.Any
	SmartTagActions: typing.Any
	XML: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ISmartTagAction(typing.Protocol):

	ActiveXControl: typing.Any
	Application: typing.Any
	CheckboxState: typing.Any
	Creator: typing.Any
	ExpandHelp: typing.Any
	ListSelection: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PresentInPane: typing.Any
	RadioGroupSelection: typing.Any
	TextboxText: typing.Any
	Type: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ISmartTagActions(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISmartTagOptions(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DisplaySmartTags: typing.Any
	EmbedSmartTags: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ISmartTagRecognizer(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	FullName: typing.Any
	Parent: typing.Any
	_Default: typing.Any
	progID: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ISmartTagRecognizers(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Recognize: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISmartTags(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISort(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Header: typing.Any
	MatchCase: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Rng: typing.Any
	SortFields: typing.Any
	SortMethod: typing.Any
	def __iter__(self):
		...

class ISortField(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	CustomOrder: typing.Any
	DataOption: typing.Any
	Key: typing.Any
	Order: typing.Any
	Parent: typing.Any
	Priority: typing.Any
	SortOn: typing.Any
	SortOnValue: typing.Any
	SubField: typing.Any
	def __iter__(self):
		...

class ISortFields(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISoundNote(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ISparkAxes(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Horizontal: typing.Any
	Parent: typing.Any
	Vertical: typing.Any
	def __iter__(self):
		...

class ISparkColor(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...

class ISparkHorizontalAxis(typing.Protocol):

	Application: typing.Any
	Axis: typing.Any
	Creator: typing.Any
	IsDateAxis: typing.Any
	Parent: typing.Any
	RightToLeftPlotOrder: typing.Any
	def __iter__(self):
		...

class ISparkPoints(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Firstpoint: typing.Any
	Highpoint: typing.Any
	Lastpoint: typing.Any
	Lowpoint: typing.Any
	Markers: typing.Any
	Negative: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ISparkVerticalAxis(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	CustomMaxScaleValue: typing.Any
	CustomMinScaleValue: typing.Any
	MaxScaleType: typing.Any
	MinScaleType: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ISparkline(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Location: typing.Any
	Parent: typing.Any
	SourceData: typing.Any
	def __iter__(self):
		...

class ISparklineGroup(typing.Protocol):

	Application: typing.Any
	Axes: typing.Any
	Count: typing.Any
	Creator: typing.Any
	DateRange: typing.Any
	DisplayBlanksAs: typing.Any
	DisplayHidden: typing.Any
	LineWeight: typing.Any
	Location: typing.Any
	Parent: typing.Any
	PlotBy: typing.Any
	Points: typing.Any
	SeriesColor: typing.Any
	SourceData: typing.Any
	Type: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISparklineGroups(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ISpeech(typing.Protocol):

	Direction: typing.Any
	SpeakCellOnEnter: typing.Any
	def __iter__(self):
		...

class ISpellingOptions(typing.Protocol):

	ArabicModes: typing.Any
	ArabicStrictAlefHamza: typing.Any
	ArabicStrictFinalYaa: typing.Any
	ArabicStrictTaaMarboota: typing.Any
	BrazilReform: typing.Any
	DictLang: typing.Any
	GermanPostReform: typing.Any
	HebrewModes: typing.Any
	IgnoreCaps: typing.Any
	IgnoreFileNames: typing.Any
	IgnoreMixedDigits: typing.Any
	KoreanCombineAux: typing.Any
	KoreanProcessCompound: typing.Any
	KoreanUseAutoChangeList: typing.Any
	PortugalReform: typing.Any
	RussianStrictE: typing.Any
	SpanishModes: typing.Any
	SuggestMainOnly: typing.Any
	UserDict: typing.Any
	def __iter__(self):
		...

class ISpinner(typing.Protocol):

	Application: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	SmallChange: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ISpinners(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ShapeRange: typing.Any
	SmallChange: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IStyle(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	Borders: typing.Any
	BuiltIn: typing.Any
	Creator: typing.Any
	Font: typing.Any
	FormulaHidden: typing.Any
	HorizontalAlignment: typing.Any
	IncludeAlignment: typing.Any
	IncludeBorder: typing.Any
	IncludeFont: typing.Any
	IncludeNumber: typing.Any
	IncludePatterns: typing.Any
	IncludeProtection: typing.Any
	IndentLevel: typing.Any
	Interior: typing.Any
	Locked: typing.Any
	MergeCells: typing.Any
	NameLocal: typing.Any
	NumberFormat: typing.Any
	NumberFormatLocal: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ReadingOrder: typing.Any
	ShrinkToFit: typing.Any
	VerticalAlignment: typing.Any
	WrapText: typing.Any
	def __iter__(self):
		...

class IStyles(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ITab(typing.Protocol):

	Application: typing.Any
	Color: typing.Any
	ColorIndex: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class ITableObject(typing.Protocol):

	AdjustColumnWidth: typing.Any
	Application: typing.Any
	Creator: typing.Any
	Destination: typing.Any
	EnableEditing: typing.Any
	EnableRefresh: typing.Any
	FetchedRowOverflow: typing.Any
	ListObject: typing.Any
	Parent: typing.Any
	PreserveColumnInfo: typing.Any
	PreserveFormatting: typing.Any
	RefreshStyle: typing.Any
	ResultRange: typing.Any
	RowNumbers: typing.Any
	WorkbookConnection: typing.Any
	def __iter__(self):
		...

class ITableStyle(typing.Protocol):

	Application: typing.Any
	BuiltIn: typing.Any
	Creator: typing.Any
	Name: typing.Any
	NameLocal: typing.Any
	Parent: typing.Any
	ShowAsAvailablePivotTableStyle: typing.Any
	ShowAsAvailableSlicerStyle: typing.Any
	ShowAsAvailableTableStyle: typing.Any
	ShowAsAvailableTimelineStyle: typing.Any
	TableStyleElements: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ITableStyleElement(typing.Protocol):

	Application: typing.Any
	Borders: typing.Any
	Creator: typing.Any
	Font: typing.Any
	HasFormat: typing.Any
	Interior: typing.Any
	Parent: typing.Any
	StripeSize: typing.Any
	def __iter__(self):
		...

class ITableStyleElements(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ITableStyles(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ITextBox(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class ITextBoxes(typing.Protocol):

	AddIndent: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
	Border: typing.Any
	Caption: typing.Any
	Characters: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Font: typing.Any
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Interior: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ITextConnection(typing.Protocol):

	Application: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	TextFileColumnDataTypes: typing.Any
	TextFileCommaDelimiter: typing.Any
	TextFileConsecutiveDelimiter: typing.Any
	TextFileDecimalSeparator: typing.Any
	TextFileFixedColumnWidths: typing.Any
	TextFileHeaderRow: typing.Any
	TextFileOtherDelimiter: typing.Any
	TextFileParseType: typing.Any
	TextFilePlatform: typing.Any
	TextFilePromptOnRefresh: typing.Any
	TextFileSemicolonDelimiter: typing.Any
	TextFileSpaceDelimiter: typing.Any
	TextFileStartRow: typing.Any
	TextFileTabDelimiter: typing.Any
	TextFileTextQualifier: typing.Any
	TextFileThousandsSeparator: typing.Any
	TextFileTrailingMinusNumbers: typing.Any
	TextFileVisualLayout: typing.Any
	def __iter__(self):
		...

class ITextFrame(typing.Protocol):

	Application: typing.Any
	AutoMargins: typing.Any
	AutoSize: typing.Any
	Creator: typing.Any
	HorizontalAlignment: typing.Any
	HorizontalOverflow: typing.Any
	MarginBottom: typing.Any
	MarginLeft: typing.Any
	MarginRight: typing.Any
	MarginTop: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ReadingOrder: typing.Any
	VerticalAlignment: typing.Any
	VerticalOverflow: typing.Any
	def __iter__(self):
		...

class ITickLabels(typing.Protocol):

	Alignment: typing.Any
	Application: typing.Any
	AutoScaleFont: typing.Any
	Creator: typing.Any
	Depth: typing.Any
	Font: typing.Any
	Format: typing.Any
	MultiLevel: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	NumberFormatLinked: typing.Any
	NumberFormatLocal: typing.Any
	Offset: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	ReadingOrder: typing.Any
	def __iter__(self):
		...

class ITimelineState(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	EndDate: typing.Any
	FilterType: typing.Any
	FilterValue1: typing.Any
	FilterValue2: typing.Any
	Parent: typing.Any
	SingleRangeFilterState: typing.Any
	StartDate: typing.Any
	def __iter__(self):
		...

class ITimelineViewState(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Level: typing.Any
	Parent: typing.Any
	ShowHeader: typing.Any
	ShowHorizontalScrollbar: typing.Any
	ShowSelectionLabel: typing.Any
	ShowTimeLevel: typing.Any
	def __iter__(self):
		...

class IToolbar(typing.Protocol):

	Application: typing.Any
	BuiltIn: typing.Any
	Creator: typing.Any
	Height: typing.Any
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Position: typing.Any
	Protection: typing.Any
	ToolbarButtons: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IToolbarButton(typing.Protocol):

	Application: typing.Any
	BuiltIn: typing.Any
	BuiltInFace: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	HelpContextID: typing.Any
	HelpFile: typing.Any
	ID: typing.Any
	IsGap: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Pushed: typing.Any
	StatusBar: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class IToolbarButtons(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IToolbars(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ITop10(typing.Protocol):

	Application: typing.Any
	AppliesTo: typing.Any
	Borders: typing.Any
	CalcFor: typing.Any
	Creator: typing.Any
	Font: typing.Any
	Interior: typing.Any
	NumberFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Percent: typing.Any
	Priority: typing.Any
	Rank: typing.Any
	ScopeType: typing.Any
	StopIfTrue: typing.Any
	TopBottom: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class ITrendline(typing.Protocol):

	Application: typing.Any
	Backward: typing.Any
	Backward2: typing.Any
	Border: typing.Any
	Creator: typing.Any
	DataLabel: typing.Any
	DisplayEquation: typing.Any
	DisplayRSquared: typing.Any
	Format: typing.Any
	Forward: typing.Any
	Forward2: typing.Any
	Index: typing.Any
	Intercept: typing.Any
	InterceptIsAuto: typing.Any
	Name: typing.Any
	NameIsAuto: typing.Any
	Order: typing.Any
	Parent: typing.Any
	Period: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class ITrendlines(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IUniqueValues(typing.Protocol):

	Application: typing.Any
	AppliesTo: typing.Any
	Borders: typing.Any
	Creator: typing.Any
	DupeUnique: typing.Any
	Font: typing.Any
	Interior: typing.Any
	NumberFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
	ScopeType: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IUpBars(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Interior: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IUsedObjects(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IUserAccess(typing.Protocol):

	AllowEdit: typing.Any
	Name: typing.Any
	def __iter__(self):
		...

class IUserAccessList(typing.Protocol):

	Count: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IVPageBreak(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Extent: typing.Any
	Location: typing.Any
	Parent: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IVPageBreaks(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IValidation(typing.Protocol):

	AlertStyle: typing.Any
	Application: typing.Any
	Creator: typing.Any
	ErrorMessage: typing.Any
	ErrorTitle: typing.Any
	Formula1: typing.Any
	Formula2: typing.Any
	IMEMode: typing.Any
	IgnoreBlank: typing.Any
	InCellDropdown: typing.Any
	InputMessage: typing.Any
	InputTitle: typing.Any
	Operator: typing.Any
	Parent: typing.Any
	ShowError: typing.Any
	ShowInput: typing.Any
	Type: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IValueChange(typing.Protocol):

	AllocationMethod: typing.Any
	AllocationValue: typing.Any
	AllocationWeightExpression: typing.Any
	Application: typing.Any
	Creator: typing.Any
	Order: typing.Any
	Parent: typing.Any
	PivotCell: typing.Any
	Tuple: typing.Any
	Value: typing.Any
	VisibleInPivotTable: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IWalls(typing.Protocol):

	Application: typing.Any
	Border: typing.Any
	Creator: typing.Any
	Fill: typing.Any
	Format: typing.Any
	Interior: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PictureType: typing.Any
	PictureUnit: typing.Any
	Thickness: typing.Any
	def __iter__(self):
		...

class IWatch(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Source: typing.Any
	def __iter__(self):
		...

class IWatches(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IWindow(typing.Protocol):

	ActiveCell: typing.Any
	ActiveChart: typing.Any
	ActivePane: typing.Any
	ActiveSheet: typing.Any
	ActiveSheetView: typing.Any
	Application: typing.Any
	AutoFilterDateGrouping: typing.Any
	Caption: typing.Any
	Creator: typing.Any
	DisplayFormulas: typing.Any
	DisplayGridlines: typing.Any
	DisplayHeadings: typing.Any
	DisplayHorizontalScrollBar: typing.Any
	DisplayOutline: typing.Any
	DisplayRightToLeft: typing.Any
	DisplayRuler: typing.Any
	DisplayVerticalScrollBar: typing.Any
	DisplayWhitespace: typing.Any
	DisplayWorkbookTabs: typing.Any
	DisplayZeros: typing.Any
	EnableResize: typing.Any
	FreezePanes: typing.Any
	GridlineColor: typing.Any
	GridlineColorIndex: typing.Any
	Height: typing.Any
	Hwnd: typing.Any
	Index: typing.Any
	Left: typing.Any
	OnWindow: typing.Any
	Panes: typing.Any
	Parent: typing.Any
	RangeSelection: typing.Any
	ScrollColumn: typing.Any
	ScrollRow: typing.Any
	SelectedSheets: typing.Any
	Selection: typing.Any
	SheetViews: typing.Any
	Split: typing.Any
	SplitColumn: typing.Any
	SplitHorizontal: typing.Any
	SplitRow: typing.Any
	SplitVertical: typing.Any
	TabRatio: typing.Any
	Top: typing.Any
	Type: typing.Any
	UsableHeight: typing.Any
	UsableWidth: typing.Any
	View: typing.Any
	Visible: typing.Any
	VisibleRange: typing.Any
	Width: typing.Any
	WindowNumber: typing.Any
	WindowState: typing.Any
	Zoom: typing.Any
	_DisplayRightToLeft: typing.Any
	def __iter__(self):
		...

class IWindows(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	SyncScrollingSideBySide: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IWorkbookConnection(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DataFeedConnection: typing.Any
	Description: typing.Any
	InModel: typing.Any
	ModelConnection: typing.Any
	ModelTables: typing.Any
	Name: typing.Any
	ODBCConnection: typing.Any
	OLEDBConnection: typing.Any
	Parent: typing.Any
	Ranges: typing.Any
	RefreshWithRefreshAll: typing.Any
	TextConnection: typing.Any
	Type: typing.Any
	WorksheetDataConnection: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IWorkbookEvents(typing.Protocol):

	def __iter__(self):
		...

class IWorkbookQuery(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Description: typing.Any
	Formula: typing.Any
	Name: typing.Any
	Parent: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IWorksheetDataConnection(typing.Protocol):

	Application: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IWorksheetFunction(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class IWorksheetView(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	DisplayFormulas: typing.Any
	DisplayGridlines: typing.Any
	DisplayHeadings: typing.Any
	DisplayOutline: typing.Any
	DisplayZeros: typing.Any
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class IWorksheets(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	HPageBreaks: typing.Any
	Parent: typing.Any
	VPageBreaks: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IXPath(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Map: typing.Any
	Parent: typing.Any
	Repeating: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IXmlDataBinding(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	SourceUrl: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IXmlMap(typing.Protocol):

	AdjustColumnWidth: typing.Any
	AppendOnImport: typing.Any
	Application: typing.Any
	Creator: typing.Any
	DataBinding: typing.Any
	IsExportable: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PreserveColumnFilter: typing.Any
	PreserveNumberFormatting: typing.Any
	RootElementName: typing.Any
	RootElementNamespace: typing.Any
	SaveDataSourceDefinition: typing.Any
	Schemas: typing.Any
	ShowImportExportValidationErrors: typing.Any
	WorkbookConnection: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IXmlMaps(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IXmlNamespace(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Prefix: typing.Any
	Uri: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class IXmlNamespaces(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IXmlSchema(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
	Name: typing.Any
	Namespace: typing.Any
	Parent: typing.Any
	XML: typing.Any
	def __iter__(self):
		...

class IXmlSchemas(typing.Protocol):

	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Icon(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
		# Method 'Parent' returns object of type 'IconSet'
	Parent: IconSet
	def __iter__(self):
		...

class IconCriteria(typing.Protocol):

	# Result is of type IconCriterion
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> IconCriterion:
		...
	# Result is of type IconCriterion
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> IconCriterion:
		...
	Count: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> IconCriterion:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IconCriterion(typing.Protocol):

		# Method 'Icon' returns enumeration of type 'XlIcon'
	Icon: XlIcon
	Index: typing.Any
	Operator: typing.Any
		# Method 'Type' returns enumeration of type 'XlConditionValueTypes'
	Type: XlConditionValueTypes
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class IconSet(typing.Protocol):

	# Result is of type Icon
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Icon:
		...
	# Result is of type Icon
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Icon:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'ID' returns enumeration of type 'XlIconSet'
	ID: XlIconSet
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Icon:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class IconSetCondition(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Formula: typing.Any
		# Method 'IconCriteria' returns object of type 'IconCriteria'
	IconCriteria: IconCriteria
	IconSet: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	PercentileValues: typing.Any
	Priority: typing.Any
	ReverseOrder: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	ShowIconOnly: typing.Any
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class IconSets(typing.Protocol):

	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Interior(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
	ColorIndex: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Gradient: typing.Any
	InvertIfNegative: typing.Any
	Parent: typing.Any
	Pattern: typing.Any
	PatternColor: typing.Any
	PatternColorIndex: typing.Any
	PatternThemeColor: typing.Any
	PatternTintAndShade: typing.Any
	ThemeColor: typing.Any
	TintAndShade: typing.Any
	def __iter__(self):
		...

class Label(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class Labels(typing.Protocol):

	# Result is of type Label
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Label:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class LeaderLines(typing.Protocol):

	def Delete(self) -> None:
		...
	def Select(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Parent: typing.Any
	def __iter__(self):
		...

class Legend(typing.Protocol):

	def Clear(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def LegendEntries(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Height: typing.Any
	IncludeInLayout: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlLegendPosition'
	Position: XlLegendPosition
	Shadow: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class LegendEntries(typing.Protocol):

	# Result is of type LegendEntry
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> LegendEntry:
		...
	# Result is of type LegendEntry
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> LegendEntry:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> LegendEntry:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class LegendEntry(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
		# Method 'LegendKey' returns object of type 'LegendKey'
	LegendKey: LegendKey
	Parent: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class LegendKey(typing.Protocol):

	def ClearFormats(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	InvertIfNegative: typing.Any
	Left: typing.Any
	MarkerBackgroundColor: typing.Any
		# Method 'MarkerBackgroundColorIndex' returns enumeration of type 'XlColorIndex'
	MarkerBackgroundColorIndex: XlColorIndex
	MarkerForegroundColor: typing.Any
		# Method 'MarkerForegroundColorIndex' returns enumeration of type 'XlColorIndex'
	MarkerForegroundColorIndex: XlColorIndex
	MarkerSize: typing.Any
		# Method 'MarkerStyle' returns enumeration of type 'XlMarkerStyle'
	MarkerStyle: XlMarkerStyle
	Parent: typing.Any
	PictureType: typing.Any
	PictureUnit: typing.Any
	PictureUnit2: typing.Any
	Shadow: typing.Any
	Smooth: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class Line(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class LineFormat(typing.Protocol):

	Application: typing.Any
		# Method 'BackColor' returns object of type 'ColorFormat'
	BackColor: ColorFormat
		# Method 'BeginArrowheadLength' returns enumeration of type 'MsoArrowheadLength'
	BeginArrowheadLength: MsoArrowheadLength
		# Method 'BeginArrowheadStyle' returns enumeration of type 'MsoArrowheadStyle'
	BeginArrowheadStyle: MsoArrowheadStyle
		# Method 'BeginArrowheadWidth' returns enumeration of type 'MsoArrowheadWidth'
	BeginArrowheadWidth: MsoArrowheadWidth
	Creator: typing.Any
		# Method 'DashStyle' returns enumeration of type 'MsoLineDashStyle'
	DashStyle: MsoLineDashStyle
		# Method 'EndArrowheadLength' returns enumeration of type 'MsoArrowheadLength'
	EndArrowheadLength: MsoArrowheadLength
		# Method 'EndArrowheadStyle' returns enumeration of type 'MsoArrowheadStyle'
	EndArrowheadStyle: MsoArrowheadStyle
		# Method 'EndArrowheadWidth' returns enumeration of type 'MsoArrowheadWidth'
	EndArrowheadWidth: MsoArrowheadWidth
		# Method 'ForeColor' returns object of type 'ColorFormat'
	ForeColor: ColorFormat
		# Method 'InsetPen' returns enumeration of type 'MsoTriState'
	InsetPen: MsoTriState
	Parent: typing.Any
		# Method 'Pattern' returns enumeration of type 'MsoPatternType'
	Pattern: MsoPatternType
		# Method 'Style' returns enumeration of type 'MsoLineStyle'
	Style: MsoLineStyle
	Transparency: typing.Any
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	Weight: typing.Any
	def __iter__(self):
		...

class LinearGradient(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'ColorStops' returns object of type 'ColorStops'
	ColorStops: ColorStops
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Degree: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class Lines(typing.Protocol):

	# Result is of type Line
	def Add(self, X1: float=defaultNamedNotOptArg, Y1: float=defaultNamedNotOptArg, X2: float=defaultNamedNotOptArg, Y2: float=defaultNamedNotOptArg) -> Line:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ArrowHeadLength: typing.Any
	ArrowHeadStyle: typing.Any
	ArrowHeadWidth: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class LinkFormat(typing.Protocol):

	def Update(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoUpdate: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Locked: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ListBox(typing.Protocol):

	def AddItem(self, Text: typing.Any=defaultNamedNotOptArg, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# The method GetList is actually a property, but must be used as a method to correctly pass the arguments
	def GetList(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def GetSelected(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def RemoveAllItems(self) -> typing.Any:
		...
	def RemoveItem(self, Index: int=defaultNamedNotOptArg, Count: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	# The method SetList is actually a property, but must be used as a method to correctly pass the arguments
	def SetList(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	# The method SetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def SetSelected(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	LinkedObject: typing.Any
	List: typing.Any
	ListCount: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	MultiSelect: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ListBoxes(typing.Protocol):

	# Result is of type ListBox
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> ListBox:
		...
	def AddItem(self, Text: typing.Any=defaultNamedNotOptArg, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# The method GetList is actually a property, but must be used as a method to correctly pass the arguments
	def GetList(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def GetSelected(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def RemoveAllItems(self) -> typing.Any:
		...
	def RemoveItem(self, Index: int=defaultNamedNotOptArg, Count: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	# The method SetList is actually a property, but must be used as a method to correctly pass the arguments
	def SetList(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	# The method SetSelected is actually a property, but must be used as a method to correctly pass the arguments
	def SetSelected(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	List: typing.Any
	ListFillRange: typing.Any
	ListIndex: typing.Any
	Locked: typing.Any
	MultiSelect: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Selected: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ListColumn(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataBodyRange' returns object of type 'Range'
	DataBodyRange: Range
	Index: typing.Any
		# Method 'ListDataFormat' returns object of type 'ListDataFormat'
	ListDataFormat: ListDataFormat
	Name: typing.Any
	Parent: typing.Any
		# Method 'Range' returns object of type 'Range'
	Range: Range
	SharePointFormula: typing.Any
		# Method 'Total' returns object of type 'Range'
	Total: Range
		# Method 'TotalsCalculation' returns enumeration of type 'XlTotalsCalculation'
	TotalsCalculation: XlTotalsCalculation
		# Method 'XPath' returns object of type 'XPath'
	XPath: XPath
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ListColumns(typing.Protocol):

	# Result is of type ListColumn
	def Add(self, Position: typing.Any=defaultNamedOptArg) -> ListColumn:
		...
	# Result is of type ListColumn
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ListColumn:
		...
	# Result is of type ListColumn
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ListColumn:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ListColumn:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ListDataFormat(typing.Protocol):

	AllowFillIn: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Choices: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DecimalPlaces: typing.Any
	DefaultValue: typing.Any
	IsPercent: typing.Any
	MaxCharacters: typing.Any
	MaxNumber: typing.Any
	MinNumber: typing.Any
	Parent: typing.Any
	ReadOnly: typing.Any
	Required: typing.Any
		# Method 'Type' returns enumeration of type 'XlListDataType'
	Type: XlListDataType
		# Method '_Default' returns enumeration of type 'XlListDataType'
	_Default: XlListDataType
	lcid: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ListObject(typing.Protocol):

	def Delete(self) -> None:
		...
	def ExportToVisio(self) -> None:
		...
	def Publish(self, Target: typing.Any=defaultNamedNotOptArg, LinkSource: bool=defaultNamedNotOptArg) -> str:
		...
	def Refresh(self) -> None:
		...
	def Resize(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def Unlink(self) -> None:
		...
	def Unlist(self) -> None:
		...
	def UpdateChanges(self, iConflictType: XlListConflict=0) -> None:
		...
	Active: typing.Any
	AlternativeText: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoFilter' returns object of type 'AutoFilter'
	AutoFilter: AutoFilter
	Comment: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataBodyRange' returns object of type 'Range'
	DataBodyRange: Range
	DisplayName: typing.Any
	DisplayRightToLeft: typing.Any
		# Method 'HeaderRowRange' returns object of type 'Range'
	HeaderRowRange: Range
		# Method 'InsertRowRange' returns object of type 'Range'
	InsertRowRange: Range
		# Method 'ListColumns' returns object of type 'ListColumns'
	ListColumns: ListColumns
		# Method 'ListRows' returns object of type 'ListRows'
	ListRows: ListRows
	Name: typing.Any
	Parent: typing.Any
		# Method 'QueryTable' returns object of type 'QueryTable'
	QueryTable: QueryTable
		# Method 'Range' returns object of type 'Range'
	Range: Range
	SharePointURL: typing.Any
	ShowAutoFilter: typing.Any
	ShowAutoFilterDropDown: typing.Any
	ShowHeaders: typing.Any
	ShowTableStyleColumnStripes: typing.Any
	ShowTableStyleFirstColumn: typing.Any
	ShowTableStyleLastColumn: typing.Any
	ShowTableStyleRowStripes: typing.Any
	ShowTotals: typing.Any
		# Method 'Slicers' returns object of type 'Slicers'
	Slicers: Slicers
		# Method 'Sort' returns object of type 'Sort'
	Sort: Sort
		# Method 'SourceType' returns enumeration of type 'XlListObjectSourceType'
	SourceType: XlListObjectSourceType
	Summary: typing.Any
		# Method 'TableObject' returns object of type 'TableObject'
	TableObject: TableObject
	TableStyle: typing.Any
		# Method 'TotalsRowRange' returns object of type 'Range'
	TotalsRowRange: Range
		# Method 'XmlMap' returns object of type 'XmlMap'
	XmlMap: XmlMap
		# Method '_AutoFilter' returns object of type 'AutoFilter'
	_AutoFilter: AutoFilter
	_Default: typing.Any
		# Method '_Sort' returns object of type 'Sort'
	_Sort: Sort
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ListObjects(typing.Protocol):

	# Result is of type ListObject
	def Add(self, SourceType: XlListObjectSourceType=1, Source: typing.Any=defaultNamedNotOptArg, LinkSource: typing.Any=defaultNamedNotOptArg, XlListObjectHasHeaders: XlYesNoGuess=0
			, Destination: typing.Any=defaultNamedOptArg, TableStyleName: typing.Any=defaultNamedOptArg) -> ListObject:
		...
	# Result is of type ListObject
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ListObject:
		...
	# Result is of type ListObject
	def _Add(self, SourceType: XlListObjectSourceType=1, Source: typing.Any=defaultNamedNotOptArg, LinkSource: typing.Any=defaultNamedNotOptArg, XlListObjectHasHeaders: XlYesNoGuess=0
			, Destination: typing.Any=defaultNamedOptArg) -> ListObject:
		...
	# Result is of type ListObject
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ListObject:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ListObject:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ListRow(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
	InvalidData: typing.Any
	Parent: typing.Any
		# Method 'Range' returns object of type 'Range'
	Range: Range
	def __iter__(self):
		...

class ListRows(typing.Protocol):

	# Result is of type ListRow
	def Add(self, Position: typing.Any=defaultNamedOptArg, AlwaysInsert: typing.Any=defaultNamedOptArg) -> ListRow:
		...
	# Result is of type ListRow
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ListRow:
		...
	# Result is of type ListRow
	def _Add(self, Position: typing.Any=defaultNamedOptArg) -> ListRow:
		...
	# Result is of type ListRow
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ListRow:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ListRow:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Mailer(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	BCCRecipients: typing.Any
	CCRecipients: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enclosures: typing.Any
	Parent: typing.Any
	Received: typing.Any
	SendDateTime: typing.Any
	Sender: typing.Any
	Subject: typing.Any
	ToRecipients: typing.Any
	WhichAddress: typing.Any
	def __iter__(self):
		...

class Menu(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Index: typing.Any
		# Method 'MenuItems' returns object of type 'MenuItems'
	MenuItems: MenuItems
	Parent: typing.Any
	def __iter__(self):
		...

class MenuBar(typing.Protocol):

	def Activate(self) -> None:
		...
	def Delete(self) -> None:
		...
	def Reset(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BuiltIn: typing.Any
	Caption: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
		# Method 'Menus' returns object of type 'Menus'
	Menus: Menus
	Parent: typing.Any
	def __iter__(self):
		...

class MenuBars(typing.Protocol):

	# Result is of type MenuBar
	def Add(self, Name: typing.Any=defaultNamedOptArg) -> MenuBar:
		...
	# Result is of type MenuBar
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> MenuBar:
		...
	# Result is of type MenuBar
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> MenuBar:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> MenuBar:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class MenuItem(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
	Checked: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	HelpContextID: typing.Any
	HelpFile: typing.Any
	Index: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	StatusBar: typing.Any
	def __iter__(self):
		...

class MenuItems(typing.Protocol):

	# Result is of type MenuItem
	def Add(self, Caption: str=defaultNamedNotOptArg, OnAction: typing.Any=defaultNamedOptArg, ShortcutKey: typing.Any=defaultNamedOptArg, Before: typing.Any=defaultNamedOptArg
			, Restore: typing.Any=defaultNamedOptArg, StatusBar: typing.Any=defaultNamedOptArg, HelpFile: typing.Any=defaultNamedOptArg, HelpContextID: typing.Any=defaultNamedOptArg) -> MenuItem:
		...
	# Result is of type Menu
	def AddMenu(self, Caption: str=defaultNamedNotOptArg, Before: typing.Any=defaultNamedOptArg, Restore: typing.Any=defaultNamedOptArg) -> Menu:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Menus(typing.Protocol):

	# Result is of type Menu
	def Add(self, Caption: str=defaultNamedNotOptArg, Before: typing.Any=defaultNamedOptArg, Restore: typing.Any=defaultNamedOptArg) -> Menu:
		...
	# Result is of type Menu
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Menu:
		...
	# Result is of type Menu
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Menu:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Menu:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Model(typing.Protocol):

	# Result is of type WorkbookConnection
	def AddConnection(self, ConnectionToDataSource: WorkbookConnection=defaultNamedNotOptArg) -> WorkbookConnection:
		...
	# Result is of type WorkbookConnection
	def CreateModelWorkbookConnection(self, ModelTable: typing.Any=defaultNamedNotOptArg) -> WorkbookConnection:
		...
	# Result is of type ModelFormatCurrency
	# The method GetModelFormatCurrency is actually a property, but must be used as a method to correctly pass the arguments
	def GetModelFormatCurrency(self, Symbol: typing.Any=defaultNamedOptArg, DecimalPlaces: typing.Any=defaultNamedOptArg) -> ModelFormatCurrency:
		...
	# Result is of type ModelFormatDate
	# The method GetModelFormatDate is actually a property, but must be used as a method to correctly pass the arguments
	def GetModelFormatDate(self, FormatString: typing.Any=defaultNamedOptArg) -> ModelFormatDate:
		...
	# Result is of type ModelFormatDecimalNumber
	# The method GetModelFormatDecimalNumber is actually a property, but must be used as a method to correctly pass the arguments
	def GetModelFormatDecimalNumber(self, UseThousandSeparator: typing.Any=defaultNamedOptArg, DecimalPlaces: typing.Any=defaultNamedOptArg) -> ModelFormatDecimalNumber:
		...
	# Result is of type ModelFormatPercentageNumber
	# The method GetModelFormatPercentageNumber is actually a property, but must be used as a method to correctly pass the arguments
	def GetModelFormatPercentageNumber(self, UseThousandSeparator: typing.Any=defaultNamedOptArg, DecimalPlaces: typing.Any=defaultNamedOptArg) -> ModelFormatPercentageNumber:
		...
	# Result is of type ModelFormatScientificNumber
	# The method GetModelFormatScientificNumber is actually a property, but must be used as a method to correctly pass the arguments
	def GetModelFormatScientificNumber(self, DecimalPlaces: typing.Any=defaultNamedOptArg) -> ModelFormatScientificNumber:
		...
	# Result is of type ModelFormatWholeNumber
	# The method GetModelFormatWholeNumber is actually a property, but must be used as a method to correctly pass the arguments
	def GetModelFormatWholeNumber(self, UseThousandSeparator: typing.Any=defaultNamedOptArg) -> ModelFormatWholeNumber:
		...
	def Initialize(self) -> None:
		...
	def Refresh(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataModelConnection' returns object of type 'WorkbookConnection'
	DataModelConnection: WorkbookConnection
		# Method 'ModelFormatBoolean' returns object of type 'ModelFormatBoolean'
	ModelFormatBoolean: ModelFormatBoolean
		# Method 'ModelFormatCurrency' returns object of type 'ModelFormatCurrency'
	ModelFormatCurrency: ModelFormatCurrency
		# Method 'ModelFormatDate' returns object of type 'ModelFormatDate'
	ModelFormatDate: ModelFormatDate
		# Method 'ModelFormatDecimalNumber' returns object of type 'ModelFormatDecimalNumber'
	ModelFormatDecimalNumber: ModelFormatDecimalNumber
		# Method 'ModelFormatGeneral' returns object of type 'ModelFormatGeneral'
	ModelFormatGeneral: ModelFormatGeneral
		# Method 'ModelFormatPercentageNumber' returns object of type 'ModelFormatPercentageNumber'
	ModelFormatPercentageNumber: ModelFormatPercentageNumber
		# Method 'ModelFormatScientificNumber' returns object of type 'ModelFormatScientificNumber'
	ModelFormatScientificNumber: ModelFormatScientificNumber
		# Method 'ModelFormatWholeNumber' returns object of type 'ModelFormatWholeNumber'
	ModelFormatWholeNumber: ModelFormatWholeNumber
		# Method 'ModelMeasures' returns object of type 'ModelMeasures'
	ModelMeasures: ModelMeasures
		# Method 'ModelRelationships' returns object of type 'ModelRelationships'
	ModelRelationships: ModelRelationships
		# Method 'ModelTables' returns object of type 'ModelTables'
	ModelTables: ModelTables
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class Model3DFormat(typing.Protocol):

	def IncrementRotationX(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotationY(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotationZ(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def ResetModel(self, ResetSize: bool=False) -> None:
		...
	Application: typing.Any
		# Method 'AutoFit' returns enumeration of type 'MsoTriState'
	AutoFit: MsoTriState
	CameraPositionX: typing.Any
	CameraPositionY: typing.Any
	CameraPositionZ: typing.Any
	Creator: typing.Any
	FieldOfView: typing.Any
	LookAtPointX: typing.Any
	LookAtPointY: typing.Any
	LookAtPointZ: typing.Any
	Parent: typing.Any
	RotationX: typing.Any
	RotationY: typing.Any
	RotationZ: typing.Any
	def __iter__(self):
		...

class ModelChanges(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'ColumnsAdded' returns object of type 'ModelColumnNames'
	ColumnsAdded: ModelColumnNames
		# Method 'ColumnsChanged' returns object of type 'ModelColumnChanges'
	ColumnsChanged: ModelColumnChanges
		# Method 'ColumnsDeleted' returns object of type 'ModelColumnNames'
	ColumnsDeleted: ModelColumnNames
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'MeasuresAdded' returns object of type 'ModelMeasureNames'
	MeasuresAdded: ModelMeasureNames
	Parent: typing.Any
	RelationshipChange: typing.Any
		# Method 'Source' returns enumeration of type 'XlModelChangeSource'
	Source: XlModelChangeSource
		# Method 'TableNamesChanged' returns object of type 'ModelTableNameChanges'
	TableNamesChanged: ModelTableNameChanges
		# Method 'TablesAdded' returns object of type 'ModelTableNames'
	TablesAdded: ModelTableNames
		# Method 'TablesDeleted' returns object of type 'ModelTableNames'
	TablesDeleted: ModelTableNames
		# Method 'TablesModified' returns object of type 'ModelTableNames'
	TablesModified: ModelTableNames
	UnknownChange: typing.Any
	def __iter__(self):
		...

class ModelColumnChange(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	ColumnName: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	TableName: typing.Any
	def __iter__(self):
		...

class ModelColumnChanges(typing.Protocol):

	# Result is of type ModelColumnChange
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelColumnChange:
		...
	# Result is of type ModelColumnChange
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelColumnChange:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelColumnChange:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelColumnName(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	ColumnName: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	TableName: typing.Any
	def __iter__(self):
		...

class ModelColumnNames(typing.Protocol):

	# Result is of type ModelColumnName
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelColumnName:
		...
	# Result is of type ModelColumnName
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelColumnName:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelColumnName:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelConnection(typing.Protocol):

	ADOConnection: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'CalculatedMembers' returns object of type 'CalculatedMembers'
	CalculatedMembers: CalculatedMembers
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class ModelFormatBoolean(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class ModelFormatCurrency(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DecimalPlaces: typing.Any
	Parent: typing.Any
	Symbol: typing.Any
	def __iter__(self):
		...

class ModelFormatDate(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	FormatString: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ModelFormatDecimalNumber(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DecimalPlaces: typing.Any
	Parent: typing.Any
	UseThousandSeparator: typing.Any
	def __iter__(self):
		...

class ModelFormatGeneral(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class ModelFormatPercentageNumber(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DecimalPlaces: typing.Any
	Parent: typing.Any
	UseThousandSeparator: typing.Any
	def __iter__(self):
		...

class ModelFormatScientificNumber(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DecimalPlaces: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ModelFormatWholeNumber(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	UseThousandSeparator: typing.Any
	def __iter__(self):
		...

class ModelMeasure(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AssociatedTable' returns object of type 'ModelTable'
	AssociatedTable: ModelTable
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Description: typing.Any
	FormatInformation: typing.Any
	Formula: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ModelMeasureName(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	MeasureName: typing.Any
	Parent: typing.Any
	TableName: typing.Any
	def __iter__(self):
		...

class ModelMeasureNames(typing.Protocol):

	# Result is of type ModelMeasureName
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelMeasureName:
		...
	# Result is of type ModelMeasureName
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelMeasureName:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelMeasureName:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelMeasures(typing.Protocol):

	# Result is of type ModelMeasure
	def Add(self, MeasureName: str=defaultNamedNotOptArg, AssociatedTable: ModelTable=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg, FormatInformation: typing.Any=defaultNamedNotOptArg
			, Description: typing.Any=defaultNamedOptArg) -> ModelMeasure:
		...
	# Result is of type ModelMeasure
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelMeasure:
		...
	# Result is of type ModelMeasure
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelMeasure:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelMeasure:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelRelationship(typing.Protocol):

	def Delete(self) -> None:
		...
	Active: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'ForeignKeyColumn' returns object of type 'ModelTableColumn'
	ForeignKeyColumn: ModelTableColumn
		# Method 'ForeignKeyTable' returns object of type 'ModelTable'
	ForeignKeyTable: ModelTable
	Parent: typing.Any
		# Method 'PrimaryKeyColumn' returns object of type 'ModelTableColumn'
	PrimaryKeyColumn: ModelTableColumn
		# Method 'PrimaryKeyTable' returns object of type 'ModelTable'
	PrimaryKeyTable: ModelTable
	def __iter__(self):
		...

class ModelRelationships(typing.Protocol):

	# Result is of type ModelRelationship
	def Add(self, ForeignKeyColumn: ModelTableColumn=defaultNamedNotOptArg, PrimaryKeyColumn: ModelTableColumn=defaultNamedNotOptArg) -> ModelRelationship:
		...
	def DetectRelationships(self, PivotTable: PivotTable=defaultNamedNotOptArg) -> None:
		...
	# Result is of type ModelRelationship
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelRelationship:
		...
	# Result is of type ModelRelationship
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelRelationship:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelRelationship:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelTable(typing.Protocol):

	def Dummy1(self, NewName: str=defaultNamedNotOptArg) -> None:
		...
	def Refresh(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'ModelTableColumns' returns object of type 'ModelTableColumns'
	ModelTableColumns: ModelTableColumns
	Name: typing.Any
	Parent: typing.Any
	RecordCount: typing.Any
	SourceName: typing.Any
		# Method 'SourceWorkbookConnection' returns object of type 'WorkbookConnection'
	SourceWorkbookConnection: WorkbookConnection
	def __iter__(self):
		...

class ModelTableColumn(typing.Protocol):

	def Dummy1(self, NewName: str=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DataType: typing.Any
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ModelTableColumns(typing.Protocol):

	# Result is of type ModelTableColumn
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTableColumn:
		...
	# Result is of type ModelTableColumn
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTableColumn:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTableColumn:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelTableNameChange(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	TableNameNew: typing.Any
	TableNameOld: typing.Any
	def __iter__(self):
		...

class ModelTableNameChanges(typing.Protocol):

	# Result is of type ModelTableNameChange
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTableNameChange:
		...
	# Result is of type ModelTableNameChange
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTableNameChange:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTableNameChange:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelTableNames(typing.Protocol):

	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> str:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> str:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ModelTables(typing.Protocol):

	# Result is of type ModelTable
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTable:
		...
	# Result is of type ModelTable
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTable:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ModelTable:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Module(typing.Protocol):

	def Activate(self) -> None:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def InsertFile(self, Filename: typing.Any=defaultNamedNotOptArg, Merge: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg) -> None:
		...
	def SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	def Unprotect(self, Password: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs_(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CodeName: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
	Name: typing.Any
	Next: typing.Any
	OnDoubleClick: typing.Any
	OnSheetActivate: typing.Any
	OnSheetDeactivate: typing.Any
		# Method 'PageSetup' returns object of type 'PageSetup'
	PageSetup: PageSetup
	Parent: typing.Any
	Previous: typing.Any
	ProtectContents: typing.Any
	ProtectionMode: typing.Any
		# Method 'Shapes' returns object of type 'Shapes'
	Shapes: Shapes
		# Method 'Visible' returns enumeration of type 'XlSheetVisibility'
	Visible: XlSheetVisibility
	_CodeName: typing.Any
	def __iter__(self):
		...

class ModuleView(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class Modules(typing.Protocol):

	# Result is of type Module
	def Add(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg) -> Module:
		...
	def Add2(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, NewLayout: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg, IgnorePrintAreas: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
	Parent: typing.Any
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
	Visible: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class MultiThreadedCalculation(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Parent: typing.Any
	ThreadCount: typing.Any
		# Method 'ThreadMode' returns enumeration of type 'XlThreadMode'
	ThreadMode: XlThreadMode
	def __iter__(self):
		...

class Name(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Category: typing.Any
	CategoryLocal: typing.Any
	Comment: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
		# Method 'MacroType' returns enumeration of type 'XlXLMMacroType'
	MacroType: XlXLMMacroType
	Name: typing.Any
	NameLocal: typing.Any
	Parent: typing.Any
	RefersTo: typing.Any
	RefersToLocal: typing.Any
	RefersToR1C1: typing.Any
	RefersToR1C1Local: typing.Any
		# Method 'RefersToRange' returns object of type 'Range'
	RefersToRange: Range
	ShortcutKey: typing.Any
	ValidWorkbookParameter: typing.Any
	Value: typing.Any
	Visible: typing.Any
	WorkbookParameter: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class NamedSheetView(typing.Protocol):
	# This class is creatable by the name 'MSGraph.Application.8'

	def Activate(self) -> None:
		...
	def Delete(self) -> None:
		...
	# Result is of type NamedSheetView
	def Duplicate(self, Name: typing.Any=defaultNamedOptArg) -> NamedSheetView:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class NamedSheetViewCollection(typing.Protocol):

	# Result is of type NamedSheetView
	def Add(self, Name: str=defaultNamedNotOptArg) -> NamedSheetView:
		...
	# Result is of type NamedSheetView
	def EnterTemporary(self) -> NamedSheetView:
		...
	def Exit(self) -> None:
		...
	# Result is of type NamedSheetView
	def GetActive(self) -> NamedSheetView:
		...
	# Result is of type NamedSheetView
	def GetItem(self, Name: str=defaultNamedNotOptArg) -> NamedSheetView:
		...
	# Result is of type NamedSheetView
	def GetItemAt(self, Index: int=defaultNamedNotOptArg) -> NamedSheetView:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Names(typing.Protocol):

	# Result is of type Name
	def Add(self, Name: typing.Any=defaultNamedOptArg, RefersTo: typing.Any=defaultNamedOptArg, Visible: typing.Any=defaultNamedOptArg, MacroType: typing.Any=defaultNamedOptArg
			, ShortcutKey: typing.Any=defaultNamedOptArg, Category: typing.Any=defaultNamedOptArg, NameLocal: typing.Any=defaultNamedOptArg, RefersToLocal: typing.Any=defaultNamedOptArg, CategoryLocal: typing.Any=defaultNamedOptArg
			, RefersToR1C1: typing.Any=defaultNamedOptArg, RefersToR1C1Local: typing.Any=defaultNamedOptArg) -> Name:
		...
	# Result is of type Name
	def Item(self, Index: typing.Any=defaultNamedOptArg, IndexLocal: typing.Any=defaultNamedOptArg, RefersTo: typing.Any=defaultNamedOptArg) -> Name:
		...
	# Result is of type Name
	def _Default(self, Index: typing.Any=defaultNamedOptArg, IndexLocal: typing.Any=defaultNamedOptArg, RefersTo: typing.Any=defaultNamedOptArg) -> Name:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedOptArg, IndexLocal: typing.Any=defaultNamedOptArg, RefersTo: typing.Any=defaultNamedOptArg) -> Name:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class NegativeBarFormat(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	BorderColor: typing.Any
		# Method 'BorderColorType' returns enumeration of type 'XlDataBarNegativeColorType'
	BorderColorType: XlDataBarNegativeColorType
	Color: typing.Any
		# Method 'ColorType' returns enumeration of type 'XlDataBarNegativeColorType'
	ColorType: XlDataBarNegativeColorType
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class ODBCConnection(typing.Protocol):

	def CancelRefresh(self) -> None:
		...
	def Refresh(self) -> None:
		...
	def SaveAsODC(self, ODCFileName: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg, Keywords: typing.Any=defaultNamedOptArg) -> None:
		...
	AlwaysUseConnectionFile: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BackgroundQuery: typing.Any
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EnableRefresh: typing.Any
	Parent: typing.Any
	RefreshDate: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	Refreshing: typing.Any
		# Method 'RobustConnect' returns enumeration of type 'XlRobustConnect'
	RobustConnect: XlRobustConnect
	SavePassword: typing.Any
		# Method 'ServerCredentialsMethod' returns enumeration of type 'XlCredentialsMethod'
	ServerCredentialsMethod: XlCredentialsMethod
	ServerSSOApplicationID: typing.Any
	SourceConnectionFile: typing.Any
	SourceData: typing.Any
	SourceDataFile: typing.Any
	def __iter__(self):
		...

class ODBCError(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	ErrorString: typing.Any
	Parent: typing.Any
	SqlState: typing.Any
	def __iter__(self):
		...

class ODBCErrors(typing.Protocol):

	# Result is of type ODBCError
	def Item(self, Index: int=defaultNamedNotOptArg) -> ODBCError:
		...
	# Result is of type ODBCError
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> ODBCError:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> ODBCError:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class OLEDBConnection(typing.Protocol):

	def CancelRefresh(self) -> None:
		...
	def MakeConnection(self) -> None:
		...
	def Reconnect(self) -> None:
		...
	def Refresh(self) -> None:
		...
	def SaveAsODC(self, ODCFileName: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg, Keywords: typing.Any=defaultNamedOptArg) -> None:
		...
	ADOConnection: typing.Any
	AlwaysUseConnectionFile: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BackgroundQuery: typing.Any
		# Method 'CalculatedMembers' returns object of type 'CalculatedMembers'
	CalculatedMembers: CalculatedMembers
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EnableRefresh: typing.Any
	IsConnected: typing.Any
	LocalConnection: typing.Any
	LocaleID: typing.Any
	MaintainConnection: typing.Any
	MaxDrillthroughRecords: typing.Any
	OLAP: typing.Any
	Parent: typing.Any
	RefreshDate: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	Refreshing: typing.Any
	RetrieveInOfficeUILang: typing.Any
		# Method 'RobustConnect' returns enumeration of type 'XlRobustConnect'
	RobustConnect: XlRobustConnect
	SavePassword: typing.Any
		# Method 'ServerCredentialsMethod' returns enumeration of type 'XlCredentialsMethod'
	ServerCredentialsMethod: XlCredentialsMethod
	ServerFillColor: typing.Any
	ServerFontStyle: typing.Any
	ServerNumberFormat: typing.Any
	ServerSSOApplicationID: typing.Any
	ServerTextColor: typing.Any
	SourceConnectionFile: typing.Any
	SourceDataFile: typing.Any
	UseLocalConnection: typing.Any
	def __iter__(self):
		...

class OLEDBError(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	ErrorString: typing.Any
	Native: typing.Any
	Number: typing.Any
	Parent: typing.Any
	SqlState: typing.Any
	Stage: typing.Any
	def __iter__(self):
		...

class OLEDBErrors(typing.Protocol):

	# Result is of type OLEDBError
	def Item(self, Index: int=defaultNamedNotOptArg) -> OLEDBError:
		...
	# Result is of type OLEDBError
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> OLEDBError:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> OLEDBError:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class OLEFormat(typing.Protocol):

	def Activate(self) -> None:
		...
	def Verb(self, Verb: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Object: typing.Any
	Parent: typing.Any
	progID: typing.Any
	def __iter__(self):
		...

class OLEObjectEvents:

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnQueryInterface(self, riid: typing.Any=defaultNamedNotOptArg, ppvObj: None=pythoncom.Missing):
#	def OnAddRef(self):
#	def OnRelease(self):
#	def OnGetTypeInfoCount(self, pctinfo: int=pythoncom.Missing):
#	def OnGetTypeInfo(self, itinfo: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, pptinfo: None=pythoncom.Missing):
#	def OnGetIDsOfNames(self, riid: typing.Any=defaultNamedNotOptArg, rgszNames: int=defaultNamedNotOptArg, cNames: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg
#			, rgdispid: int=pythoncom.Missing):
#	def OnInvoke(self, dispidMember: int=defaultNamedNotOptArg, riid: typing.Any=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, wFlags: int=defaultNamedNotOptArg
#			, pdispparams: typing.Any=defaultNamedNotOptArg, pvarResult: typing.Any=pythoncom.Missing, pexcepinfo: typing.Any=pythoncom.Missing, puArgErr: int=pythoncom.Missing):
#	def OnGotFocus(self):
#	def OnLostFocus(self):
	...


class OLEObjects(typing.Protocol):

	# Result is of type OLEObject
	def Add(self, ClassType: typing.Any=defaultNamedOptArg, Filename: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg, DisplayAsIcon: typing.Any=defaultNamedOptArg
			, IconFileName: typing.Any=defaultNamedOptArg, IconIndex: typing.Any=defaultNamedOptArg, IconLabel: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg
			, Width: typing.Any=defaultNamedOptArg, Height: typing.Any=defaultNamedOptArg) -> OLEObject:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoLoad: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SourceName: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class OptionButton(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
		# Method 'GroupBox' returns object of type 'GroupBox'
	GroupBox: GroupBox
	Height: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class OptionButtons(typing.Protocol):

	# Result is of type OptionButton
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> OptionButton:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	Accelerator: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
		# Method 'GroupBox' returns object of type 'GroupBox'
	GroupBox: GroupBox
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	PhoneticAccelerator: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Outline(typing.Protocol):

	def ShowLevels(self, RowLevels: typing.Any=defaultNamedOptArg, ColumnLevels: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutomaticStyles: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'SummaryColumn' returns enumeration of type 'XlSummaryColumn'
	SummaryColumn: XlSummaryColumn
		# Method 'SummaryRow' returns enumeration of type 'XlSummaryRow'
	SummaryRow: XlSummaryRow
	def __iter__(self):
		...

class Oval(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class Ovals(typing.Protocol):

	# Result is of type Oval
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Oval:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Page(typing.Protocol):

		# Method 'CenterFooter' returns object of type 'HeaderFooter'
	CenterFooter: HeaderFooter
		# Method 'CenterHeader' returns object of type 'HeaderFooter'
	CenterHeader: HeaderFooter
		# Method 'LeftFooter' returns object of type 'HeaderFooter'
	LeftFooter: HeaderFooter
		# Method 'LeftHeader' returns object of type 'HeaderFooter'
	LeftHeader: HeaderFooter
		# Method 'RightFooter' returns object of type 'HeaderFooter'
	RightFooter: HeaderFooter
		# Method 'RightHeader' returns object of type 'HeaderFooter'
	RightHeader: HeaderFooter
	def __iter__(self):
		...

class PageSetup(typing.Protocol):

	# The method GetPrintQuality is actually a property, but must be used as a method to correctly pass the arguments
	def GetPrintQuality(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method SetPrintQuality is actually a property, but must be used as a method to correctly pass the arguments
	def SetPrintQuality(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	AlignMarginsHeaderFooter: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BlackAndWhite: typing.Any
	BottomMargin: typing.Any
	CenterFooter: typing.Any
		# Method 'CenterFooterPicture' returns object of type 'Graphic'
	CenterFooterPicture: Graphic
	CenterHeader: typing.Any
		# Method 'CenterHeaderPicture' returns object of type 'Graphic'
	CenterHeaderPicture: Graphic
	CenterHorizontally: typing.Any
	CenterVertically: typing.Any
		# Method 'ChartSize' returns enumeration of type 'XlObjectSize'
	ChartSize: XlObjectSize
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DifferentFirstPageHeaderFooter: typing.Any
	Draft: typing.Any
		# Method 'EvenPage' returns object of type 'Page'
	EvenPage: Page
		# Method 'FirstPage' returns object of type 'Page'
	FirstPage: Page
	FirstPageNumber: typing.Any
	FitToPagesTall: typing.Any
	FitToPagesWide: typing.Any
	FooterMargin: typing.Any
	HeaderMargin: typing.Any
	LeftFooter: typing.Any
		# Method 'LeftFooterPicture' returns object of type 'Graphic'
	LeftFooterPicture: Graphic
	LeftHeader: typing.Any
		# Method 'LeftHeaderPicture' returns object of type 'Graphic'
	LeftHeaderPicture: Graphic
	LeftMargin: typing.Any
	OddAndEvenPagesHeaderFooter: typing.Any
		# Method 'Order' returns enumeration of type 'XlOrder'
	Order: XlOrder
		# Method 'Orientation' returns enumeration of type 'XlPageOrientation'
	Orientation: XlPageOrientation
		# Method 'Pages' returns object of type 'Pages'
	Pages: Pages
		# Method 'PaperSize' returns enumeration of type 'XlPaperSize'
	PaperSize: XlPaperSize
	Parent: typing.Any
	PrintArea: typing.Any
		# Method 'PrintComments' returns enumeration of type 'XlPrintLocation'
	PrintComments: XlPrintLocation
		# Method 'PrintErrors' returns enumeration of type 'XlPrintErrors'
	PrintErrors: XlPrintErrors
	PrintGridlines: typing.Any
	PrintHeadings: typing.Any
	PrintNotes: typing.Any
	PrintQuality: typing.Any
	PrintTitleColumns: typing.Any
	PrintTitleRows: typing.Any
	RightFooter: typing.Any
		# Method 'RightFooterPicture' returns object of type 'Graphic'
	RightFooterPicture: Graphic
	RightHeader: typing.Any
		# Method 'RightHeaderPicture' returns object of type 'Graphic'
	RightHeaderPicture: Graphic
	RightMargin: typing.Any
	ScaleWithDocHeaderFooter: typing.Any
	TopMargin: typing.Any
	Zoom: typing.Any
	def __iter__(self):
		...

class Pages(typing.Protocol):

	# Result is of type Page
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Page:
		...
	# Result is of type Page
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Page:
		...
	Count: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Page:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Pane(typing.Protocol):

	def Activate(self) -> bool:
		...
	def LargeScroll(self, Down: typing.Any=defaultNamedOptArg, Up: typing.Any=defaultNamedOptArg, ToRight: typing.Any=defaultNamedOptArg, ToLeft: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def PointsToScreenPixelsX(self, Points: int=defaultNamedNotOptArg) -> int:
		...
	def PointsToScreenPixelsY(self, Points: int=defaultNamedNotOptArg) -> int:
		...
	def ScrollIntoView(self, Left: int=defaultNamedNotOptArg, Top: int=defaultNamedNotOptArg, Width: int=defaultNamedNotOptArg, Height: int=defaultNamedNotOptArg
			, Start: typing.Any=defaultNamedOptArg) -> None:
		...
	def SmallScroll(self, Down: typing.Any=defaultNamedOptArg, Up: typing.Any=defaultNamedOptArg, ToRight: typing.Any=defaultNamedOptArg, ToLeft: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
	Parent: typing.Any
	ScrollColumn: typing.Any
	ScrollRow: typing.Any
		# Method 'VisibleRange' returns object of type 'Range'
	VisibleRange: Range
	def __iter__(self):
		...

class Panes(typing.Protocol):

	# Result is of type Pane
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> Pane:
		...
	# Result is of type Pane
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> Pane:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> Pane:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Parameter(typing.Protocol):

	def SetParam(self, Type: XlParameterType=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataType' returns enumeration of type 'XlParameterDataType'
	DataType: XlParameterDataType
	Name: typing.Any
	Parent: typing.Any
	PromptString: typing.Any
	RefreshOnChange: typing.Any
		# Method 'SourceRange' returns object of type 'Range'
	SourceRange: Range
		# Method 'Type' returns enumeration of type 'XlParameterType'
	Type: XlParameterType
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class Parameters(typing.Protocol):

	# Result is of type Parameter
	def Add(self, Name: str=defaultNamedNotOptArg, iDataType: typing.Any=defaultNamedOptArg) -> Parameter:
		...
	def Delete(self) -> None:
		...
	# Result is of type Parameter
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Parameter:
		...
	# Result is of type Parameter
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Parameter:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Parameter:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Phonetic(typing.Protocol):

	Alignment: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CharacterType: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Parent: typing.Any
	Text: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...

class Phonetics(typing.Protocol):

	def Add(self, Start: int=defaultNamedNotOptArg, Length: int=defaultNamedNotOptArg, Text: str=defaultNamedNotOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> Dispatch:
		...
	Alignment: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CharacterType: typing.Any
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Length: typing.Any
	Parent: typing.Any
	Start: typing.Any
	Text: typing.Any
	Visible: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Picture(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Formula: typing.Any
	Height: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class PictureFormat(typing.Protocol):

	def IncrementBrightness(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementContrast(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	Application: typing.Any
	Brightness: typing.Any
		# Method 'ColorType' returns enumeration of type 'MsoPictureColorType'
	ColorType: MsoPictureColorType
	Contrast: typing.Any
	Creator: typing.Any
		# Method 'Crop' returns object of type 'Crop'
	Crop: Crop
	CropBottom: typing.Any
	CropLeft: typing.Any
	CropRight: typing.Any
	CropTop: typing.Any
	Parent: typing.Any
	TransparencyColor: typing.Any
		# Method 'TransparentBackground' returns enumeration of type 'MsoTriState'
	TransparentBackground: MsoTriState
	def __iter__(self):
		...

class Pictures(typing.Protocol):

	# Result is of type Picture
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Picture:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	# Result is of type Picture
	def Insert(self, Filename: str=defaultNamedNotOptArg, Converter: typing.Any=defaultNamedOptArg) -> Picture:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# Result is of type Picture
	def Paste(self, Link: typing.Any=defaultNamedOptArg) -> Picture:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Formula: typing.Any
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotAxis(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'PivotLines' returns object of type 'PivotLines'
	PivotLines: PivotLines
	def __iter__(self):
		...

class PivotCache(typing.Protocol):

	# Result is of type Shape
	def CreatePivotChart(self, ChartDestination: typing.Any=defaultNamedNotOptArg, XlChartType: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg
			, Width: typing.Any=defaultNamedOptArg, Height: typing.Any=defaultNamedOptArg) -> Shape:
		...
	# Result is of type PivotTable
	def CreatePivotTable(self, TableDestination: typing.Any=defaultNamedNotOptArg, TableName: typing.Any=defaultNamedOptArg, ReadData: typing.Any=defaultNamedOptArg, DefaultVersion: typing.Any=defaultNamedOptArg) -> PivotTable:
		...
	def MakeConnection(self) -> None:
		...
	def Refresh(self) -> None:
		...
	def ResetTimer(self) -> None:
		...
	def SaveAsODC(self, ODCFileName: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg, Keywords: typing.Any=defaultNamedOptArg) -> None:
		...
	ADOConnection: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BackgroundQuery: typing.Any
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EnableRefresh: typing.Any
	Index: typing.Any
	IsConnected: typing.Any
	LocalConnection: typing.Any
	MaintainConnection: typing.Any
	MemoryUsed: typing.Any
		# Method 'MissingItemsLimit' returns enumeration of type 'XlPivotTableMissingItems'
	MissingItemsLimit: XlPivotTableMissingItems
	OLAP: typing.Any
	OptimizeCache: typing.Any
	Parent: typing.Any
		# Method 'QueryType' returns enumeration of type 'XlQueryType'
	QueryType: XlQueryType
	RecordCount: typing.Any
	Recordset: typing.Any
	RefreshDate: typing.Any
	RefreshName: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
		# Method 'RobustConnect' returns enumeration of type 'XlRobustConnect'
	RobustConnect: XlRobustConnect
	SavePassword: typing.Any
	SourceConnectionFile: typing.Any
	SourceData: typing.Any
	SourceDataFile: typing.Any
		# Method 'SourceType' returns enumeration of type 'XlPivotTableSourceType'
	SourceType: XlPivotTableSourceType
	Sql: typing.Any
	UpgradeOnRefresh: typing.Any
	UseLocalConnection: typing.Any
		# Method 'Version' returns enumeration of type 'XlPivotTableVersionList'
	Version: XlPivotTableVersionList
		# Method 'WorkbookConnection' returns object of type 'WorkbookConnection'
	WorkbookConnection: WorkbookConnection
	def __iter__(self):
		...

class PivotCaches(typing.Protocol):

	# Result is of type PivotCache
	def Add(self, SourceType: XlPivotTableSourceType=defaultNamedNotOptArg, SourceData: typing.Any=defaultNamedOptArg) -> PivotCache:
		...
	# Result is of type PivotCache
	def Create(self, SourceType: XlPivotTableSourceType=defaultNamedNotOptArg, SourceData: typing.Any=defaultNamedOptArg, Version: typing.Any=defaultNamedOptArg) -> PivotCache:
		...
	# Result is of type PivotCache
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotCache:
		...
	# Result is of type PivotCache
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotCache:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotCache:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotCell(typing.Protocol):

	def AllocateChange(self) -> None:
		...
	def DiscardChange(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'CellChanged' returns enumeration of type 'XlCellChangedState'
	CellChanged: XlCellChangedState
		# Method 'ColumnItems' returns object of type 'PivotItemList'
	ColumnItems: PivotItemList
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CustomSubtotalFunction' returns enumeration of type 'XlConsolidationFunction'
	CustomSubtotalFunction: XlConsolidationFunction
		# Method 'DataField' returns object of type 'PivotField'
	DataField: PivotField
	DataSourceValue: typing.Any
	Dummy18: typing.Any
	MDX: typing.Any
	Parent: typing.Any
		# Method 'PivotCellType' returns enumeration of type 'XlPivotCellType'
	PivotCellType: XlPivotCellType
		# Method 'PivotColumnLine' returns object of type 'PivotLine'
	PivotColumnLine: PivotLine
		# Method 'PivotField' returns object of type 'PivotField'
	PivotField: PivotField
		# Method 'PivotItem' returns object of type 'PivotItem'
	PivotItem: PivotItem
		# Method 'PivotRowLine' returns object of type 'PivotLine'
	PivotRowLine: PivotLine
		# Method 'PivotTable' returns object of type 'PivotTable'
	PivotTable: PivotTable
		# Method 'Range' returns object of type 'Range'
	Range: Range
		# Method 'RowItems' returns object of type 'PivotItemList'
	RowItems: PivotItemList
		# Method 'ServerActions' returns object of type 'Actions'
	ServerActions: Actions
	def __iter__(self):
		...

class PivotField(typing.Protocol):

	def AddPageItem(self, Item: str=defaultNamedNotOptArg, ClearList: typing.Any=defaultNamedOptArg) -> None:
		...
	def AutoGroup(self) -> None:
		...
	def AutoShow(self, Type: int=defaultNamedNotOptArg, Range: int=defaultNamedNotOptArg, Count: int=defaultNamedNotOptArg, Field: str=defaultNamedNotOptArg) -> None:
		...
	def AutoSort(self, Order: int=defaultNamedNotOptArg, Field: str=defaultNamedNotOptArg, PivotLine: typing.Any=defaultNamedOptArg, CustomSubtotal: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type CalculatedItems
	def CalculatedItems(self) -> CalculatedItems:
		...
	def ClearAllFilters(self) -> None:
		...
	def ClearLabelFilters(self) -> None:
		...
	def ClearManualFilter(self) -> None:
		...
	def ClearValueFilters(self) -> None:
		...
	def Delete(self) -> None:
		...
	def DrillTo(self, Field: str=defaultNamedNotOptArg) -> None:
		...
	# The method GetChildItems is actually a property, but must be used as a method to correctly pass the arguments
	def GetChildItems(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetHiddenItems is actually a property, but must be used as a method to correctly pass the arguments
	def GetHiddenItems(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetParentItems is actually a property, but must be used as a method to correctly pass the arguments
	def GetParentItems(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetSubtotals is actually a property, but must be used as a method to correctly pass the arguments
	def GetSubtotals(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetVisibleItems is actually a property, but must be used as a method to correctly pass the arguments
	def GetVisibleItems(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def PivotItems(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method SetSubtotals is actually a property, but must be used as a method to correctly pass the arguments
	def SetSubtotals(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	def _AutoSort(self, Order: int=defaultNamedNotOptArg, Field: str=defaultNamedNotOptArg) -> None:
		...
	AllItemsVisible: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoShowCount: typing.Any
	AutoShowField: typing.Any
	AutoShowRange: typing.Any
	AutoShowType: typing.Any
	AutoSortCustomSubtotal: typing.Any
	AutoSortField: typing.Any
	AutoSortOrder: typing.Any
		# Method 'AutoSortPivotLine' returns object of type 'PivotLine'
	AutoSortPivotLine: PivotLine
	BaseField: typing.Any
	BaseItem: typing.Any
		# Method 'Calculation' returns enumeration of type 'XlPivotFieldCalculation'
	Calculation: XlPivotFieldCalculation
	Caption: typing.Any
		# Method 'ChildField' returns object of type 'PivotField'
	ChildField: PivotField
	ChildItems: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CubeField' returns object of type 'CubeField'
	CubeField: CubeField
	CurrentPage: typing.Any
	CurrentPageList: typing.Any
	CurrentPageName: typing.Any
		# Method 'DataRange' returns object of type 'Range'
	DataRange: Range
		# Method 'DataType' returns enumeration of type 'XlPivotFieldDataType'
	DataType: XlPivotFieldDataType
	DatabaseSort: typing.Any
	DisplayAsCaption: typing.Any
	DisplayAsTooltip: typing.Any
	DisplayInReport: typing.Any
	DragToColumn: typing.Any
	DragToData: typing.Any
	DragToHide: typing.Any
	DragToPage: typing.Any
	DragToRow: typing.Any
	DrilledDown: typing.Any
	EnableItemSelection: typing.Any
	EnableMultiplePageItems: typing.Any
	Formula: typing.Any
		# Method 'Function' returns enumeration of type 'XlConsolidationFunction'
	Function: XlConsolidationFunction
	GroupLevel: typing.Any
	Hidden: typing.Any
	HiddenItems: typing.Any
	HiddenItemsList: typing.Any
	IncludeNewItemsInFilter: typing.Any
	IsCalculated: typing.Any
	IsMemberProperty: typing.Any
		# Method 'LabelRange' returns object of type 'Range'
	LabelRange: Range
	LayoutBlankLine: typing.Any
	LayoutCompactRow: typing.Any
		# Method 'LayoutForm' returns enumeration of type 'XlLayoutFormType'
	LayoutForm: XlLayoutFormType
	LayoutPageBreak: typing.Any
		# Method 'LayoutSubtotalLocation' returns enumeration of type 'XlSubtototalLocationType'
	LayoutSubtotalLocation: XlSubtototalLocationType
	MemberPropertyCaption: typing.Any
	MemoryUsed: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
		# Method 'Orientation' returns enumeration of type 'XlPivotFieldOrientation'
	Orientation: XlPivotFieldOrientation
	Parent: typing.Any
		# Method 'ParentField' returns object of type 'PivotField'
	ParentField: PivotField
	ParentItems: typing.Any
		# Method 'PivotFilters' returns object of type 'PivotFilters'
	PivotFilters: PivotFilters
	Position: typing.Any
	PropertyOrder: typing.Any
		# Method 'PropertyParentField' returns object of type 'PivotField'
	PropertyParentField: PivotField
	RepeatLabels: typing.Any
	ServerBased: typing.Any
	ShowAllItems: typing.Any
	ShowDetail: typing.Any
	ShowingInAxis: typing.Any
	SourceCaption: typing.Any
	SourceName: typing.Any
	StandardFormula: typing.Any
	SubtotalName: typing.Any
	Subtotals: typing.Any
	TotalLevels: typing.Any
	UseMemberPropertyAsCaption: typing.Any
	Value: typing.Any
	VisibleItems: typing.Any
	VisibleItemsList: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class PivotFields(typing.Protocol):

	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Parent' returns object of type 'PivotTable'
	Parent: PivotTable
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotFilter(typing.Protocol):

	def Delete(self) -> None:
		...
	Active: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataCubeField' returns object of type 'CubeField'
	DataCubeField: CubeField
		# Method 'DataField' returns object of type 'PivotField'
	DataField: PivotField
	Description: typing.Any
		# Method 'FilterType' returns enumeration of type 'XlPivotFilterType'
	FilterType: XlPivotFilterType
	IsMemberPropertyFilter: typing.Any
		# Method 'MemberPropertyField' returns object of type 'PivotField'
	MemberPropertyField: PivotField
	Name: typing.Any
	Order: typing.Any
	Parent: typing.Any
		# Method 'PivotField' returns object of type 'PivotField'
	PivotField: PivotField
	Value1: typing.Any
	Value2: typing.Any
	WholeDayFilter: typing.Any
	def __iter__(self):
		...

class PivotFilters(typing.Protocol):

	# Result is of type PivotFilter
	def Add(self, Type: XlPivotFilterType=defaultNamedNotOptArg, DataField: typing.Any=defaultNamedOptArg, Value1: typing.Any=defaultNamedOptArg, Value2: typing.Any=defaultNamedOptArg
			, Order: typing.Any=defaultNamedOptArg, Name: typing.Any=defaultNamedOptArg, Description: typing.Any=defaultNamedOptArg, MemberPropertyField: typing.Any=defaultNamedOptArg) -> PivotFilter:
		...
	# Result is of type PivotFilter
	def Add2(self, Type: XlPivotFilterType=defaultNamedNotOptArg, DataField: typing.Any=defaultNamedOptArg, Value1: typing.Any=defaultNamedOptArg, Value2: typing.Any=defaultNamedOptArg
			, Order: typing.Any=defaultNamedOptArg, Name: typing.Any=defaultNamedOptArg, Description: typing.Any=defaultNamedOptArg, MemberPropertyField: typing.Any=defaultNamedOptArg, WholeDayFilter: typing.Any=defaultNamedOptArg) -> PivotFilter:
		...
	# Result is of type PivotFilter
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotFilter:
		...
	# Result is of type PivotFilter
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotFilter:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotFilter:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotFormula(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Formula: typing.Any
	Index: typing.Any
	Parent: typing.Any
	StandardFormula: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class PivotFormulas(typing.Protocol):

	# Result is of type PivotFormula
	def Add(self, Formula: str=defaultNamedNotOptArg, UseStandardFormula: typing.Any=defaultNamedOptArg) -> PivotFormula:
		...
	# Result is of type PivotFormula
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotFormula:
		...
	# Result is of type PivotFormula
	def _Add(self, Formula: str=defaultNamedNotOptArg) -> PivotFormula:
		...
	# Result is of type PivotFormula
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotFormula:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotFormula:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotItem(typing.Protocol):

	def Delete(self) -> None:
		...
	def DrillTo(self, Field: str=defaultNamedNotOptArg) -> None:
		...
	# The method GetChildItems is actually a property, but must be used as a method to correctly pass the arguments
	def GetChildItems(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
	ChildItems: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataRange' returns object of type 'Range'
	DataRange: Range
	DrilledDown: typing.Any
	Formula: typing.Any
	IsCalculated: typing.Any
		# Method 'LabelRange' returns object of type 'Range'
	LabelRange: Range
	Name: typing.Any
		# Method 'Parent' returns object of type 'PivotField'
	Parent: PivotField
		# Method 'ParentItem' returns object of type 'PivotItem'
	ParentItem: PivotItem
	ParentShowDetail: typing.Any
	Position: typing.Any
	RecordCount: typing.Any
	ShowDetail: typing.Any
	SourceName: typing.Any
	SourceNameStandard: typing.Any
	StandardFormula: typing.Any
	Value: typing.Any
	Visible: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class PivotItemList(typing.Protocol):

	# Result is of type PivotItem
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotItem:
		...
	# Result is of type PivotItem
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Field: typing.Any=defaultNamedNotOptArg) -> PivotItem:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Field: typing.Any=defaultNamedNotOptArg) -> PivotItem:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotItems(typing.Protocol):

	def Add(self, Name: str=defaultNamedNotOptArg) -> None:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Parent' returns object of type 'PivotField'
	Parent: PivotField
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotLayout(typing.Protocol):

	def AddFields(self, RowFields: typing.Any=defaultNamedOptArg, ColumnFields: typing.Any=defaultNamedOptArg, PageFields: typing.Any=defaultNamedOptArg, AppendField: typing.Any=defaultNamedOptArg) -> None:
		...
	# The method GetColumnFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetColumnFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetDataFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetDataFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetHiddenFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetHiddenFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetPageFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetPageFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetPivotFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetPivotFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetRowFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetRowFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetVisibleFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetVisibleFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ColumnFields: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CubeFields' returns object of type 'CubeFields'
	CubeFields: CubeFields
	DataFields: typing.Any
	HiddenFields: typing.Any
	InnerDetail: typing.Any
	PageFields: typing.Any
	Parent: typing.Any
		# Method 'PivotCache' returns object of type 'PivotCache'
	PivotCache: PivotCache
	PivotFields: typing.Any
		# Method 'PivotTable' returns object of type 'PivotTable'
	PivotTable: PivotTable
	RowFields: typing.Any
	VisibleFields: typing.Any
	def __iter__(self):
		...

class PivotLine(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'LineType' returns enumeration of type 'XlPivotLineType'
	LineType: XlPivotLineType
	Parent: typing.Any
		# Method 'PivotLineCells' returns object of type 'PivotLineCells'
	PivotLineCells: PivotLineCells
		# Method 'PivotLineCellsFull' returns object of type 'PivotLineCells'
	PivotLineCellsFull: PivotLineCells
	Position: typing.Any
	def __iter__(self):
		...

class PivotLineCells(typing.Protocol):

	# Result is of type PivotCell
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotCell:
		...
	# Result is of type PivotCell
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotCell:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Full: typing.Any
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotCell:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotLines(typing.Protocol):

	# Result is of type PivotLine
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotLine:
		...
	# Result is of type PivotLine
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotLine:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotLine:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotTable(typing.Protocol):

	# Result is of type PivotField
	def AddDataField(self, Field: Dispatch=defaultNamedNotOptArg, Caption: typing.Any=defaultNamedOptArg, Function: typing.Any=defaultNamedOptArg) -> PivotField:
		...
	def AddFields(self, RowFields: typing.Any=defaultNamedOptArg, ColumnFields: typing.Any=defaultNamedOptArg, PageFields: typing.Any=defaultNamedOptArg, AddToTable: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def AllocateChanges(self) -> None:
		...
	def ApplyLayout(self) -> None:
		...
	# Result is of type CalculatedFields
	def CalculatedFields(self) -> CalculatedFields:
		...
	def ChangeConnection(self, conn: WorkbookConnection=defaultNamedNotOptArg) -> None:
		...
	def ChangePivotCache(self, PivotCache: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def ClearAllFilters(self) -> None:
		...
	def ClearTable(self) -> None:
		...
	def CommitChanges(self) -> None:
		...
	def ConvertToFormulas(self, ConvertFilters: bool=defaultNamedNotOptArg) -> None:
		...
	def CreateCubeFile(self, File: str=defaultNamedNotOptArg, Measures: typing.Any=defaultNamedOptArg, Levels: typing.Any=defaultNamedOptArg, Members: typing.Any=defaultNamedOptArg
			, Properties: typing.Any=defaultNamedOptArg) -> str:
		...
	def DiscardChanges(self) -> None:
		...
	def DrillDown(self, PivotItem: PivotItem=defaultNamedNotOptArg, PivotLine: typing.Any=defaultNamedOptArg) -> None:
		...
	def DrillTo(self, PivotItem: PivotItem=defaultNamedNotOptArg, CubeField: CubeField=defaultNamedNotOptArg, PivotLine: typing.Any=defaultNamedOptArg) -> None:
		...
	def DrillUp(self, PivotItem: PivotItem=defaultNamedNotOptArg, PivotLine: typing.Any=defaultNamedOptArg, LevelUniqueName: typing.Any=defaultNamedOptArg) -> None:
		...
	def Dummy15(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy2(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Format(self, Format: XlPivotFormatType=defaultNamedNotOptArg) -> None:
		...
	# The method GetColumnFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetColumnFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def GetData(self, Name: str=defaultNamedNotOptArg) -> float:
		...
	# The method GetDataFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetDataFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetHiddenFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetHiddenFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetPageFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetPageFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# Result is of type Range
	def GetPivotData(self, DataField: typing.Any=defaultNamedOptArg, Field1: typing.Any=defaultNamedOptArg, Item1: typing.Any=defaultNamedOptArg, Field2: typing.Any=defaultNamedOptArg
			, Item2: typing.Any=defaultNamedOptArg, Field3: typing.Any=defaultNamedOptArg, Item3: typing.Any=defaultNamedOptArg, Field4: typing.Any=defaultNamedOptArg, Item4: typing.Any=defaultNamedOptArg
			, Field5: typing.Any=defaultNamedOptArg, Item5: typing.Any=defaultNamedOptArg, Field6: typing.Any=defaultNamedOptArg, Item6: typing.Any=defaultNamedOptArg, Field7: typing.Any=defaultNamedOptArg
			, Item7: typing.Any=defaultNamedOptArg, Field8: typing.Any=defaultNamedOptArg, Item8: typing.Any=defaultNamedOptArg, Field9: typing.Any=defaultNamedOptArg, Item9: typing.Any=defaultNamedOptArg
			, Field10: typing.Any=defaultNamedOptArg, Item10: typing.Any=defaultNamedOptArg, Field11: typing.Any=defaultNamedOptArg, Item11: typing.Any=defaultNamedOptArg, Field12: typing.Any=defaultNamedOptArg
			, Item12: typing.Any=defaultNamedOptArg, Field13: typing.Any=defaultNamedOptArg, Item13: typing.Any=defaultNamedOptArg, Field14: typing.Any=defaultNamedOptArg, Item14: typing.Any=defaultNamedOptArg) -> Range:
		...
	# The method GetRowFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetRowFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# The method GetVisibleFields is actually a property, but must be used as a method to correctly pass the arguments
	def GetVisibleFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ListFormulas(self) -> None:
		...
	# Result is of type PivotCache
	def PivotCache(self) -> PivotCache:
		...
	def PivotFields(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def PivotSelect(self, Name: str=defaultNamedNotOptArg, Mode: XlPTSelectionMode=0, UseStandardName: typing.Any=defaultNamedOptArg) -> None:
		...
	def PivotTableWizard(self, SourceType: typing.Any=defaultNamedOptArg, SourceData: typing.Any=defaultNamedOptArg, TableDestination: typing.Any=defaultNamedOptArg, TableName: typing.Any=defaultNamedOptArg
			, RowGrand: typing.Any=defaultNamedOptArg, ColumnGrand: typing.Any=defaultNamedOptArg, SaveData: typing.Any=defaultNamedOptArg, HasAutoFormat: typing.Any=defaultNamedOptArg, AutoPage: typing.Any=defaultNamedOptArg
			, Reserved: typing.Any=defaultNamedOptArg, BackgroundQuery: typing.Any=defaultNamedOptArg, OptimizeCache: typing.Any=defaultNamedOptArg, PageFieldOrder: typing.Any=defaultNamedOptArg, PageFieldWrapCount: typing.Any=defaultNamedOptArg
			, ReadData: typing.Any=defaultNamedOptArg, Connection: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type PivotValueCell
	def PivotValueCell(self, rowline: typing.Any=defaultNamedOptArg, columnline: typing.Any=defaultNamedOptArg) -> PivotValueCell:
		...
	def RefreshDataSourceValues(self) -> None:
		...
	def RefreshTable(self) -> bool:
		...
	def RepeatAllLabels(self, Repeat: XlPivotFieldRepeatLabels=defaultNamedNotOptArg) -> None:
		...
	def RowAxisLayout(self, RowLayout: XlLayoutRowType=defaultNamedNotOptArg) -> None:
		...
	def ShowPages(self, PageField: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SubtotalLocation(self, Location: XlSubtototalLocationType=defaultNamedNotOptArg) -> None:
		...
	def Update(self) -> None:
		...
	def _PivotSelect(self, Name: str=defaultNamedNotOptArg, Mode: XlPTSelectionMode=0) -> None:
		...
		# Method 'ActiveFilters' returns object of type 'PivotFilters'
	ActiveFilters: PivotFilters
		# Method 'Allocation' returns enumeration of type 'XlAllocation'
	Allocation: XlAllocation
		# Method 'AllocationMethod' returns enumeration of type 'XlAllocationMethod'
	AllocationMethod: XlAllocationMethod
		# Method 'AllocationValue' returns enumeration of type 'XlAllocationValue'
	AllocationValue: XlAllocationValue
	AllocationWeightExpression: typing.Any
	AllowMultipleFilters: typing.Any
	AlternativeText: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CacheIndex: typing.Any
		# Method 'CalculatedMembers' returns object of type 'CalculatedMembers'
	CalculatedMembers: CalculatedMembers
	CalculatedMembersInFilters: typing.Any
		# Method 'ChangeList' returns object of type 'PivotTableChangeList'
	ChangeList: PivotTableChangeList
	ColumnFields: typing.Any
	ColumnGrand: typing.Any
		# Method 'ColumnRange' returns object of type 'Range'
	ColumnRange: Range
	CompactLayoutColumnHeader: typing.Any
	CompactLayoutRowHeader: typing.Any
	CompactRowIndent: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CubeFields' returns object of type 'CubeFields'
	CubeFields: CubeFields
		# Method 'DataBodyRange' returns object of type 'Range'
	DataBodyRange: Range
	DataFields: typing.Any
		# Method 'DataLabelRange' returns object of type 'Range'
	DataLabelRange: Range
		# Method 'DataPivotField' returns object of type 'PivotField'
	DataPivotField: PivotField
	DisplayContextTooltips: typing.Any
	DisplayEmptyColumn: typing.Any
	DisplayEmptyRow: typing.Any
	DisplayErrorString: typing.Any
	DisplayFieldCaptions: typing.Any
	DisplayImmediateItems: typing.Any
	DisplayMemberPropertyTooltips: typing.Any
	DisplayNullString: typing.Any
	EnableDataValueEditing: typing.Any
	EnableDrilldown: typing.Any
	EnableFieldDialog: typing.Any
	EnableFieldList: typing.Any
	EnableWizard: typing.Any
	EnableWriteback: typing.Any
	ErrorString: typing.Any
	FieldListSortAscending: typing.Any
	GrandTotalName: typing.Any
	HasAutoFormat: typing.Any
	Hidden: typing.Any
	HiddenFields: typing.Any
	InGridDropZones: typing.Any
	InnerDetail: typing.Any
		# Method 'LayoutRowDefault' returns enumeration of type 'XlLayoutRowType'
	LayoutRowDefault: XlLayoutRowType
	Location: typing.Any
	MDX: typing.Any
	ManualUpdate: typing.Any
	MergeLabels: typing.Any
	Name: typing.Any
	NullString: typing.Any
	PageFieldOrder: typing.Any
	PageFieldStyle: typing.Any
	PageFieldWrapCount: typing.Any
	PageFields: typing.Any
		# Method 'PageRange' returns object of type 'Range'
	PageRange: Range
		# Method 'PageRangeCells' returns object of type 'Range'
	PageRangeCells: Range
	Parent: typing.Any
		# Method 'PivotChart' returns object of type 'Shape'
	PivotChart: Shape
		# Method 'PivotColumnAxis' returns object of type 'PivotAxis'
	PivotColumnAxis: PivotAxis
		# Method 'PivotFormulas' returns object of type 'PivotFormulas'
	PivotFormulas: PivotFormulas
		# Method 'PivotRowAxis' returns object of type 'PivotAxis'
	PivotRowAxis: PivotAxis
	PivotSelection: typing.Any
	PivotSelectionStandard: typing.Any
	PreserveFormatting: typing.Any
	PrintDrillIndicators: typing.Any
	PrintTitles: typing.Any
	RefreshDate: typing.Any
	RefreshName: typing.Any
	RepeatItemsOnEachPrintedPage: typing.Any
	RowFields: typing.Any
	RowGrand: typing.Any
		# Method 'RowRange' returns object of type 'Range'
	RowRange: Range
	SaveData: typing.Any
		# Method 'SelectionMode' returns enumeration of type 'XlPTSelectionMode'
	SelectionMode: XlPTSelectionMode
	ShowCellBackgroundFromOLAP: typing.Any
	ShowDrillIndicators: typing.Any
	ShowPageMultipleItemLabel: typing.Any
	ShowTableStyleColumnHeaders: typing.Any
	ShowTableStyleColumnStripes: typing.Any
	ShowTableStyleLastColumn: typing.Any
	ShowTableStyleRowHeaders: typing.Any
	ShowTableStyleRowStripes: typing.Any
	ShowValuesRow: typing.Any
		# Method 'Slicers' returns object of type 'Slicers'
	Slicers: Slicers
	SmallGrid: typing.Any
	SortUsingCustomLists: typing.Any
	SourceData: typing.Any
	SubtotalHiddenPageItems: typing.Any
	Summary: typing.Any
		# Method 'TableRange1' returns object of type 'Range'
	TableRange1: Range
		# Method 'TableRange2' returns object of type 'Range'
	TableRange2: Range
	TableStyle: typing.Any
	TableStyle2: typing.Any
	Tag: typing.Any
	TotalsAnnotation: typing.Any
	VacatedStyle: typing.Any
	Value: typing.Any
		# Method 'Version' returns enumeration of type 'XlPivotTableVersionList'
	Version: XlPivotTableVersionList
	ViewCalculatedMembers: typing.Any
	VisibleFields: typing.Any
	VisualTotals: typing.Any
	VisualTotalsForSets: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class PivotTableChangeList(typing.Protocol):

	# Result is of type ValueChange
	def Add(self, Tuple: str=defaultNamedNotOptArg, Value: float=defaultNamedNotOptArg, AllocationValue: typing.Any=defaultNamedOptArg, AllocationMethod: typing.Any=defaultNamedOptArg
			, AllocationWeightExpression: typing.Any=defaultNamedOptArg) -> ValueChange:
		...
	# Result is of type ValueChange
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ValueChange:
		...
	# Result is of type ValueChange
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ValueChange:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ValueChange:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotTables(typing.Protocol):

	# Result is of type PivotTable
	def Add(self, PivotCache: PivotCache=defaultNamedNotOptArg, TableDestination: typing.Any=defaultNamedNotOptArg, TableName: typing.Any=defaultNamedOptArg, ReadData: typing.Any=defaultNamedOptArg
			, DefaultVersion: typing.Any=defaultNamedOptArg) -> PivotTable:
		...
	# Result is of type PivotTable
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotTable:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PivotValueCell(typing.Protocol):

	def ShowDetail(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'PivotCell' returns object of type 'PivotCell'
	PivotCell: PivotCell
		# Method 'ServerActions' returns object of type 'Actions'
	ServerActions: Actions
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class PlotArea(typing.Protocol):

	def ClearFormats(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Height: typing.Any
	InsideHeight: typing.Any
	InsideLeft: typing.Any
	InsideTop: typing.Any
	InsideWidth: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
		# Method 'Position' returns enumeration of type 'XlChartElementPosition'
	Position: XlChartElementPosition
	Top: typing.Any
	Width: typing.Any
	_InsideHeight: typing.Any
	_InsideLeft: typing.Any
	_InsideTop: typing.Any
	_InsideWidth: typing.Any
	def __iter__(self):
		...

class Point(typing.Protocol):

	def ApplyDataLabels(self, Type: XlDataLabelsType=2, LegendKey: typing.Any=defaultNamedOptArg, AutoText: typing.Any=defaultNamedOptArg, HasLeaderLines: typing.Any=defaultNamedOptArg
			, ShowSeriesName: typing.Any=defaultNamedOptArg, ShowCategoryName: typing.Any=defaultNamedOptArg, ShowValue: typing.Any=defaultNamedOptArg, ShowPercentage: typing.Any=defaultNamedOptArg, ShowBubbleSize: typing.Any=defaultNamedOptArg
			, Separator: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def ClearFormats(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Paste(self) -> typing.Any:
		...
	def PieSliceLocation(self, loc: XlPieSliceLocation=defaultNamedNotOptArg, Index: XlPieSliceIndex=2) -> float:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def _ApplyDataLabels(self, Type: XlDataLabelsType=2, LegendKey: typing.Any=defaultNamedOptArg, AutoText: typing.Any=defaultNamedOptArg, HasLeaderLines: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ApplyPictToEnd: typing.Any
	ApplyPictToFront: typing.Any
	ApplyPictToSides: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataLabel' returns object of type 'DataLabel'
	DataLabel: DataLabel
	Explosion: typing.Any
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Has3DEffect: typing.Any
	HasDataLabel: typing.Any
	Height: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	InvertIfNegative: typing.Any
	IsTotal: typing.Any
	Left: typing.Any
	MarkerBackgroundColor: typing.Any
		# Method 'MarkerBackgroundColorIndex' returns enumeration of type 'XlColorIndex'
	MarkerBackgroundColorIndex: XlColorIndex
	MarkerForegroundColor: typing.Any
		# Method 'MarkerForegroundColorIndex' returns enumeration of type 'XlColorIndex'
	MarkerForegroundColorIndex: XlColorIndex
	MarkerSize: typing.Any
		# Method 'MarkerStyle' returns enumeration of type 'XlMarkerStyle'
	MarkerStyle: XlMarkerStyle
	Name: typing.Any
	Parent: typing.Any
		# Method 'PictureType' returns enumeration of type 'XlChartPictureType'
	PictureType: XlChartPictureType
	PictureUnit: typing.Any
	PictureUnit2: typing.Any
	SecondaryPlot: typing.Any
	Shadow: typing.Any
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class Points(typing.Protocol):

	# Result is of type Point
	def Item(self, Index: int=defaultNamedNotOptArg) -> Point:
		...
	# Result is of type Point
	def _Default(self, Index: int=defaultNamedNotOptArg) -> Point:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> Point:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ProtectedViewWindow(typing.Protocol):

	def Activate(self) -> None:
		...
	def Close(self) -> bool:
		...
	# Result is of type Workbook
	def Edit(self, WriteResPassword: typing.Any=defaultNamedOptArg, UpdateLinks: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	Caption: typing.Any
	EnableResize: typing.Any
	Height: typing.Any
	Left: typing.Any
	SourceName: typing.Any
	SourcePath: typing.Any
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
		# Method 'WindowState' returns enumeration of type 'XlProtectedViewWindowState'
	WindowState: XlProtectedViewWindowState
		# Method 'Workbook' returns object of type 'Workbook'
	Workbook: Workbook
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class ProtectedViewWindows(typing.Protocol):

	# Result is of type ProtectedViewWindow
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ProtectedViewWindow:
		...
	# Result is of type ProtectedViewWindow
	def Open(self, Filename: str=defaultNamedNotOptArg, Password: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, RepairMode: typing.Any=defaultNamedOptArg) -> ProtectedViewWindow:
		...
	# Result is of type ProtectedViewWindow
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> ProtectedViewWindow:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ProtectedViewWindow:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Protection(typing.Protocol):

	AllowDeletingColumns: typing.Any
	AllowDeletingRows: typing.Any
		# Method 'AllowEditRanges' returns object of type 'AllowEditRanges'
	AllowEditRanges: AllowEditRanges
	AllowFiltering: typing.Any
	AllowFormattingCells: typing.Any
	AllowFormattingColumns: typing.Any
	AllowFormattingRows: typing.Any
	AllowInsertingColumns: typing.Any
	AllowInsertingHyperlinks: typing.Any
	AllowInsertingRows: typing.Any
	AllowSorting: typing.Any
	AllowUsingPivotTables: typing.Any
	def __iter__(self):
		...

class PublishObject(typing.Protocol):

	def Delete(self) -> None:
		...
	def Publish(self, Create: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoRepublish: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DivID: typing.Any
	Filename: typing.Any
		# Method 'HtmlType' returns enumeration of type 'XlHtmlType'
	HtmlType: XlHtmlType
	Parent: typing.Any
	Sheet: typing.Any
	Source: typing.Any
		# Method 'SourceType' returns enumeration of type 'XlSourceType'
	SourceType: XlSourceType
	Title: typing.Any
	def __iter__(self):
		...

class PublishObjects(typing.Protocol):

	# Result is of type PublishObject
	def Add(self, SourceType: XlSourceType=defaultNamedNotOptArg, Filename: str=defaultNamedNotOptArg, Sheet: typing.Any=defaultNamedOptArg, Source: typing.Any=defaultNamedOptArg
			, HtmlType: typing.Any=defaultNamedOptArg, DivID: typing.Any=defaultNamedOptArg, Title: typing.Any=defaultNamedOptArg) -> PublishObject:
		...
	def Delete(self) -> None:
		...
	# Result is of type PublishObject
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PublishObject:
		...
	def Publish(self) -> None:
		...
	# Result is of type PublishObject
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PublishObject:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PublishObject:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class PublishedDoc(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisclosureScope: typing.Any
	Parent: typing.Any
	PublishedDate: typing.Any
	Title: typing.Any
	Url: typing.Any
	def __iter__(self):
		...

class PublishedDocs(typing.Protocol):

	# Result is of type PublishedDoc
	def Item(self, Index: int=defaultNamedNotOptArg) -> PublishedDoc:
		...
	# Result is of type PublishedDoc
	def _Default(self, Index: int=defaultNamedNotOptArg) -> PublishedDoc:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> PublishedDoc:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Queries(typing.Protocol):

	# Result is of type WorkbookQuery
	def Add(self, Name: str=defaultNamedNotOptArg, Formula: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg) -> WorkbookQuery:
		...
	# Result is of type WorkbookQuery
	def Item(self, NameOrIndex: typing.Any=defaultNamedNotOptArg) -> WorkbookQuery:
		...
	# Result is of type WorkbookQuery
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, NameOrIndex: typing.Any=defaultNamedNotOptArg) -> WorkbookQuery:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	FastCombine: typing.Any
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, NameOrIndex: typing.Any=defaultNamedNotOptArg) -> WorkbookQuery:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class QueryTables(typing.Protocol):

	# Result is of type QueryTable
	def Add(self, Connection: typing.Any=defaultNamedNotOptArg, Destination: Range=defaultNamedNotOptArg, Sql: typing.Any=defaultNamedOptArg) -> QueryTable:
		...
	# Result is of type QueryTable
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> QueryTable:
		...
	# Result is of type QueryTable
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> QueryTable:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> QueryTable:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class QuickAnalysis(typing.Protocol):

	def Hide(self, XlQuickAnalysisMode: XlQuickAnalysisMode=0) -> None:
		...
	def Show(self, XlQuickAnalysisMode: XlQuickAnalysisMode=0) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class RTD(typing.Protocol):

	def RefreshData(self) -> None:
		...
	def RestartServers(self) -> None:
		...
	ThrottleInterval: typing.Any
	def __iter__(self):
		...

class Range(typing.Protocol):

	def Activate(self) -> typing.Any:
		...
	# Result is of type Comment
	def AddComment(self, Text: typing.Any=defaultNamedOptArg) -> Comment:
		...
	# Result is of type CommentThreaded
	def AddCommentThreaded(self, Text: str=defaultNamedNotOptArg) -> CommentThreaded:
		...
	def AdvancedFilter(self, Action: XlFilterAction=defaultNamedNotOptArg, CriteriaRange: typing.Any=defaultNamedOptArg, CopyToRange: typing.Any=defaultNamedOptArg, Unique: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def AllocateChanges(self) -> None:
		...
	def ApplyNames(self, Names: typing.Any=defaultNamedNotOptArg, IgnoreRelativeAbsolute: typing.Any=defaultNamedNotOptArg, UseRowColumnNames: typing.Any=defaultNamedNotOptArg, OmitColumn: typing.Any=defaultNamedNotOptArg
			, OmitRow: typing.Any=defaultNamedNotOptArg, Order: XlApplyNamesOrder=1, AppendLast: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def ApplyOutlineStyles(self) -> typing.Any:
		...
	def AutoComplete(self, String: str=defaultNamedNotOptArg) -> str:
		...
	def AutoFill(self, Destination: Range=defaultNamedNotOptArg, Type: XlAutoFillType=0) -> typing.Any:
		...
	def AutoFilter(self, Field: typing.Any=defaultNamedNotOptArg, Criteria1: typing.Any=defaultNamedNotOptArg, Operator: XlAutoFilterOperator=1, Criteria2: typing.Any=defaultNamedOptArg
			, VisibleDropDown: typing.Any=defaultNamedOptArg, SubField: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def AutoFit(self) -> typing.Any:
		...
	def AutoFormat(self, Format: XlRangeAutoFormat=1, Number: typing.Any=defaultNamedOptArg, Font: typing.Any=defaultNamedOptArg, Alignment: typing.Any=defaultNamedOptArg
			, Border: typing.Any=defaultNamedOptArg, Pattern: typing.Any=defaultNamedOptArg, Width: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def AutoOutline(self) -> typing.Any:
		...
	def BorderAround(self, LineStyle: typing.Any=defaultNamedNotOptArg, Weight: XlBorderWeight=2, ColorIndex: XlColorIndex=-4105, Color: typing.Any=defaultNamedOptArg
			, ThemeColor: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Calculate(self) -> typing.Any:
		...
	def CalculateRowMajorOrder(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Clear(self) -> typing.Any:
		...
	def ClearComments(self) -> None:
		...
	def ClearContents(self) -> typing.Any:
		...
	def ClearFormats(self) -> typing.Any:
		...
	def ClearHyperlinks(self) -> None:
		...
	def ClearNotes(self) -> typing.Any:
		...
	def ClearOutline(self) -> typing.Any:
		...
	# Result is of type Range
	def ColumnDifferences(self, Comparison: typing.Any=defaultNamedNotOptArg) -> Range:
		...
	def Consolidate(self, Sources: typing.Any=defaultNamedOptArg, Function: typing.Any=defaultNamedOptArg, TopRow: typing.Any=defaultNamedOptArg, LeftColumn: typing.Any=defaultNamedOptArg
			, CreateLinks: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def ConvertToLinkedDataType(self, ServiceID: int=defaultNamedNotOptArg, LanguageCulture: str=defaultNamedNotOptArg) -> None:
		...
	def Copy(self, Destination: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def CopyFromRecordset(self, Data: typing.Any=defaultNamedNotOptArg, MaxRows: typing.Any=defaultNamedOptArg, MaxColumns: typing.Any=defaultNamedOptArg) -> int:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=1, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def CreateNames(self, Top: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Bottom: typing.Any=defaultNamedOptArg, Right: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def CreatePublisher(self, Edition: typing.Any=defaultNamedNotOptArg, Appearance: XlPictureAppearance=1, ContainsPICT: typing.Any=defaultNamedOptArg, ContainsBIFF: typing.Any=defaultNamedOptArg
			, ContainsRTF: typing.Any=defaultNamedOptArg, ContainsVALU: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Cut(self, Destination: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def DataSeries(self, Rowcol: typing.Any=defaultNamedNotOptArg, Type: XlDataSeriesType=-4132, Date: XlDataSeriesDate=1, Step: typing.Any=defaultNamedOptArg
			, Stop: typing.Any=defaultNamedOptArg, Trend: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def DataTypeToText(self) -> None:
		...
	def Delete(self, Shift: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def DialogBox(self) -> typing.Any:
		...
	def Dirty(self) -> None:
		...
	def DiscardChanges(self) -> None:
		...
	def EditionOptions(self, Type: XlEditionType=defaultNamedNotOptArg, Option: XlEditionOptionsOption=defaultNamedNotOptArg, Name: typing.Any=defaultNamedNotOptArg, Reference: typing.Any=defaultNamedNotOptArg
			, Appearance: XlPictureAppearance=1, ChartSize: XlPictureAppearance=1, Format: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Range
	# The method End is actually a property, but must be used as a method to correctly pass the arguments
	def End(self, Direction: XlDirection=defaultNamedNotOptArg) -> Range:
		...
	def ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg
			, WorkIdentity: typing.Any=defaultNamedOptArg) -> None:
		...
	def FillDown(self) -> typing.Any:
		...
	def FillLeft(self) -> typing.Any:
		...
	def FillRight(self) -> typing.Any:
		...
	def FillUp(self) -> typing.Any:
		...
	# Result is of type Range
	def Find(self, What: typing.Any=defaultNamedNotOptArg, After: typing.Any=defaultNamedNotOptArg, LookIn: typing.Any=defaultNamedNotOptArg, LookAt: typing.Any=defaultNamedNotOptArg
			, SearchOrder: typing.Any=defaultNamedNotOptArg, SearchDirection: XlSearchDirection=1, MatchCase: typing.Any=defaultNamedOptArg, MatchByte: typing.Any=defaultNamedOptArg, SearchFormat: typing.Any=defaultNamedOptArg) -> Range:
		...
	# Result is of type Range
	def FindNext(self, After: typing.Any=defaultNamedOptArg) -> Range:
		...
	# Result is of type Range
	def FindPrevious(self, After: typing.Any=defaultNamedOptArg) -> Range:
		...
	def FlashFill(self) -> None:
		...
	def FunctionWizard(self) -> typing.Any:
		...
	# The method GetAddress is actually a property, but must be used as a method to correctly pass the arguments
	def GetAddress(self, RowAbsolute: typing.Any=defaultNamedNotOptArg, ColumnAbsolute: typing.Any=defaultNamedNotOptArg, ReferenceStyle: XlReferenceStyle=1, External: typing.Any=defaultNamedOptArg
			, RelativeTo: typing.Any=defaultNamedOptArg) -> str:
		...
	# The method GetAddressLocal is actually a property, but must be used as a method to correctly pass the arguments
	def GetAddressLocal(self, RowAbsolute: typing.Any=defaultNamedNotOptArg, ColumnAbsolute: typing.Any=defaultNamedNotOptArg, ReferenceStyle: XlReferenceStyle=1, External: typing.Any=defaultNamedOptArg
			, RelativeTo: typing.Any=defaultNamedOptArg) -> str:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type Range
	# The method GetOffset is actually a property, but must be used as a method to correctly pass the arguments
	def GetOffset(self, RowOffset: typing.Any=defaultNamedOptArg, ColumnOffset: typing.Any=defaultNamedOptArg) -> Range:
		...
	# Result is of type Range
	# The method GetResize is actually a property, but must be used as a method to correctly pass the arguments
	def GetResize(self, RowSize: typing.Any=defaultNamedOptArg, ColumnSize: typing.Any=defaultNamedOptArg) -> Range:
		...
	# The method GetValue is actually a property, but must be used as a method to correctly pass the arguments
	def GetValue(self, RangeValueDataType: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method Get_Default is actually a property, but must be used as a method to correctly pass the arguments
	def Get_Default(self, RowIndex: typing.Any=defaultNamedOptArg, ColumnIndex: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GoalSeek(self, Goal: typing.Any=defaultNamedNotOptArg, ChangingCell: Range=defaultNamedNotOptArg) -> bool:
		...
	def Group(self, Start: typing.Any=defaultNamedOptArg, End: typing.Any=defaultNamedOptArg, By: typing.Any=defaultNamedOptArg, Periods: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Insert(self, Shift: typing.Any=defaultNamedOptArg, CopyOrigin: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def InsertIndent(self, InsertAmount: int=defaultNamedNotOptArg) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, RowIndex: typing.Any=defaultNamedNotOptArg, ColumnIndex: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Justify(self) -> typing.Any:
		...
	def ListNames(self) -> typing.Any:
		...
	def Merge(self, Across: typing.Any=defaultNamedOptArg) -> None:
		...
	def NavigateArrow(self, TowardPrecedent: typing.Any=defaultNamedOptArg, ArrowNumber: typing.Any=defaultNamedOptArg, LinkNumber: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def NoteText(self, Text: typing.Any=defaultNamedOptArg, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> str:
		...
	def Parse(self, ParseLine: typing.Any=defaultNamedOptArg, Destination: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def PasteSpecial(self, Paste: XlPasteType=-4104, Operation: XlPasteSpecialOperation=-4142, SkipBlanks: typing.Any=defaultNamedOptArg, Transpose: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Range
	# The method Range is actually a property, but must be used as a method to correctly pass the arguments
	def Range(self, Cell1: typing.Any=defaultNamedNotOptArg, Cell2: typing.Any=defaultNamedOptArg) -> Range:
		...
	def RefreshLinkedDataType(self, DomainID: typing.Any=defaultNamedOptArg) -> None:
		...
	def RemoveDuplicates(self, Columns: typing.Any=defaultNamedNotOptArg, Header: XlYesNoGuess=2) -> None:
		...
	def RemoveSubtotal(self) -> typing.Any:
		...
	def Replace(self, What: typing.Any=defaultNamedNotOptArg, Replacement: typing.Any=defaultNamedNotOptArg, LookAt: typing.Any=defaultNamedOptArg, SearchOrder: typing.Any=defaultNamedOptArg
			, MatchCase: typing.Any=defaultNamedOptArg, MatchByte: typing.Any=defaultNamedOptArg, SearchFormat: typing.Any=defaultNamedOptArg, ReplaceFormat: typing.Any=defaultNamedOptArg, FormulaVersion: typing.Any=defaultNamedOptArg) -> bool:
		...
	# Result is of type Range
	def RowDifferences(self, Comparison: typing.Any=defaultNamedNotOptArg) -> Range:
		...
	def Run(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetCellDataTypeFromCell(self, SourceCell: Range=defaultNamedNotOptArg) -> None:
		...
	# The method SetItem is actually a property, but must be used as a method to correctly pass the arguments
	def SetItem(self, RowIndex: typing.Any=defaultNamedNotOptArg, ColumnIndex: typing.Any=defaultNamedNotOptArg, arg2: typing.Any=defaultUnnamedArg) -> None:
		...
	def SetPhonetic(self) -> None:
		...
	# The method SetValue is actually a property, but must be used as a method to correctly pass the arguments
	def SetValue(self, RangeValueDataType: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	# The method Set_Default is actually a property, but must be used as a method to correctly pass the arguments
	def Set_Default(self, RowIndex: typing.Any=defaultNamedNotOptArg, ColumnIndex: typing.Any=defaultNamedOptArg, arg2: typing.Any=defaultUnnamedArg) -> None:
		...
	def Show(self) -> typing.Any:
		...
	def ShowCard(self) -> None:
		...
	def ShowDependents(self, Remove: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def ShowErrors(self) -> typing.Any:
		...
	def ShowPrecedents(self, Remove: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Sort(self, Key1: typing.Any=defaultNamedNotOptArg, Order1: XlSortOrder=1, Key2: typing.Any=defaultNamedNotOptArg, Type: typing.Any=defaultNamedNotOptArg
			, Order2: XlSortOrder=1, Key3: typing.Any=defaultNamedNotOptArg, Order3: XlSortOrder=1, Header: XlYesNoGuess=2, OrderCustom: typing.Any=defaultNamedNotOptArg
			, MatchCase: typing.Any=defaultNamedNotOptArg, Orientation: XlSortOrientation=2, SortMethod: XlSortMethod=1, DataOption1: XlSortDataOption=0, DataOption2: XlSortDataOption=0
			, DataOption3: XlSortDataOption=0, SubField1: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SortSpecial(self, SortMethod: XlSortMethod=1, Key1: typing.Any=defaultNamedNotOptArg, Order1: XlSortOrder=1, Type: typing.Any=defaultNamedNotOptArg
			, Key2: typing.Any=defaultNamedNotOptArg, Order2: XlSortOrder=1, Key3: typing.Any=defaultNamedNotOptArg, Order3: XlSortOrder=1, Header: XlYesNoGuess=2
			, OrderCustom: typing.Any=defaultNamedNotOptArg, MatchCase: typing.Any=defaultNamedNotOptArg, Orientation: XlSortOrientation=2, DataOption1: XlSortDataOption=0, DataOption2: XlSortDataOption=0
			, DataOption3: XlSortDataOption=0) -> typing.Any:
		...
	def Speak(self, SpeakDirection: typing.Any=defaultNamedOptArg, SpeakFormulas: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Range
	def SpecialCells(self, Type: XlCellType=defaultNamedNotOptArg, Value: typing.Any=defaultNamedOptArg) -> Range:
		...
	def SubscribeTo(self, Edition: str=defaultNamedNotOptArg, Format: XlSubscribeToFormat=-4158) -> typing.Any:
		...
	def Subtotal(self, GroupBy: int=defaultNamedNotOptArg, Function: XlConsolidationFunction=defaultNamedNotOptArg, TotalList: typing.Any=defaultNamedNotOptArg, Replace: typing.Any=defaultNamedNotOptArg
			, PageBreaks: typing.Any=defaultNamedNotOptArg, SummaryBelowData: XlSummaryRow=1) -> typing.Any:
		...
	def Table(self, RowInput: typing.Any=defaultNamedOptArg, ColumnInput: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def TextToColumns(self, Destination: typing.Any=defaultNamedNotOptArg, DataType: XlTextParsingType=1, TextQualifier: XlTextQualifier=1, ConsecutiveDelimiter: typing.Any=defaultNamedOptArg
			, Tab: typing.Any=defaultNamedOptArg, Semicolon: typing.Any=defaultNamedOptArg, Comma: typing.Any=defaultNamedOptArg, Space: typing.Any=defaultNamedOptArg, Other: typing.Any=defaultNamedOptArg
			, OtherChar: typing.Any=defaultNamedOptArg, FieldInfo: typing.Any=defaultNamedOptArg, DecimalSeparator: typing.Any=defaultNamedOptArg, ThousandsSeparator: typing.Any=defaultNamedOptArg, TrailingMinusNumbers: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def UnMerge(self) -> None:
		...
	def Ungroup(self) -> typing.Any:
		...
	def _AutoFilter(self, Field: typing.Any=defaultNamedNotOptArg, Criteria1: typing.Any=defaultNamedNotOptArg, Operator: XlAutoFilterOperator=1, Criteria2: typing.Any=defaultNamedOptArg
			, VisibleDropDown: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _BorderAround(self, LineStyle: typing.Any=defaultNamedNotOptArg, Weight: XlBorderWeight=2, ColorIndex: XlColorIndex=-4105, Color: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PasteSpecial(self, Paste: XlPasteType=-4104, Operation: XlPasteSpecialOperation=-4142, SkipBlanks: typing.Any=defaultNamedOptArg, Transpose: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _Replace(self, What: typing.Any=defaultNamedNotOptArg, Replacement: typing.Any=defaultNamedNotOptArg, LookAt: typing.Any=defaultNamedOptArg, SearchOrder: typing.Any=defaultNamedOptArg
			, MatchCase: typing.Any=defaultNamedOptArg, MatchByte: typing.Any=defaultNamedOptArg, SearchFormat: typing.Any=defaultNamedOptArg, ReplaceFormat: typing.Any=defaultNamedOptArg) -> bool:
		...
	def _Sort(self, Key1: typing.Any=defaultNamedNotOptArg, Order1: XlSortOrder=1, Key2: typing.Any=defaultNamedNotOptArg, Type: typing.Any=defaultNamedNotOptArg
			, Order2: XlSortOrder=1, Key3: typing.Any=defaultNamedNotOptArg, Order3: XlSortOrder=1, Header: XlYesNoGuess=2, OrderCustom: typing.Any=defaultNamedNotOptArg
			, MatchCase: typing.Any=defaultNamedNotOptArg, Orientation: XlSortOrientation=2, SortMethod: XlSortMethod=1, DataOption1: XlSortDataOption=0, DataOption2: XlSortDataOption=0
			, DataOption3: XlSortDataOption=0) -> typing.Any:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	AddIndent: typing.Any
	Address: typing.Any
	AddressLocal: typing.Any
	AllowEdit: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Areas' returns object of type 'Areas'
	Areas: Areas
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'Cells' returns object of type 'Range'
	Cells: Range
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Column: typing.Any
	ColumnWidth: typing.Any
		# Method 'Columns' returns object of type 'Range'
	Columns: Range
		# Method 'Comment' returns object of type 'Comment'
	Comment: Comment
		# Method 'CommentThreaded' returns object of type 'CommentThreaded'
	CommentThreaded: CommentThreaded
	Count: typing.Any
	CountLarge: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CurrentArray' returns object of type 'Range'
	CurrentArray: Range
		# Method 'CurrentRegion' returns object of type 'Range'
	CurrentRegion: Range
		# Method 'Dependents' returns object of type 'Range'
	Dependents: Range
		# Method 'DirectDependents' returns object of type 'Range'
	DirectDependents: Range
		# Method 'DirectPrecedents' returns object of type 'Range'
	DirectPrecedents: Range
		# Method 'DisplayFormat' returns object of type 'DisplayFormat'
	DisplayFormat: DisplayFormat
		# Method 'EntireColumn' returns object of type 'Range'
	EntireColumn: Range
		# Method 'EntireRow' returns object of type 'Range'
	EntireRow: Range
		# Method 'Errors' returns object of type 'Errors'
	Errors: Errors
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'FormatConditions' returns object of type 'FormatConditions'
	FormatConditions: FormatConditions
	Formula: typing.Any
	Formula2: typing.Any
	Formula2Local: typing.Any
	Formula2R1C1: typing.Any
	Formula2R1C1Local: typing.Any
	FormulaArray: typing.Any
	FormulaHidden: typing.Any
		# Method 'FormulaLabel' returns enumeration of type 'XlFormulaLabel'
	FormulaLabel: XlFormulaLabel
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
	HasArray: typing.Any
	HasFormula: typing.Any
	HasRichDataType: typing.Any
	HasSpill: typing.Any
	Height: typing.Any
	Hidden: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Hyperlinks' returns object of type 'Hyperlinks'
	Hyperlinks: Hyperlinks
	ID: typing.Any
	IndentLevel: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	LinkedDataTypeState: typing.Any
	ListHeaderRows: typing.Any
		# Method 'ListObject' returns object of type 'ListObject'
	ListObject: ListObject
		# Method 'LocationInTable' returns enumeration of type 'XlLocationInTable'
	LocationInTable: XlLocationInTable
	Locked: typing.Any
	MDX: typing.Any
		# Method 'MergeArea' returns object of type 'Range'
	MergeArea: Range
	MergeCells: typing.Any
	Name: typing.Any
		# Method 'Next' returns object of type 'Range'
	Next: Range
	NumberFormat: typing.Any
	NumberFormatLocal: typing.Any
		# Method 'Offset' returns object of type 'Range'
	Offset: Range
	Orientation: typing.Any
	OutlineLevel: typing.Any
	PageBreak: typing.Any
	Parent: typing.Any
		# Method 'Phonetic' returns object of type 'Phonetic'
	Phonetic: Phonetic
		# Method 'Phonetics' returns object of type 'Phonetics'
	Phonetics: Phonetics
		# Method 'PivotCell' returns object of type 'PivotCell'
	PivotCell: PivotCell
		# Method 'PivotField' returns object of type 'PivotField'
	PivotField: PivotField
		# Method 'PivotItem' returns object of type 'PivotItem'
	PivotItem: PivotItem
		# Method 'PivotTable' returns object of type 'PivotTable'
	PivotTable: PivotTable
		# Method 'Precedents' returns object of type 'Range'
	Precedents: Range
	PrefixCharacter: typing.Any
		# Method 'Previous' returns object of type 'Range'
	Previous: Range
		# Method 'QueryTable' returns object of type 'QueryTable'
	QueryTable: QueryTable
	ReadingOrder: typing.Any
		# Method 'Resize' returns object of type 'Range'
	Resize: Range
	Row: typing.Any
	RowHeight: typing.Any
		# Method 'Rows' returns object of type 'Range'
	Rows: Range
	SavedAsArray: typing.Any
		# Method 'ServerActions' returns object of type 'Actions'
	ServerActions: Actions
	ShowDetail: typing.Any
	ShrinkToFit: typing.Any
		# Method 'SmartTags' returns object of type 'SmartTags'
	SmartTags: SmartTags
		# Method 'SoundNote' returns object of type 'SoundNote'
	SoundNote: SoundNote
		# Method 'SparklineGroups' returns object of type 'SparklineGroups'
	SparklineGroups: SparklineGroups
		# Method 'SpillParent' returns object of type 'Range'
	SpillParent: Range
		# Method 'SpillingToRange' returns object of type 'Range'
	SpillingToRange: Range
	Style: typing.Any
	Summary: typing.Any
	Text: typing.Any
	Top: typing.Any
	UseStandardHeight: typing.Any
	UseStandardWidth: typing.Any
		# Method 'Validation' returns object of type 'Validation'
	Validation: Validation
	Value: typing.Any
	Value2: typing.Any
	VerticalAlignment: typing.Any
	Width: typing.Any
		# Method 'Worksheet' returns object of type 'Worksheet'
	Worksheet: Worksheet
	WrapText: typing.Any
		# Method 'XPath' returns object of type 'XPath'
	XPath: XPath
	_Default: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, RowIndex: typing.Any=defaultNamedOptArg, ColumnIndex: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Ranges(typing.Protocol):

	# Result is of type Range
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Range:
		...
	# Result is of type Range
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Range:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Range:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class RecentFile(typing.Protocol):

	def Delete(self) -> None:
		...
	# Result is of type Workbook
	def Open(self) -> Workbook:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Index: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Path: typing.Any
	def __iter__(self):
		...

class RecentFiles(typing.Protocol):

	# Result is of type RecentFile
	def Add(self, Name: str=defaultNamedNotOptArg) -> RecentFile:
		...
	# Result is of type RecentFile
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> RecentFile:
		...
	# Result is of type RecentFile
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> RecentFile:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Maximum: typing.Any
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> RecentFile:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Rectangle(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class Rectangles(typing.Protocol):

	# Result is of type Rectangle
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Rectangle:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class RectangularGradient(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'ColorStops' returns object of type 'ColorStops'
	ColorStops: ColorStops
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	RectangleBottom: typing.Any
	RectangleLeft: typing.Any
	RectangleRight: typing.Any
	RectangleTop: typing.Any
	def __iter__(self):
		...

class RefreshEvents:

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnQueryInterface(self, riid: typing.Any=defaultNamedNotOptArg, ppvObj: None=pythoncom.Missing):
#	def OnAddRef(self):
#	def OnRelease(self):
#	def OnGetTypeInfoCount(self, pctinfo: int=pythoncom.Missing):
#	def OnGetTypeInfo(self, itinfo: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, pptinfo: None=pythoncom.Missing):
#	def OnGetIDsOfNames(self, riid: typing.Any=defaultNamedNotOptArg, rgszNames: int=defaultNamedNotOptArg, cNames: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg
#			, rgdispid: int=pythoncom.Missing):
#	def OnInvoke(self, dispidMember: int=defaultNamedNotOptArg, riid: typing.Any=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, wFlags: int=defaultNamedNotOptArg
#			, pdispparams: typing.Any=defaultNamedNotOptArg, pvarResult: typing.Any=pythoncom.Missing, pexcepinfo: typing.Any=pythoncom.Missing, puArgErr: int=pythoncom.Missing):
#	def OnBeforeRefresh(self, Cancel: bool=defaultNamedNotOptArg):
#	def OnAfterRefresh(self, Success: bool=defaultNamedNotOptArg):
	...


class Research(typing.Protocol):

	def IsResearchService(self, ServiceID: str=defaultNamedNotOptArg) -> bool:
		...
	def Query(self, ServiceID: str=defaultNamedNotOptArg, QueryString: typing.Any=defaultNamedOptArg, QueryLanguage: typing.Any=defaultNamedOptArg, UseSelection: typing.Any=defaultNamedOptArg
			, LaunchQuery: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SetLanguagePair(self, LanguageFrom: int=defaultNamedNotOptArg, LanguageTo: int=defaultNamedNotOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class RoutingSlip(typing.Protocol):

	# The method GetRecipients is actually a property, but must be used as a method to correctly pass the arguments
	def GetRecipients(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Reset(self) -> typing.Any:
		...
	# The method SetRecipients is actually a property, but must be used as a method to correctly pass the arguments
	def SetRecipients(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Delivery' returns enumeration of type 'XlRoutingSlipDelivery'
	Delivery: XlRoutingSlipDelivery
	Message: typing.Any
	Parent: typing.Any
	Recipients: typing.Any
	ReturnWhenDone: typing.Any
		# Method 'Status' returns enumeration of type 'XlRoutingSlipStatus'
	Status: XlRoutingSlipStatus
	Subject: typing.Any
	TrackStatus: typing.Any
	def __iter__(self):
		...

class Scenario(typing.Protocol):

	def ChangeScenario(self, ChangingCells: typing.Any=defaultNamedNotOptArg, Values: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	# The method GetValues is actually a property, but must be used as a method to correctly pass the arguments
	def GetValues(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Show(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'ChangingCells' returns object of type 'Range'
	ChangingCells: Range
	Comment: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Hidden: typing.Any
	Index: typing.Any
	Locked: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Values: typing.Any
	def __iter__(self):
		...

class Scenarios(typing.Protocol):

	# Result is of type Scenario
	def Add(self, Name: str=defaultNamedNotOptArg, ChangingCells: typing.Any=defaultNamedNotOptArg, Values: typing.Any=defaultNamedOptArg, Comment: typing.Any=defaultNamedOptArg
			, Locked: typing.Any=defaultNamedOptArg, Hidden: typing.Any=defaultNamedOptArg) -> Scenario:
		...
	def CreateSummary(self, ReportType: XlSummaryReportType=1, ResultCells: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Scenario
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Scenario:
		...
	def Merge(self, Source: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ScrollBar(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	LargeChange: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SmallChange: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ScrollBars(typing.Protocol):

	# Result is of type ScrollBar
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> ScrollBar:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	LargeChange: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SmallChange: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Series(typing.Protocol):

	def ApplyCustomType(self, ChartType: XlChartType=defaultNamedNotOptArg) -> None:
		...
	def ApplyDataLabels(self, Type: XlDataLabelsType=2, LegendKey: typing.Any=defaultNamedOptArg, AutoText: typing.Any=defaultNamedOptArg, HasLeaderLines: typing.Any=defaultNamedOptArg
			, ShowSeriesName: typing.Any=defaultNamedOptArg, ShowCategoryName: typing.Any=defaultNamedOptArg, ShowValue: typing.Any=defaultNamedOptArg, ShowPercentage: typing.Any=defaultNamedOptArg, ShowBubbleSize: typing.Any=defaultNamedOptArg
			, Separator: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def ClearFormats(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def DataLabels(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Delete(self) -> typing.Any:
		...
	def ErrorBar(self, Direction: XlErrorBarDirection=defaultNamedNotOptArg, Include: XlErrorBarInclude=defaultNamedNotOptArg, Type: XlErrorBarType=defaultNamedNotOptArg, Amount: typing.Any=defaultNamedOptArg
			, MinusValues: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Paste(self) -> typing.Any:
		...
	def Points(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def Trendlines(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def _ApplyDataLabels(self, Type: XlDataLabelsType=2, LegendKey: typing.Any=defaultNamedOptArg, AutoText: typing.Any=defaultNamedOptArg, HasLeaderLines: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ApplyPictToEnd: typing.Any
	ApplyPictToFront: typing.Any
	ApplyPictToSides: typing.Any
		# Method 'AxisGroup' returns enumeration of type 'XlAxisGroup'
	AxisGroup: XlAxisGroup
		# Method 'BarShape' returns enumeration of type 'XlBarShape'
	BarShape: XlBarShape
		# Method 'Border' returns object of type 'Border'
	Border: Border
	BubbleSizes: typing.Any
		# Method 'ChartType' returns enumeration of type 'XlChartType'
	ChartType: XlChartType
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'ErrorBars' returns object of type 'ErrorBars'
	ErrorBars: ErrorBars
	Explosion: typing.Any
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Formula: typing.Any
	FormulaLocal: typing.Any
	FormulaR1C1: typing.Any
	FormulaR1C1Local: typing.Any
		# Method 'GeoMappingLevel' returns enumeration of type 'XlGeoMappingLevel'
	GeoMappingLevel: XlGeoMappingLevel
		# Method 'GeoProjectionType' returns enumeration of type 'XlGeoProjectionType'
	GeoProjectionType: XlGeoProjectionType
	Has3DEffect: typing.Any
	HasDataLabels: typing.Any
	HasErrorBars: typing.Any
	HasLeaderLines: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	InvertColor: typing.Any
	InvertColorIndex: typing.Any
	InvertIfNegative: typing.Any
	IsFiltered: typing.Any
		# Method 'LeaderLines' returns object of type 'LeaderLines'
	LeaderLines: LeaderLines
	MarkerBackgroundColor: typing.Any
		# Method 'MarkerBackgroundColorIndex' returns enumeration of type 'XlColorIndex'
	MarkerBackgroundColorIndex: XlColorIndex
	MarkerForegroundColor: typing.Any
		# Method 'MarkerForegroundColorIndex' returns enumeration of type 'XlColorIndex'
	MarkerForegroundColorIndex: XlColorIndex
	MarkerSize: typing.Any
		# Method 'MarkerStyle' returns enumeration of type 'XlMarkerStyle'
	MarkerStyle: XlMarkerStyle
	Name: typing.Any
	Parent: typing.Any
		# Method 'ParentDataLabelOption' returns enumeration of type 'XlParentDataLabelOptions'
	ParentDataLabelOption: XlParentDataLabelOptions
		# Method 'PictureType' returns enumeration of type 'XlChartPictureType'
	PictureType: XlChartPictureType
	PictureUnit: typing.Any
	PictureUnit2: typing.Any
	PlotColorIndex: typing.Any
	PlotOrder: typing.Any
	QuartileCalculationInclusiveMedian: typing.Any
		# Method 'RegionLabelOption' returns enumeration of type 'XlRegionLabelOptions'
	RegionLabelOption: XlRegionLabelOptions
		# Method 'SeriesColorGradientStyle' returns enumeration of type 'XlSeriesColorGradientStyle'
	SeriesColorGradientStyle: XlSeriesColorGradientStyle
		# Method 'SeriesColorMaxGradientStop' returns object of type 'ChartSeriesGradientStopData'
	SeriesColorMaxGradientStop: ChartSeriesGradientStopData
		# Method 'SeriesColorMidGradientStop' returns object of type 'ChartSeriesGradientStopData'
	SeriesColorMidGradientStop: ChartSeriesGradientStopData
		# Method 'SeriesColorMinGradientStop' returns object of type 'ChartSeriesGradientStopData'
	SeriesColorMinGradientStop: ChartSeriesGradientStopData
	Shadow: typing.Any
	Smooth: typing.Any
	Type: typing.Any
		# Method 'ValueSortOrder' returns enumeration of type 'XlValueSortOrder'
	ValueSortOrder: XlValueSortOrder
	Values: typing.Any
	XValues: typing.Any
	def __iter__(self):
		...

class SeriesCollection(typing.Protocol):

	# Result is of type Series
	def Add(self, Source: typing.Any=defaultNamedNotOptArg, Rowcol: XlRowCol=-4105, SeriesLabels: typing.Any=defaultNamedOptArg, CategoryLabels: typing.Any=defaultNamedOptArg
			, Replace: typing.Any=defaultNamedOptArg) -> Series:
		...
	def Extend(self, Source: typing.Any=defaultNamedNotOptArg, Rowcol: typing.Any=defaultNamedOptArg, CategoryLabels: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Series
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Series:
		...
	# Result is of type Series
	def NewSeries(self) -> Series:
		...
	def Paste(self, Rowcol: XlRowCol=-4105, SeriesLabels: typing.Any=defaultNamedOptArg, CategoryLabels: typing.Any=defaultNamedOptArg, Replace: typing.Any=defaultNamedOptArg
			, NewSeries: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Series
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Series:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Series:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SeriesGradientStopColorFormat(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'ObjectThemeColor' returns enumeration of type 'MsoThemeColorIndex'
	ObjectThemeColor: MsoThemeColorIndex
	Parent: typing.Any
	RGB: typing.Any
	TintAndShade: typing.Any
	Transparency: typing.Any
		# Method 'Type' returns enumeration of type 'MsoColorType'
	Type: MsoColorType
	def __iter__(self):
		...

class SeriesLines(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class ServerViewableItems(typing.Protocol):

	def Add(self, Obj: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Delete(self, Index: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def DeleteAll(self) -> None:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ShadowFormat(typing.Protocol):

	def IncrementOffsetX(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementOffsetY(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	Application: typing.Any
	Blur: typing.Any
	Creator: typing.Any
		# Method 'ForeColor' returns object of type 'ColorFormat'
	ForeColor: ColorFormat
		# Method 'Obscured' returns enumeration of type 'MsoTriState'
	Obscured: MsoTriState
	OffsetX: typing.Any
	OffsetY: typing.Any
	Parent: typing.Any
		# Method 'RotateWithShape' returns enumeration of type 'MsoTriState'
	RotateWithShape: MsoTriState
	Size: typing.Any
		# Method 'Style' returns enumeration of type 'MsoShadowStyle'
	Style: MsoShadowStyle
	Transparency: typing.Any
		# Method 'Type' returns enumeration of type 'MsoShadowType'
	Type: MsoShadowType
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	def __iter__(self):
		...

class Shape(typing.Protocol):

	def Apply(self) -> None:
		...
	def CanvasCropBottom(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def CanvasCropLeft(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def CanvasCropRight(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def CanvasCropTop(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def Copy(self) -> None:
		...
	def CopyPicture(self, Appearance: typing.Any=defaultNamedOptArg, Format: typing.Any=defaultNamedOptArg) -> None:
		...
	def Cut(self) -> None:
		...
	def Delete(self) -> None:
		...
	# Result is of type Shape
	def Duplicate(self) -> Shape:
		...
	def Flip(self, FlipCmd: MsoFlipCmd=defaultNamedNotOptArg) -> None:
		...
	def IncrementLeft(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotation(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementTop(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def PickUp(self) -> None:
		...
	def RerouteConnections(self) -> None:
		...
	def ScaleHeight(self, Factor: float=defaultNamedNotOptArg, RelativeToOriginalSize: MsoTriState=defaultNamedNotOptArg, Scale: typing.Any=defaultNamedOptArg) -> None:
		...
	def ScaleWidth(self, Factor: float=defaultNamedNotOptArg, RelativeToOriginalSize: MsoTriState=defaultNamedNotOptArg, Scale: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	def SetShapesDefaultProperties(self) -> None:
		...
	# Result is of type ShapeRange
	def Ungroup(self) -> ShapeRange:
		...
	def ZOrder(self, ZOrderCmd: MsoZOrderCmd=defaultNamedNotOptArg) -> None:
		...
		# Method 'Adjustments' returns object of type 'Adjustments'
	Adjustments: Adjustments
	AlternativeText: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoShapeType' returns enumeration of type 'MsoAutoShapeType'
	AutoShapeType: MsoAutoShapeType
		# Method 'BackgroundStyle' returns enumeration of type 'MsoBackgroundStyleIndex'
	BackgroundStyle: MsoBackgroundStyleIndex
		# Method 'BlackWhiteMode' returns enumeration of type 'MsoBlackWhiteMode'
	BlackWhiteMode: MsoBlackWhiteMode
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Callout' returns object of type 'CalloutFormat'
	Callout: CalloutFormat
		# Method 'CanvasItems' returns object of type 'CanvasShapes'
	CanvasItems: CanvasShapes
		# Method 'Chart' returns object of type 'Chart'
	Chart: Chart
		# Method 'Child' returns enumeration of type 'MsoTriState'
	Child: MsoTriState
	ConnectionSiteCount: typing.Any
		# Method 'Connector' returns enumeration of type 'MsoTriState'
	Connector: MsoTriState
		# Method 'ConnectorFormat' returns object of type 'ConnectorFormat'
	ConnectorFormat: ConnectorFormat
		# Method 'ControlFormat' returns object of type 'ControlFormat'
	ControlFormat: ControlFormat
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Decorative' returns enumeration of type 'MsoTriState'
	Decorative: MsoTriState
		# Method 'Diagram' returns object of type 'Diagram'
	Diagram: Diagram
		# Method 'DiagramNode' returns object of type 'DiagramNode'
	DiagramNode: DiagramNode
	DrawingObject: typing.Any
		# Method 'Fill' returns object of type 'FillFormat'
	Fill: FillFormat
		# Method 'FormControlType' returns enumeration of type 'XlFormControl'
	FormControlType: XlFormControl
		# Method 'Glow' returns object of type 'GlowFormat'
	Glow: GlowFormat
		# Method 'GraphicStyle' returns enumeration of type 'MsoGraphicStyleIndex'
	GraphicStyle: MsoGraphicStyleIndex
		# Method 'GroupItems' returns object of type 'GroupShapes'
	GroupItems: GroupShapes
		# Method 'HasChart' returns enumeration of type 'MsoTriState'
	HasChart: MsoTriState
		# Method 'HasDiagram' returns enumeration of type 'MsoTriState'
	HasDiagram: MsoTriState
		# Method 'HasDiagramNode' returns enumeration of type 'MsoTriState'
	HasDiagramNode: MsoTriState
		# Method 'HasSmartArt' returns enumeration of type 'MsoTriState'
	HasSmartArt: MsoTriState
	Height: typing.Any
		# Method 'HorizontalFlip' returns enumeration of type 'MsoTriState'
	HorizontalFlip: MsoTriState
		# Method 'Hyperlink' returns object of type 'Hyperlink'
	Hyperlink: Hyperlink
	ID: typing.Any
	Left: typing.Any
		# Method 'Line' returns object of type 'LineFormat'
	Line: LineFormat
		# Method 'LinkFormat' returns object of type 'LinkFormat'
	LinkFormat: LinkFormat
		# Method 'LockAspectRatio' returns enumeration of type 'MsoTriState'
	LockAspectRatio: MsoTriState
	Locked: typing.Any
		# Method 'Model3D' returns object of type 'Model3DFormat'
	Model3D: Model3DFormat
	Name: typing.Any
		# Method 'Nodes' returns object of type 'ShapeNodes'
	Nodes: ShapeNodes
		# Method 'OLEFormat' returns object of type 'OLEFormat'
	OLEFormat: OLEFormat
	OnAction: typing.Any
	Parent: typing.Any
		# Method 'ParentGroup' returns object of type 'Shape'
	ParentGroup: Shape
		# Method 'PictureFormat' returns object of type 'PictureFormat'
	PictureFormat: PictureFormat
		# Method 'Placement' returns enumeration of type 'XlPlacement'
	Placement: XlPlacement
		# Method 'Reflection' returns object of type 'ReflectionFormat'
	Reflection: ReflectionFormat
	Rotation: typing.Any
		# Method 'Script' returns object of type 'Script'
	Script: Script
		# Method 'Shadow' returns object of type 'ShadowFormat'
	Shadow: ShadowFormat
		# Method 'ShapeStyle' returns enumeration of type 'MsoShapeStyleIndex'
	ShapeStyle: MsoShapeStyleIndex
		# Method 'SmartArt' returns object of type 'SmartArt'
	SmartArt: SmartArt
		# Method 'SoftEdge' returns object of type 'SoftEdgeFormat'
	SoftEdge: SoftEdgeFormat
		# Method 'TextEffect' returns object of type 'TextEffectFormat'
	TextEffect: TextEffectFormat
		# Method 'TextFrame' returns object of type 'TextFrame'
	TextFrame: TextFrame
		# Method 'TextFrame2' returns object of type 'TextFrame2'
	TextFrame2: TextFrame2
		# Method 'ThreeD' returns object of type 'ThreeDFormat'
	ThreeD: ThreeDFormat
	Title: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
		# Method 'Type' returns enumeration of type 'MsoShapeType'
	Type: MsoShapeType
		# Method 'VerticalFlip' returns enumeration of type 'MsoTriState'
	VerticalFlip: MsoTriState
	Vertices: typing.Any
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	Width: typing.Any
	ZOrderPosition: typing.Any
	def __iter__(self):
		...

class ShapeNode(typing.Protocol):

	Application: typing.Any
	Creator: typing.Any
		# Method 'EditingType' returns enumeration of type 'MsoEditingType'
	EditingType: MsoEditingType
	Parent: typing.Any
	Points: typing.Any
		# Method 'SegmentType' returns enumeration of type 'MsoSegmentType'
	SegmentType: MsoSegmentType
	def __iter__(self):
		...

class ShapeNodes(typing.Protocol):

	def Delete(self, Index: int=defaultNamedNotOptArg) -> None:
		...
	def Insert(self, Index: int=defaultNamedNotOptArg, SegmentType: MsoSegmentType=defaultNamedNotOptArg, EditingType: MsoEditingType=defaultNamedNotOptArg, X1: float=defaultNamedNotOptArg
			, Y1: float=defaultNamedNotOptArg, X2: float=0.0, Y2: float=0.0, X3: float=0.0, Y3: float=0.0) -> None:
		...
	# Result is of type ShapeNode
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> ShapeNode:
		...
	def SetEditingType(self, Index: int=defaultNamedNotOptArg, EditingType: MsoEditingType=defaultNamedNotOptArg) -> None:
		...
	def SetPosition(self, Index: int=defaultNamedNotOptArg, X1: float=defaultNamedNotOptArg, Y1: float=defaultNamedNotOptArg) -> None:
		...
	def SetSegmentType(self, Index: int=defaultNamedNotOptArg, SegmentType: MsoSegmentType=defaultNamedNotOptArg) -> None:
		...
	Application: typing.Any
	Count: typing.Any
	Creator: typing.Any
	Parent: typing.Any
	# Default method for this class is 'Item'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> ShapeNode:
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class ShapeRange(typing.Protocol):

	def Align(self, AlignCmd: MsoAlignCmd=defaultNamedNotOptArg, RelativeTo: MsoTriState=defaultNamedNotOptArg) -> None:
		...
	def Apply(self) -> None:
		...
	def CanvasCropBottom(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def CanvasCropLeft(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def CanvasCropRight(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def CanvasCropTop(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def Distribute(self, DistributeCmd: MsoDistributeCmd=defaultNamedNotOptArg, RelativeTo: MsoTriState=defaultNamedNotOptArg) -> None:
		...
	# Result is of type ShapeRange
	def Duplicate(self) -> ShapeRange:
		...
	def Flip(self, FlipCmd: MsoFlipCmd=defaultNamedNotOptArg) -> None:
		...
	# Result is of type Shape
	def Group(self) -> Shape:
		...
	def IncrementLeft(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotation(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementTop(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	# Result is of type Shape
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	def PickUp(self) -> None:
		...
	# Result is of type Shape
	def Regroup(self) -> Shape:
		...
	def RerouteConnections(self) -> None:
		...
	def ScaleHeight(self, Factor: float=defaultNamedNotOptArg, RelativeToOriginalSize: MsoTriState=defaultNamedNotOptArg, Scale: typing.Any=defaultNamedOptArg) -> None:
		...
	def ScaleWidth(self, Factor: float=defaultNamedNotOptArg, RelativeToOriginalSize: MsoTriState=defaultNamedNotOptArg, Scale: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	def SetShapesDefaultProperties(self) -> None:
		...
	# Result is of type ShapeRange
	def Ungroup(self) -> ShapeRange:
		...
	def ZOrder(self, ZOrderCmd: MsoZOrderCmd=defaultNamedNotOptArg) -> None:
		...
	# Result is of type Shape
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
		# Method 'Adjustments' returns object of type 'Adjustments'
	Adjustments: Adjustments
	AlternativeText: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoShapeType' returns enumeration of type 'MsoAutoShapeType'
	AutoShapeType: MsoAutoShapeType
		# Method 'BackgroundStyle' returns enumeration of type 'MsoBackgroundStyleIndex'
	BackgroundStyle: MsoBackgroundStyleIndex
		# Method 'BlackWhiteMode' returns enumeration of type 'MsoBlackWhiteMode'
	BlackWhiteMode: MsoBlackWhiteMode
		# Method 'Callout' returns object of type 'CalloutFormat'
	Callout: CalloutFormat
		# Method 'CanvasItems' returns object of type 'CanvasShapes'
	CanvasItems: CanvasShapes
		# Method 'Chart' returns object of type 'Chart'
	Chart: Chart
		# Method 'Child' returns enumeration of type 'MsoTriState'
	Child: MsoTriState
	ConnectionSiteCount: typing.Any
		# Method 'Connector' returns enumeration of type 'MsoTriState'
	Connector: MsoTriState
		# Method 'ConnectorFormat' returns object of type 'ConnectorFormat'
	ConnectorFormat: ConnectorFormat
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Decorative' returns enumeration of type 'MsoTriState'
	Decorative: MsoTriState
		# Method 'Diagram' returns object of type 'Diagram'
	Diagram: Diagram
		# Method 'DiagramNode' returns object of type 'DiagramNode'
	DiagramNode: DiagramNode
		# Method 'Fill' returns object of type 'FillFormat'
	Fill: FillFormat
		# Method 'Glow' returns object of type 'GlowFormat'
	Glow: GlowFormat
		# Method 'GraphicStyle' returns enumeration of type 'MsoGraphicStyleIndex'
	GraphicStyle: MsoGraphicStyleIndex
		# Method 'GroupItems' returns object of type 'GroupShapes'
	GroupItems: GroupShapes
		# Method 'HasChart' returns enumeration of type 'MsoTriState'
	HasChart: MsoTriState
		# Method 'HasDiagram' returns enumeration of type 'MsoTriState'
	HasDiagram: MsoTriState
		# Method 'HasDiagramNode' returns enumeration of type 'MsoTriState'
	HasDiagramNode: MsoTriState
	Height: typing.Any
		# Method 'HorizontalFlip' returns enumeration of type 'MsoTriState'
	HorizontalFlip: MsoTriState
	ID: typing.Any
	Left: typing.Any
		# Method 'Line' returns object of type 'LineFormat'
	Line: LineFormat
		# Method 'LockAspectRatio' returns enumeration of type 'MsoTriState'
	LockAspectRatio: MsoTriState
		# Method 'Model3D' returns object of type 'Model3DFormat'
	Model3D: Model3DFormat
	Name: typing.Any
		# Method 'Nodes' returns object of type 'ShapeNodes'
	Nodes: ShapeNodes
	Parent: typing.Any
		# Method 'ParentGroup' returns object of type 'Shape'
	ParentGroup: Shape
		# Method 'PictureFormat' returns object of type 'PictureFormat'
	PictureFormat: PictureFormat
		# Method 'Reflection' returns object of type 'ReflectionFormat'
	Reflection: ReflectionFormat
	Rotation: typing.Any
		# Method 'Shadow' returns object of type 'ShadowFormat'
	Shadow: ShadowFormat
		# Method 'ShapeStyle' returns enumeration of type 'MsoShapeStyleIndex'
	ShapeStyle: MsoShapeStyleIndex
		# Method 'SoftEdge' returns object of type 'SoftEdgeFormat'
	SoftEdge: SoftEdgeFormat
		# Method 'TextEffect' returns object of type 'TextEffectFormat'
	TextEffect: TextEffectFormat
		# Method 'TextFrame' returns object of type 'TextFrame'
	TextFrame: TextFrame
		# Method 'TextFrame2' returns object of type 'TextFrame2'
	TextFrame2: TextFrame2
		# Method 'ThreeD' returns object of type 'ThreeDFormat'
	ThreeD: ThreeDFormat
	Title: typing.Any
	Top: typing.Any
		# Method 'Type' returns enumeration of type 'MsoShapeType'
	Type: MsoShapeType
		# Method 'VerticalFlip' returns enumeration of type 'MsoTriState'
	VerticalFlip: MsoTriState
	Vertices: typing.Any
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	Width: typing.Any
	ZOrderPosition: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Shapes(typing.Protocol):

	# Result is of type Shape
	def Add3DModel(self, Filename: str=defaultNamedNotOptArg, LinkToFile: typing.Any=defaultNamedOptArg, SaveWithDocument: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg
			, Top: typing.Any=defaultNamedOptArg, Width: typing.Any=defaultNamedOptArg, Height: typing.Any=defaultNamedOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddCallout(self, Type: MsoCalloutType=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg
			, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddCanvas(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddChart(self, XlChartType: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg, Width: typing.Any=defaultNamedOptArg
			, Height: typing.Any=defaultNamedOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddChart2(self, Style: typing.Any=defaultNamedOptArg, XlChartType: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg
			, Width: typing.Any=defaultNamedOptArg, Height: typing.Any=defaultNamedOptArg, NewLayout: typing.Any=defaultNamedOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddConnector(self, Type: MsoConnectorType=defaultNamedNotOptArg, BeginX: float=defaultNamedNotOptArg, BeginY: float=defaultNamedNotOptArg, EndX: float=defaultNamedNotOptArg
			, EndY: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddCurve(self, SafeArrayOfPoints: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddDiagram(self, Type: MsoDiagramType=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg
			, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddFormControl(self, Type: XlFormControl=defaultNamedNotOptArg, Left: int=defaultNamedNotOptArg, Top: int=defaultNamedNotOptArg, Width: int=defaultNamedNotOptArg
			, Height: int=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddLabel(self, Orientation: MsoTextOrientation=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg
			, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddLine(self, BeginX: float=defaultNamedNotOptArg, BeginY: float=defaultNamedNotOptArg, EndX: float=defaultNamedNotOptArg, EndY: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddOLEObject(self, ClassType: typing.Any=defaultNamedOptArg, Filename: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg, DisplayAsIcon: typing.Any=defaultNamedOptArg
			, IconFileName: typing.Any=defaultNamedOptArg, IconIndex: typing.Any=defaultNamedOptArg, IconLabel: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg
			, Width: typing.Any=defaultNamedOptArg, Height: typing.Any=defaultNamedOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddPicture(self, Filename: str=defaultNamedNotOptArg, LinkToFile: MsoTriState=defaultNamedNotOptArg, SaveWithDocument: MsoTriState=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg
			, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddPicture2(self, Filename: str=defaultNamedNotOptArg, LinkToFile: MsoTriState=defaultNamedNotOptArg, SaveWithDocument: MsoTriState=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg
			, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg, Compress: MsoPictureCompress=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddPolyline(self, SafeArrayOfPoints: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddShape(self, Type: MsoAutoShapeType=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg
			, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddSmartArt(self, Layout: SmartArtLayout=defaultNamedNotOptArg, Left: typing.Any=defaultNamedOptArg, Top: typing.Any=defaultNamedOptArg, Width: typing.Any=defaultNamedOptArg
			, Height: typing.Any=defaultNamedOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddTextEffect(self, PresetTextEffect: MsoPresetTextEffect=defaultNamedNotOptArg, Text: str=defaultNamedNotOptArg, FontName: str=defaultNamedNotOptArg, FontSize: float=defaultNamedNotOptArg
			, FontBold: MsoTriState=defaultNamedNotOptArg, FontItalic: MsoTriState=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type Shape
	def AddTextbox(self, Orientation: MsoTextOrientation=defaultNamedNotOptArg, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg
			, Height: float=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type FreeformBuilder
	def BuildFreeform(self, EditingType: MsoEditingType=defaultNamedNotOptArg, X1: float=defaultNamedNotOptArg, Y1: float=defaultNamedNotOptArg) -> FreeformBuilder:
		...
	# Result is of type Shape
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	# Result is of type ShapeRange
	# The method Range is actually a property, but must be used as a method to correctly pass the arguments
	def Range(self, Index: typing.Any=defaultNamedNotOptArg) -> ShapeRange:
		...
	def SelectAll(self) -> None:
		...
	# Result is of type Shape
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Shape:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SheetViews(typing.Protocol):

	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Sheets(typing.Protocol):

	def Add(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Add2(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, NewLayout: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def FillAcrossSheets(self, Range: Range=defaultNamedNotOptArg, Type: XlFillWith=-4104) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg, IgnorePrintAreas: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
	Parent: typing.Any
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
	Visible: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Slicer(typing.Protocol):

	def Copy(self) -> None:
		...
	def Cut(self) -> None:
		...
	def Delete(self) -> None:
		...
		# Method 'ActiveItem' returns object of type 'SlicerItem'
	ActiveItem: SlicerItem
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
	ColumnWidth: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisableMoveResizeUI: typing.Any
	DisplayHeader: typing.Any
	Height: typing.Any
	Left: typing.Any
	Locked: typing.Any
	Name: typing.Any
	NumberOfColumns: typing.Any
	Parent: typing.Any
	RowHeight: typing.Any
		# Method 'Shape' returns object of type 'Shape'
	Shape: Shape
		# Method 'SlicerCache' returns object of type 'SlicerCache'
	SlicerCache: SlicerCache
		# Method 'SlicerCacheLevel' returns object of type 'SlicerCacheLevel'
	SlicerCacheLevel: SlicerCacheLevel
		# Method 'SlicerCacheType' returns enumeration of type 'XlSlicerCacheType'
	SlicerCacheType: XlSlicerCacheType
	Style: typing.Any
		# Method 'TimelineViewState' returns object of type 'TimelineViewState'
	TimelineViewState: TimelineViewState
	Top: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class SlicerCache(typing.Protocol):

	def ClearAllFilters(self) -> None:
		...
	def ClearDateFilter(self) -> None:
		...
	def ClearManualFilter(self) -> None:
		...
	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CrossFilterType' returns enumeration of type 'XlSlicerCrossFilterType'
	CrossFilterType: XlSlicerCrossFilterType
	FilterCleared: typing.Any
	Index: typing.Any
	List: typing.Any
		# Method 'ListObject' returns object of type 'ListObject'
	ListObject: ListObject
	Name: typing.Any
	OLAP: typing.Any
	Parent: typing.Any
		# Method 'PivotTables' returns object of type 'SlicerPivotTables'
	PivotTables: SlicerPivotTables
	RequireManualUpdate: typing.Any
	ShowAllItems: typing.Any
		# Method 'SlicerCacheLevels' returns object of type 'SlicerCacheLevels'
	SlicerCacheLevels: SlicerCacheLevels
		# Method 'SlicerCacheType' returns enumeration of type 'XlSlicerCacheType'
	SlicerCacheType: XlSlicerCacheType
		# Method 'SlicerItems' returns object of type 'SlicerItems'
	SlicerItems: SlicerItems
		# Method 'Slicers' returns object of type 'Slicers'
	Slicers: Slicers
		# Method 'SortItems' returns enumeration of type 'XlSlicerSort'
	SortItems: XlSlicerSort
	SortUsingCustomLists: typing.Any
	SourceName: typing.Any
		# Method 'SourceType' returns enumeration of type 'XlPivotTableSourceType'
	SourceType: XlPivotTableSourceType
		# Method 'TimelineState' returns object of type 'TimelineState'
	TimelineState: TimelineState
		# Method 'VisibleSlicerItems' returns object of type 'SlicerItems'
	VisibleSlicerItems: SlicerItems
	VisibleSlicerItemsList: typing.Any
		# Method 'WorkbookConnection' returns object of type 'WorkbookConnection'
	WorkbookConnection: WorkbookConnection
	def __iter__(self):
		...

class SlicerCacheLevel(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CrossFilterType' returns enumeration of type 'XlSlicerCrossFilterType'
	CrossFilterType: XlSlicerCrossFilterType
	Name: typing.Any
	Ordinal: typing.Any
	Parent: typing.Any
		# Method 'SlicerItems' returns object of type 'SlicerItems'
	SlicerItems: SlicerItems
		# Method 'SortItems' returns enumeration of type 'XlSlicerSort'
	SortItems: XlSlicerSort
	VisibleSlicerItemsList: typing.Any
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SlicerCacheLevels(typing.Protocol):

	# Result is of type SlicerCacheLevel
	# The method GetItem is actually a property, but must be used as a method to correctly pass the arguments
	def GetItem(self, Level: typing.Any=defaultNamedOptArg) -> SlicerCacheLevel:
		...
	# Result is of type SlicerCacheLevel
	# The method Get_Default is actually a property, but must be used as a method to correctly pass the arguments
	def Get_Default(self, Level: typing.Any=defaultNamedOptArg) -> SlicerCacheLevel:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Item' returns object of type 'SlicerCacheLevel'
	Item: SlicerCacheLevel
	Parent: typing.Any
		# Method '_Default' returns object of type 'SlicerCacheLevel'
	_Default: SlicerCacheLevel
	# Default method for this class is '_Default'
	def __call__(self, Level: typing.Any=defaultNamedOptArg) -> SlicerCacheLevel:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SlicerCaches(typing.Protocol):

	# Result is of type SlicerCache
	def Add(self, Source: typing.Any=defaultNamedNotOptArg, SourceField: typing.Any=defaultNamedNotOptArg, Name: typing.Any=defaultNamedOptArg) -> SlicerCache:
		...
	# Result is of type SlicerCache
	def Add2(self, Source: typing.Any=defaultNamedNotOptArg, SourceField: typing.Any=defaultNamedNotOptArg, Name: typing.Any=defaultNamedOptArg, SlicerCacheType: typing.Any=defaultNamedOptArg) -> SlicerCache:
		...
	# Result is of type SlicerCache
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> SlicerCache:
		...
	# Result is of type SlicerCache
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SlicerCache:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SlicerCache:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SlicerItem(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Caption: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	HasData: typing.Any
	Name: typing.Any
		# Method 'Parent' returns object of type 'SlicerCache'
	Parent: SlicerCache
	Selected: typing.Any
	SourceName: typing.Any
	SourceNameStandard: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class SlicerItems(typing.Protocol):

	# Result is of type SlicerItem
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> SlicerItem:
		...
	# Result is of type SlicerItem
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SlicerItem:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SlicerItem:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SlicerPivotTables(typing.Protocol):

	def AddPivotTable(self, PivotTable: PivotTable=defaultNamedNotOptArg) -> None:
		...
	# Result is of type PivotTable
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotTable:
		...
	def RemovePivotTable(self, PivotTable: typing.Any=defaultNamedNotOptArg) -> None:
		...
	# Result is of type PivotTable
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotTable:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> PivotTable:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Slicers(typing.Protocol):

	# Result is of type Slicer
	def Add(self, SlicerDestination: typing.Any=defaultNamedNotOptArg, Level: typing.Any=defaultNamedOptArg, Name: typing.Any=defaultNamedOptArg, Caption: typing.Any=defaultNamedOptArg
			, Top: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg, Width: typing.Any=defaultNamedOptArg, Height: typing.Any=defaultNamedOptArg) -> Slicer:
		...
	# Result is of type Slicer
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Slicer:
		...
	# Result is of type Slicer
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Slicer:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Slicer:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SmartTag(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DownloadURL: typing.Any
	Name: typing.Any
	Parent: typing.Any
		# Method 'Properties' returns object of type 'CustomProperties'
	Properties: CustomProperties
		# Method 'Range' returns object of type 'Range'
	Range: Range
		# Method 'SmartTagActions' returns object of type 'SmartTagActions'
	SmartTagActions: SmartTagActions
	XML: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class SmartTagAction(typing.Protocol):

	def Execute(self) -> None:
		...
	ActiveXControl: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	CheckboxState: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	ExpandHelp: typing.Any
	ListSelection: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PresentInPane: typing.Any
	RadioGroupSelection: typing.Any
	TextboxText: typing.Any
		# Method 'Type' returns enumeration of type 'XlSmartTagControlType'
	Type: XlSmartTagControlType
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class SmartTagActions(typing.Protocol):

	# Result is of type SmartTagAction
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTagAction:
		...
	# Result is of type SmartTagAction
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTagAction:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTagAction:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SmartTagOptions(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DisplaySmartTags' returns enumeration of type 'XlSmartTagDisplayMode'
	DisplaySmartTags: XlSmartTagDisplayMode
	EmbedSmartTags: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class SmartTagRecognizer(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	FullName: typing.Any
	Parent: typing.Any
	_Default: typing.Any
	progID: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class SmartTagRecognizers(typing.Protocol):

	# Result is of type SmartTagRecognizer
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTagRecognizer:
		...
	# Result is of type SmartTagRecognizer
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTagRecognizer:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Recognize: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTagRecognizer:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SmartTags(typing.Protocol):

	# Result is of type SmartTag
	def Add(self, SmartTagType: str=defaultNamedNotOptArg) -> SmartTag:
		...
	# Result is of type SmartTag
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTag:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SmartTag:
		...
	def __iter__(self):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Sort(typing.Protocol):

	def Apply(self) -> None:
		...
	def SetRange(self, Rng: Range=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Header' returns enumeration of type 'XlYesNoGuess'
	Header: XlYesNoGuess
	MatchCase: typing.Any
		# Method 'Orientation' returns enumeration of type 'XlSortOrientation'
	Orientation: XlSortOrientation
	Parent: typing.Any
		# Method 'Rng' returns object of type 'Range'
	Rng: Range
		# Method 'SortFields' returns object of type 'SortFields'
	SortFields: SortFields
		# Method 'SortMethod' returns enumeration of type 'XlSortMethod'
	SortMethod: XlSortMethod
	def __iter__(self):
		...

class SortField(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyKey(self, Key: Range=defaultNamedNotOptArg) -> None:
		...
	def SetIcon(self, Icon: Icon=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	CustomOrder: typing.Any
		# Method 'DataOption' returns enumeration of type 'XlSortDataOption'
	DataOption: XlSortDataOption
		# Method 'Key' returns object of type 'Range'
	Key: Range
		# Method 'Order' returns enumeration of type 'XlSortOrder'
	Order: XlSortOrder
	Parent: typing.Any
	Priority: typing.Any
		# Method 'SortOn' returns enumeration of type 'XlSortOn'
	SortOn: XlSortOn
	SortOnValue: typing.Any
	SubField: typing.Any
	def __iter__(self):
		...

class SortFields(typing.Protocol):

	# Result is of type SortField
	def Add(self, Key: Range=defaultNamedNotOptArg, SortOn: typing.Any=defaultNamedOptArg, Order: typing.Any=defaultNamedOptArg, CustomOrder: typing.Any=defaultNamedOptArg
			, DataOption: typing.Any=defaultNamedOptArg) -> SortField:
		...
	# Result is of type SortField
	def Add2(self, Key: Range=defaultNamedNotOptArg, SortOn: typing.Any=defaultNamedOptArg, Order: typing.Any=defaultNamedOptArg, CustomOrder: typing.Any=defaultNamedOptArg
			, DataOption: typing.Any=defaultNamedOptArg, SubField: typing.Any=defaultNamedOptArg) -> SortField:
		...
	def Clear(self) -> None:
		...
	# Result is of type SortField
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> SortField:
		...
	# Result is of type SortField
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SortField:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SortField:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SoundNote(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def Import(self, Filename: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Play(self) -> typing.Any:
		...
	def Record(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class SparkAxes(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Horizontal' returns object of type 'SparkHorizontalAxis'
	Horizontal: SparkHorizontalAxis
	Parent: typing.Any
		# Method 'Vertical' returns object of type 'SparkVerticalAxis'
	Vertical: SparkVerticalAxis
	def __iter__(self):
		...

class SparkColor(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Color' returns object of type 'FormatColor'
	Color: FormatColor
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Visible: typing.Any
	def __iter__(self):
		...

class SparkHorizontalAxis(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Axis' returns object of type 'SparkColor'
	Axis: SparkColor
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	IsDateAxis: typing.Any
	Parent: typing.Any
	RightToLeftPlotOrder: typing.Any
	def __iter__(self):
		...

class SparkPoints(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Firstpoint' returns object of type 'SparkColor'
	Firstpoint: SparkColor
		# Method 'Highpoint' returns object of type 'SparkColor'
	Highpoint: SparkColor
		# Method 'Lastpoint' returns object of type 'SparkColor'
	Lastpoint: SparkColor
		# Method 'Lowpoint' returns object of type 'SparkColor'
	Lowpoint: SparkColor
		# Method 'Markers' returns object of type 'SparkColor'
	Markers: SparkColor
		# Method 'Negative' returns object of type 'SparkColor'
	Negative: SparkColor
	Parent: typing.Any
	def __iter__(self):
		...

class SparkVerticalAxis(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	CustomMaxScaleValue: typing.Any
	CustomMinScaleValue: typing.Any
		# Method 'MaxScaleType' returns enumeration of type 'XlSparkScale'
	MaxScaleType: XlSparkScale
		# Method 'MinScaleType' returns enumeration of type 'XlSparkScale'
	MinScaleType: XlSparkScale
	Parent: typing.Any
	def __iter__(self):
		...

class Sparkline(typing.Protocol):

	def ModifyLocation(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def ModifySourceData(self, Formula: str=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Location' returns object of type 'Range'
	Location: Range
	Parent: typing.Any
	SourceData: typing.Any
	def __iter__(self):
		...

class SparklineGroup(typing.Protocol):

	def Delete(self) -> None:
		...
	# Result is of type Sparkline
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Sparkline:
		...
	def Modify(self, Location: Range=defaultNamedNotOptArg, SourceData: str=defaultNamedNotOptArg) -> None:
		...
	def ModifyDateRange(self, DateRange: str=defaultNamedNotOptArg) -> None:
		...
	def ModifyLocation(self, Location: Range=defaultNamedNotOptArg) -> None:
		...
	def ModifySourceData(self, SourceData: str=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Axes' returns object of type 'SparkAxes'
	Axes: SparkAxes
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DateRange: typing.Any
		# Method 'DisplayBlanksAs' returns enumeration of type 'XlDisplayBlanksAs'
	DisplayBlanksAs: XlDisplayBlanksAs
	DisplayHidden: typing.Any
	LineWeight: typing.Any
		# Method 'Location' returns object of type 'Range'
	Location: Range
	Parent: typing.Any
		# Method 'PlotBy' returns enumeration of type 'XlSparklineRowCol'
	PlotBy: XlSparklineRowCol
		# Method 'Points' returns object of type 'SparkPoints'
	Points: SparkPoints
		# Method 'SeriesColor' returns object of type 'FormatColor'
	SeriesColor: FormatColor
	SourceData: typing.Any
		# Method 'Type' returns enumeration of type 'XlSparkType'
	Type: XlSparkType
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class SparklineGroups(typing.Protocol):

	# Result is of type SparklineGroup
	def Add(self, Type: XlSparkType=defaultNamedNotOptArg, SourceData: str=defaultNamedNotOptArg) -> SparklineGroup:
		...
	def Clear(self) -> None:
		...
	def ClearGroups(self) -> None:
		...
	def Group(self, Location: Range=defaultNamedNotOptArg) -> None:
		...
	# Result is of type SparklineGroup
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> SparklineGroup:
		...
	def Ungroup(self) -> None:
		...
	# Result is of type SparklineGroup
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> SparklineGroup:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> SparklineGroup:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Speech(typing.Protocol):

	def Speak(self, Text: str=defaultNamedNotOptArg, SpeakAsync: typing.Any=defaultNamedOptArg, SpeakXML: typing.Any=defaultNamedOptArg, Purge: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Direction' returns enumeration of type 'XlSpeakDirection'
	Direction: XlSpeakDirection
	SpeakCellOnEnter: typing.Any
	def __iter__(self):
		...

class SpellingOptions(typing.Protocol):

		# Method 'ArabicModes' returns enumeration of type 'XlArabicModes'
	ArabicModes: XlArabicModes
	ArabicStrictAlefHamza: typing.Any
	ArabicStrictFinalYaa: typing.Any
	ArabicStrictTaaMarboota: typing.Any
		# Method 'BrazilReform' returns enumeration of type 'XlPortugueseReform'
	BrazilReform: XlPortugueseReform
	DictLang: typing.Any
	GermanPostReform: typing.Any
		# Method 'HebrewModes' returns enumeration of type 'XlHebrewModes'
	HebrewModes: XlHebrewModes
	IgnoreCaps: typing.Any
	IgnoreFileNames: typing.Any
	IgnoreMixedDigits: typing.Any
	KoreanCombineAux: typing.Any
	KoreanProcessCompound: typing.Any
	KoreanUseAutoChangeList: typing.Any
		# Method 'PortugalReform' returns enumeration of type 'XlPortugueseReform'
	PortugalReform: XlPortugueseReform
	RussianStrictE: typing.Any
		# Method 'SpanishModes' returns enumeration of type 'XlSpanishModes'
	SpanishModes: XlSpanishModes
	SuggestMainOnly: typing.Any
	UserDict: typing.Any
	def __iter__(self):
		...

class Spinner(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SmallChange: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class Spinners(typing.Protocol):

	# Result is of type Spinner
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> Spinner:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Display3DShading: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	Locked: typing.Any
	Max: typing.Any
	Min: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SmallChange: typing.Any
	Top: typing.Any
	Value: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Style(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
	BuiltIn: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	FormulaHidden: typing.Any
		# Method 'HorizontalAlignment' returns enumeration of type 'XlHAlign'
	HorizontalAlignment: XlHAlign
	IncludeAlignment: typing.Any
	IncludeBorder: typing.Any
	IncludeFont: typing.Any
	IncludeNumber: typing.Any
	IncludePatterns: typing.Any
	IncludeProtection: typing.Any
	IndentLevel: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Locked: typing.Any
	MergeCells: typing.Any
	Name: typing.Any
	NameLocal: typing.Any
	NumberFormat: typing.Any
	NumberFormatLocal: typing.Any
		# Method 'Orientation' returns enumeration of type 'XlOrientation'
	Orientation: XlOrientation
	Parent: typing.Any
	ReadingOrder: typing.Any
	ShrinkToFit: typing.Any
	Value: typing.Any
		# Method 'VerticalAlignment' returns enumeration of type 'XlVAlign'
	VerticalAlignment: XlVAlign
	WrapText: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class Styles(typing.Protocol):

	# Result is of type Style
	def Add(self, Name: str=defaultNamedNotOptArg, BasedOn: typing.Any=defaultNamedOptArg) -> Style:
		...
	# Result is of type Style
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Style:
		...
	def Merge(self, Workbook: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	# Result is of type Style
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Style:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Style:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Tab(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Color: typing.Any
		# Method 'ColorIndex' returns enumeration of type 'XlColorIndex'
	ColorIndex: XlColorIndex
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
		# Method 'ThemeColor' returns enumeration of type 'XlThemeColor'
	ThemeColor: XlThemeColor
	TintAndShade: typing.Any
	def __iter__(self):
		...

class TableObject(typing.Protocol):

	def Delete(self) -> None:
		...
	def Refresh(self) -> bool:
		...
	AdjustColumnWidth: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Destination' returns object of type 'Range'
	Destination: Range
	EnableEditing: typing.Any
	EnableRefresh: typing.Any
	FetchedRowOverflow: typing.Any
		# Method 'ListObject' returns object of type 'ListObject'
	ListObject: ListObject
	Parent: typing.Any
	PreserveColumnInfo: typing.Any
	PreserveFormatting: typing.Any
		# Method 'RefreshStyle' returns enumeration of type 'XlCellInsertionMode'
	RefreshStyle: XlCellInsertionMode
		# Method 'ResultRange' returns object of type 'Range'
	ResultRange: Range
	RowNumbers: typing.Any
		# Method 'WorkbookConnection' returns object of type 'WorkbookConnection'
	WorkbookConnection: WorkbookConnection
	def __iter__(self):
		...

class TableStyle(typing.Protocol):

	def Delete(self) -> None:
		...
	# Result is of type TableStyle
	def Duplicate(self, NewTableStyleName: typing.Any=defaultNamedOptArg) -> TableStyle:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BuiltIn: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
	NameLocal: typing.Any
	Parent: typing.Any
	ShowAsAvailablePivotTableStyle: typing.Any
	ShowAsAvailableSlicerStyle: typing.Any
	ShowAsAvailableTableStyle: typing.Any
	ShowAsAvailableTimelineStyle: typing.Any
		# Method 'TableStyleElements' returns object of type 'TableStyleElements'
	TableStyleElements: TableStyleElements
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class TableStyleElement(typing.Protocol):

	def Clear(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
	HasFormat: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Parent: typing.Any
	StripeSize: typing.Any
	def __iter__(self):
		...

class TableStyleElements(typing.Protocol):

	# Result is of type TableStyleElement
	def Item(self, Index: XlTableStyleElementType=defaultNamedNotOptArg) -> TableStyleElement:
		...
	# Result is of type TableStyleElement
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: XlTableStyleElementType=defaultNamedNotOptArg) -> TableStyleElement:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: XlTableStyleElementType=defaultNamedNotOptArg) -> TableStyleElement:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class TableStyles(typing.Protocol):

	# Result is of type TableStyle
	def Add(self, TableStyleName: str=defaultNamedNotOptArg) -> TableStyle:
		...
	# Result is of type TableStyle
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> TableStyle:
		...
	# Result is of type TableStyle
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> TableStyle:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> TableStyle:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class TextBox(typing.Protocol):

	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...

class TextBoxes(typing.Protocol):

	# Result is of type TextBox
	def Add(self, Left: float=defaultNamedNotOptArg, Top: float=defaultNamedNotOptArg, Width: float=defaultNamedNotOptArg, Height: float=defaultNamedNotOptArg) -> TextBox:
		...
	def BringToFront(self) -> typing.Any:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	# Result is of type Characters
	# The method GetCharacters is actually a property, but must be used as a method to correctly pass the arguments
	def GetCharacters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
	# Result is of type GroupObject
	def Group(self) -> GroupObject:
		...
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	AddIndent: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
	AutoSize: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
	Caption: typing.Any
		# Method 'Characters' returns object of type 'Characters'
	Characters: Characters
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
	Formula: typing.Any
	Height: typing.Any
	HorizontalAlignment: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	Locked: typing.Any
	LockedText: typing.Any
	OnAction: typing.Any
	Orientation: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	ReadingOrder: typing.Any
	RoundedCorners: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	Text: typing.Any
	Top: typing.Any
	VerticalAlignment: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class TextConnection(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	TextFileColumnDataTypes: typing.Any
	TextFileCommaDelimiter: typing.Any
	TextFileConsecutiveDelimiter: typing.Any
	TextFileDecimalSeparator: typing.Any
	TextFileFixedColumnWidths: typing.Any
	TextFileHeaderRow: typing.Any
	TextFileOtherDelimiter: typing.Any
		# Method 'TextFileParseType' returns enumeration of type 'XlTextParsingType'
	TextFileParseType: XlTextParsingType
		# Method 'TextFilePlatform' returns enumeration of type 'XlPlatform'
	TextFilePlatform: XlPlatform
	TextFilePromptOnRefresh: typing.Any
	TextFileSemicolonDelimiter: typing.Any
	TextFileSpaceDelimiter: typing.Any
	TextFileStartRow: typing.Any
	TextFileTabDelimiter: typing.Any
		# Method 'TextFileTextQualifier' returns enumeration of type 'XlTextQualifier'
	TextFileTextQualifier: XlTextQualifier
	TextFileThousandsSeparator: typing.Any
	TextFileTrailingMinusNumbers: typing.Any
		# Method 'TextFileVisualLayout' returns enumeration of type 'XlTextVisualLayoutType'
	TextFileVisualLayout: XlTextVisualLayoutType
	def __iter__(self):
		...

class TextEffectFormat(typing.Protocol):

	def ToggleVerticalText(self) -> None:
		...
		# Method 'Alignment' returns enumeration of type 'MsoTextEffectAlignment'
	Alignment: MsoTextEffectAlignment
	Application: typing.Any
	Creator: typing.Any
		# Method 'FontBold' returns enumeration of type 'MsoTriState'
	FontBold: MsoTriState
		# Method 'FontItalic' returns enumeration of type 'MsoTriState'
	FontItalic: MsoTriState
	FontName: typing.Any
	FontSize: typing.Any
		# Method 'KernedPairs' returns enumeration of type 'MsoTriState'
	KernedPairs: MsoTriState
		# Method 'NormalizedHeight' returns enumeration of type 'MsoTriState'
	NormalizedHeight: MsoTriState
	Parent: typing.Any
		# Method 'PresetShape' returns enumeration of type 'MsoPresetTextEffectShape'
	PresetShape: MsoPresetTextEffectShape
		# Method 'PresetTextEffect' returns enumeration of type 'MsoPresetTextEffect'
	PresetTextEffect: MsoPresetTextEffect
		# Method 'RotatedChars' returns enumeration of type 'MsoTriState'
	RotatedChars: MsoTriState
	Text: typing.Any
	Tracking: typing.Any
	def __iter__(self):
		...

class TextFrame(typing.Protocol):

	# Result is of type Characters
	def Characters(self, Start: typing.Any=defaultNamedOptArg, Length: typing.Any=defaultNamedOptArg) -> Characters:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoMargins: typing.Any
	AutoSize: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'HorizontalAlignment' returns enumeration of type 'XlHAlign'
	HorizontalAlignment: XlHAlign
		# Method 'HorizontalOverflow' returns enumeration of type 'XlOartHorizontalOverflow'
	HorizontalOverflow: XlOartHorizontalOverflow
	MarginBottom: typing.Any
	MarginLeft: typing.Any
	MarginRight: typing.Any
	MarginTop: typing.Any
		# Method 'Orientation' returns enumeration of type 'MsoTextOrientation'
	Orientation: MsoTextOrientation
	Parent: typing.Any
	ReadingOrder: typing.Any
		# Method 'VerticalAlignment' returns enumeration of type 'XlVAlign'
	VerticalAlignment: XlVAlign
		# Method 'VerticalOverflow' returns enumeration of type 'XlOartVerticalOverflow'
	VerticalOverflow: XlOartVerticalOverflow
	def __iter__(self):
		...

class TextFrame2(typing.Protocol):

	def DeleteText(self) -> None:
		...
	Application: typing.Any
		# Method 'AutoSize' returns enumeration of type 'MsoAutoSize'
	AutoSize: MsoAutoSize
		# Method 'Column' returns object of type 'TextColumn2'
	Column: TextColumn2
	Creator: typing.Any
		# Method 'HasText' returns enumeration of type 'MsoTriState'
	HasText: MsoTriState
		# Method 'HorizontalAnchor' returns enumeration of type 'MsoHorizontalAnchor'
	HorizontalAnchor: MsoHorizontalAnchor
	MarginBottom: typing.Any
	MarginLeft: typing.Any
	MarginRight: typing.Any
	MarginTop: typing.Any
		# Method 'NoTextRotation' returns enumeration of type 'MsoTriState'
	NoTextRotation: MsoTriState
		# Method 'Orientation' returns enumeration of type 'MsoTextOrientation'
	Orientation: MsoTextOrientation
	Parent: typing.Any
		# Method 'PathFormat' returns enumeration of type 'MsoPathFormat'
	PathFormat: MsoPathFormat
		# Method 'Ruler' returns object of type 'Ruler2'
	Ruler: Ruler2
		# Method 'TextRange' returns object of type 'TextRange2'
	TextRange: TextRange2
		# Method 'ThreeD' returns object of type 'ThreeDFormat'
	ThreeD: ThreeDFormat
		# Method 'VerticalAnchor' returns enumeration of type 'MsoVerticalAnchor'
	VerticalAnchor: MsoVerticalAnchor
		# Method 'WarpFormat' returns enumeration of type 'MsoWarpFormat'
	WarpFormat: MsoWarpFormat
		# Method 'WordArtformat' returns enumeration of type 'MsoPresetTextEffect'
	WordArtformat: MsoPresetTextEffect
		# Method 'WordWrap' returns enumeration of type 'MsoTriState'
	WordWrap: MsoTriState
	def __iter__(self):
		...

class ThreeDFormat(typing.Protocol):

	def IncrementRotationHorizontal(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotationVertical(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotationX(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotationY(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def IncrementRotationZ(self, Increment: float=defaultNamedNotOptArg) -> None:
		...
	def ResetRotation(self) -> None:
		...
	def SetExtrusionDirection(self, PresetExtrusionDirection: MsoPresetExtrusionDirection=defaultNamedNotOptArg) -> None:
		...
	def SetPresetCamera(self, PresetCamera: MsoPresetCamera=defaultNamedNotOptArg) -> None:
		...
	def SetThreeDFormat(self, PresetThreeDFormat: MsoPresetThreeDFormat=defaultNamedNotOptArg) -> None:
		...
	Application: typing.Any
	BevelBottomDepth: typing.Any
	BevelBottomInset: typing.Any
		# Method 'BevelBottomType' returns enumeration of type 'MsoBevelType'
	BevelBottomType: MsoBevelType
	BevelTopDepth: typing.Any
	BevelTopInset: typing.Any
		# Method 'BevelTopType' returns enumeration of type 'MsoBevelType'
	BevelTopType: MsoBevelType
		# Method 'ContourColor' returns object of type 'ColorFormat'
	ContourColor: ColorFormat
	ContourWidth: typing.Any
	Creator: typing.Any
	Depth: typing.Any
		# Method 'ExtrusionColor' returns object of type 'ColorFormat'
	ExtrusionColor: ColorFormat
		# Method 'ExtrusionColorType' returns enumeration of type 'MsoExtrusionColorType'
	ExtrusionColorType: MsoExtrusionColorType
	FieldOfView: typing.Any
	LightAngle: typing.Any
	Parent: typing.Any
		# Method 'Perspective' returns enumeration of type 'MsoTriState'
	Perspective: MsoTriState
		# Method 'PresetCamera' returns enumeration of type 'MsoPresetCamera'
	PresetCamera: MsoPresetCamera
		# Method 'PresetExtrusionDirection' returns enumeration of type 'MsoPresetExtrusionDirection'
	PresetExtrusionDirection: MsoPresetExtrusionDirection
		# Method 'PresetLighting' returns enumeration of type 'MsoLightRigType'
	PresetLighting: MsoLightRigType
		# Method 'PresetLightingDirection' returns enumeration of type 'MsoPresetLightingDirection'
	PresetLightingDirection: MsoPresetLightingDirection
		# Method 'PresetLightingSoftness' returns enumeration of type 'MsoPresetLightingSoftness'
	PresetLightingSoftness: MsoPresetLightingSoftness
		# Method 'PresetMaterial' returns enumeration of type 'MsoPresetMaterial'
	PresetMaterial: MsoPresetMaterial
		# Method 'PresetThreeDFormat' returns enumeration of type 'MsoPresetThreeDFormat'
	PresetThreeDFormat: MsoPresetThreeDFormat
		# Method 'ProjectText' returns enumeration of type 'MsoTriState'
	ProjectText: MsoTriState
	RotationX: typing.Any
	RotationY: typing.Any
	RotationZ: typing.Any
		# Method 'Visible' returns enumeration of type 'MsoTriState'
	Visible: MsoTriState
	Z: typing.Any
	def __iter__(self):
		...

class TickLabels(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	Alignment: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoScaleFont: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Depth: typing.Any
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	MultiLevel: typing.Any
	Name: typing.Any
	NumberFormat: typing.Any
	NumberFormatLinked: typing.Any
	NumberFormatLocal: typing.Any
	Offset: typing.Any
		# Method 'Orientation' returns enumeration of type 'XlTickLabelOrientation'
	Orientation: XlTickLabelOrientation
	Parent: typing.Any
	ReadingOrder: typing.Any
	def __iter__(self):
		...

class TimelineState(typing.Protocol):

	# Result is of type XlFilterStatus
	def SetFilterDateRange(self, StartDate: typing.Any=defaultNamedNotOptArg, EndDate: typing.Any=defaultNamedNotOptArg) -> XlFilterStatus:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	EndDate: typing.Any
		# Method 'FilterType' returns enumeration of type 'XlPivotFilterType'
	FilterType: XlPivotFilterType
	FilterValue1: typing.Any
	FilterValue2: typing.Any
	Parent: typing.Any
	SingleRangeFilterState: typing.Any
	StartDate: typing.Any
	def __iter__(self):
		...

class TimelineViewState(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Level' returns enumeration of type 'XlTimelineLevel'
	Level: XlTimelineLevel
	Parent: typing.Any
	ShowHeader: typing.Any
	ShowHorizontalScrollbar: typing.Any
	ShowSelectionLabel: typing.Any
	ShowTimeLevel: typing.Any
	def __iter__(self):
		...

class Toolbar(typing.Protocol):

	def Delete(self) -> None:
		...
	def Reset(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BuiltIn: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Height: typing.Any
	Left: typing.Any
	Name: typing.Any
	Parent: typing.Any
	Position: typing.Any
		# Method 'Protection' returns enumeration of type 'XlToolbarProtection'
	Protection: XlToolbarProtection
		# Method 'ToolbarButtons' returns object of type 'ToolbarButtons'
	ToolbarButtons: ToolbarButtons
	Top: typing.Any
	Visible: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ToolbarButton(typing.Protocol):

	def Copy(self, Toolbar: Toolbar=defaultNamedNotOptArg, Before: int=defaultNamedNotOptArg) -> None:
		...
	def CopyFace(self) -> None:
		...
	def Delete(self) -> None:
		...
	def Edit(self) -> None:
		...
	def Move(self, Toolbar: Toolbar=defaultNamedNotOptArg, Before: int=defaultNamedNotOptArg) -> None:
		...
	def PasteFace(self) -> None:
		...
	def Reset(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BuiltIn: typing.Any
	BuiltInFace: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	HelpContextID: typing.Any
	HelpFile: typing.Any
	ID: typing.Any
	IsGap: typing.Any
	Name: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Pushed: typing.Any
	StatusBar: typing.Any
	Width: typing.Any
	def __iter__(self):
		...

class ToolbarButtons(typing.Protocol):

	# Result is of type ToolbarButton
	def Add(self, Button: typing.Any=defaultNamedOptArg, Before: typing.Any=defaultNamedOptArg, OnAction: typing.Any=defaultNamedOptArg, Pushed: typing.Any=defaultNamedOptArg
			, Enabled: typing.Any=defaultNamedOptArg, StatusBar: typing.Any=defaultNamedOptArg, HelpFile: typing.Any=defaultNamedOptArg, HelpContextID: typing.Any=defaultNamedOptArg) -> ToolbarButton:
		...
	# Result is of type ToolbarButton
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> ToolbarButton:
		...
	# Result is of type ToolbarButton
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> ToolbarButton:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> ToolbarButton:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Toolbars(typing.Protocol):

	# Result is of type Toolbar
	def Add(self, Name: typing.Any=defaultNamedOptArg) -> Toolbar:
		...
	# Result is of type Toolbar
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Toolbar:
		...
	# Result is of type Toolbar
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Toolbar:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Toolbar:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Top10(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'CalcFor' returns enumeration of type 'XlCalcFor'
	CalcFor: XlCalcFor
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	NumberFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Percent: typing.Any
	Priority: typing.Any
	Rank: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	StopIfTrue: typing.Any
		# Method 'TopBottom' returns enumeration of type 'XlTopBottom'
	TopBottom: XlTopBottom
	Type: typing.Any
	def __iter__(self):
		...

class TreeviewControl(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Drilled: typing.Any
	Hidden: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class Trendline(typing.Protocol):

	def ClearFormats(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Backward: typing.Any
	Backward2: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataLabel' returns object of type 'DataLabel'
	DataLabel: DataLabel
	DisplayEquation: typing.Any
	DisplayRSquared: typing.Any
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
	Forward: typing.Any
	Forward2: typing.Any
	Index: typing.Any
	Intercept: typing.Any
	InterceptIsAuto: typing.Any
	Name: typing.Any
	NameIsAuto: typing.Any
	Order: typing.Any
	Parent: typing.Any
	Period: typing.Any
		# Method 'Type' returns enumeration of type 'XlTrendlineType'
	Type: XlTrendlineType
	def __iter__(self):
		...

class Trendlines(typing.Protocol):

	# Result is of type Trendline
	def Add(self, Type: XlTrendlineType=-4132, Order: typing.Any=defaultNamedOptArg, Period: typing.Any=defaultNamedOptArg, Forward: typing.Any=defaultNamedOptArg
			, Backward: typing.Any=defaultNamedOptArg, Intercept: typing.Any=defaultNamedOptArg, DisplayEquation: typing.Any=defaultNamedOptArg, DisplayRSquared: typing.Any=defaultNamedOptArg, Name: typing.Any=defaultNamedOptArg) -> Trendline:
		...
	# Result is of type Trendline
	def Item(self, Index: typing.Any=defaultNamedOptArg) -> Trendline:
		...
	# Result is of type Trendline
	def _Default(self, Index: typing.Any=defaultNamedOptArg) -> Trendline:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedOptArg) -> Trendline:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class UniqueValues(typing.Protocol):

	def Delete(self) -> None:
		...
	def ModifyAppliesToRange(self, Range: Range=defaultNamedNotOptArg) -> None:
		...
	def SetFirstPriority(self) -> None:
		...
	def SetLastPriority(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AppliesTo' returns object of type 'Range'
	AppliesTo: Range
		# Method 'Borders' returns object of type 'Borders'
	Borders: Borders
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DupeUnique' returns enumeration of type 'XlDupeUnique'
	DupeUnique: XlDupeUnique
		# Method 'Font' returns object of type 'Font'
	Font: Font
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	NumberFormat: typing.Any
	PTCondition: typing.Any
	Parent: typing.Any
	Priority: typing.Any
		# Method 'ScopeType' returns enumeration of type 'XlPivotConditionScope'
	ScopeType: XlPivotConditionScope
	StopIfTrue: typing.Any
	Type: typing.Any
	def __iter__(self):
		...

class UpBars(typing.Protocol):

	def Delete(self) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Select(self) -> typing.Any:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Name: typing.Any
	Parent: typing.Any
	def __iter__(self):
		...

class UsedObjects(typing.Protocol):

	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class UserAccess(typing.Protocol):

	def Delete(self) -> None:
		...
	AllowEdit: typing.Any
	Name: typing.Any
	def __iter__(self):
		...

class UserAccessList(typing.Protocol):

	# Result is of type UserAccess
	def Add(self, Name: str=defaultNamedNotOptArg, AllowEdit: bool=defaultNamedNotOptArg) -> UserAccess:
		...
	def DeleteAll(self) -> None:
		...
	# Result is of type UserAccess
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> UserAccess:
		...
	# Result is of type UserAccess
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> UserAccess:
		...
	Count: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> UserAccess:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class VPageBreak(typing.Protocol):

	def Delete(self) -> None:
		...
	def DragOff(self, Direction: XlDirection=defaultNamedNotOptArg, RegionIndex: int=defaultNamedNotOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Extent' returns enumeration of type 'XlPageBreakExtent'
	Extent: XlPageBreakExtent
		# Method 'Location' returns object of type 'Range'
	Location: Range
		# Method 'Parent' returns object of type 'Worksheet'
	Parent: Worksheet
		# Method 'Type' returns enumeration of type 'XlPageBreak'
	Type: XlPageBreak
	def __iter__(self):
		...

class VPageBreaks(typing.Protocol):

	# Result is of type VPageBreak
	def Add(self, Before: Dispatch=defaultNamedNotOptArg) -> VPageBreak:
		...
	# Result is of type VPageBreak
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: int=defaultNamedNotOptArg) -> VPageBreak:
		...
	# Result is of type VPageBreak
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: int=defaultNamedNotOptArg) -> VPageBreak:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: int=defaultNamedNotOptArg) -> VPageBreak:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class Validation(typing.Protocol):

	def Add(self, Type: XlDVType=defaultNamedNotOptArg, AlertStyle: typing.Any=defaultNamedOptArg, Operator: typing.Any=defaultNamedOptArg, Formula1: typing.Any=defaultNamedOptArg
			, Formula2: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def Modify(self, Type: typing.Any=defaultNamedOptArg, AlertStyle: typing.Any=defaultNamedOptArg, Operator: typing.Any=defaultNamedOptArg, Formula1: typing.Any=defaultNamedOptArg
			, Formula2: typing.Any=defaultNamedOptArg) -> None:
		...
	AlertStyle: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	ErrorMessage: typing.Any
	ErrorTitle: typing.Any
	Formula1: typing.Any
	Formula2: typing.Any
	IMEMode: typing.Any
	IgnoreBlank: typing.Any
	InCellDropdown: typing.Any
	InputMessage: typing.Any
	InputTitle: typing.Any
	Operator: typing.Any
	Parent: typing.Any
	ShowError: typing.Any
	ShowInput: typing.Any
	Type: typing.Any
	Value: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class ValueChange(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'AllocationMethod' returns enumeration of type 'XlAllocationMethod'
	AllocationMethod: XlAllocationMethod
		# Method 'AllocationValue' returns enumeration of type 'XlAllocationValue'
	AllocationValue: XlAllocationValue
	AllocationWeightExpression: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Order: typing.Any
	Parent: typing.Any
		# Method 'PivotCell' returns object of type 'PivotCell'
	PivotCell: PivotCell
	Tuple: typing.Any
	Value: typing.Any
	VisibleInPivotTable: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class Walls(typing.Protocol):

	def ClearFormats(self) -> typing.Any:
		...
	def Paste(self) -> None:
		...
	def Select(self) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Fill' returns object of type 'ChartFillFormat'
	Fill: ChartFillFormat
		# Method 'Format' returns object of type 'ChartFormat'
	Format: ChartFormat
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Name: typing.Any
	Parent: typing.Any
	PictureType: typing.Any
	PictureUnit: typing.Any
	Thickness: typing.Any
	def __iter__(self):
		...

class Watch(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Source: typing.Any
	def __iter__(self):
		...

class Watches(typing.Protocol):

	# Result is of type Watch
	def Add(self, Source: typing.Any=defaultNamedNotOptArg) -> Watch:
		...
	def Delete(self) -> None:
		...
	# Result is of type Watch
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Watch:
		...
	# Result is of type Watch
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Watch:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Watch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class WebOptions(typing.Protocol):

	def UseDefaultFolderSuffix(self) -> None:
		...
	AllowPNG: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DownloadComponents: typing.Any
		# Method 'Encoding' returns enumeration of type 'MsoEncoding'
	Encoding: MsoEncoding
	FolderSuffix: typing.Any
	LocationOfComponents: typing.Any
	OrganizeInFolder: typing.Any
	Parent: typing.Any
	PixelsPerInch: typing.Any
	RelyOnCSS: typing.Any
	RelyOnVML: typing.Any
		# Method 'ScreenSize' returns enumeration of type 'MsoScreenSize'
	ScreenSize: MsoScreenSize
		# Method 'TargetBrowser' returns enumeration of type 'MsoTargetBrowser'
	TargetBrowser: MsoTargetBrowser
	UseLongFileNames: typing.Any
	def __iter__(self):
		...

class Window(typing.Protocol):

	def Activate(self) -> typing.Any:
		...
	def ActivateNext(self) -> typing.Any:
		...
	def ActivatePrevious(self) -> typing.Any:
		...
	def Close(self, SaveChanges: typing.Any=defaultNamedOptArg, Filename: typing.Any=defaultNamedOptArg, RouteWorkbook: typing.Any=defaultNamedOptArg) -> bool:
		...
	def LargeScroll(self, Down: typing.Any=defaultNamedOptArg, Up: typing.Any=defaultNamedOptArg, ToRight: typing.Any=defaultNamedOptArg, ToLeft: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Window
	def NewWindow(self) -> Window:
		...
	def PointsToScreenPixelsX(self, Points: int=defaultNamedNotOptArg) -> int:
		...
	def PointsToScreenPixelsY(self, Points: int=defaultNamedNotOptArg) -> int:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def RangeFromPoint(self, x: int=defaultNamedNotOptArg, y: int=defaultNamedNotOptArg) -> Dispatch:
		...
	def ScrollIntoView(self, Left: int=defaultNamedNotOptArg, Top: int=defaultNamedNotOptArg, Width: int=defaultNamedNotOptArg, Height: int=defaultNamedNotOptArg
			, Start: typing.Any=defaultNamedOptArg) -> None:
		...
	def ScrollWorkbookTabs(self, Sheets: typing.Any=defaultNamedOptArg, Position: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SmallScroll(self, Down: typing.Any=defaultNamedOptArg, Up: typing.Any=defaultNamedOptArg, ToRight: typing.Any=defaultNamedOptArg, ToLeft: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'ActiveCell' returns object of type 'Range'
	ActiveCell: Range
		# Method 'ActiveChart' returns object of type 'Chart'
	ActiveChart: Chart
		# Method 'ActivePane' returns object of type 'Pane'
	ActivePane: Pane
	ActiveSheet: typing.Any
	ActiveSheetView: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoFilterDateGrouping: typing.Any
	Caption: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayFormulas: typing.Any
	DisplayGridlines: typing.Any
	DisplayHeadings: typing.Any
	DisplayHorizontalScrollBar: typing.Any
	DisplayOutline: typing.Any
	DisplayRightToLeft: typing.Any
	DisplayRuler: typing.Any
	DisplayVerticalScrollBar: typing.Any
	DisplayWhitespace: typing.Any
	DisplayWorkbookTabs: typing.Any
	DisplayZeros: typing.Any
	EnableResize: typing.Any
	FreezePanes: typing.Any
	GridlineColor: typing.Any
		# Method 'GridlineColorIndex' returns enumeration of type 'XlColorIndex'
	GridlineColorIndex: XlColorIndex
	Height: typing.Any
	Hwnd: typing.Any
	Index: typing.Any
	Left: typing.Any
	OnWindow: typing.Any
		# Method 'Panes' returns object of type 'Panes'
	Panes: Panes
	Parent: typing.Any
		# Method 'RangeSelection' returns object of type 'Range'
	RangeSelection: Range
	ScrollColumn: typing.Any
	ScrollRow: typing.Any
		# Method 'SelectedSheets' returns object of type 'Sheets'
	SelectedSheets: Sheets
	Selection: typing.Any
		# Method 'SheetViews' returns object of type 'SheetViews'
	SheetViews: SheetViews
	Split: typing.Any
	SplitColumn: typing.Any
	SplitHorizontal: typing.Any
	SplitRow: typing.Any
	SplitVertical: typing.Any
	TabRatio: typing.Any
	Top: typing.Any
		# Method 'Type' returns enumeration of type 'XlWindowType'
	Type: XlWindowType
	UsableHeight: typing.Any
	UsableWidth: typing.Any
		# Method 'View' returns enumeration of type 'XlWindowView'
	View: XlWindowView
	Visible: typing.Any
		# Method 'VisibleRange' returns object of type 'Range'
	VisibleRange: Range
	Width: typing.Any
	WindowNumber: typing.Any
		# Method 'WindowState' returns enumeration of type 'XlWindowState'
	WindowState: XlWindowState
	Zoom: typing.Any
	_DisplayRightToLeft: typing.Any
	def __iter__(self):
		...

class Windows(typing.Protocol):

	def Arrange(self, ArrangeStyle: XlArrangeStyle=1, ActiveWorkbook: typing.Any=defaultNamedOptArg, SyncHorizontal: typing.Any=defaultNamedOptArg, SyncVertical: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def BreakSideBySide(self) -> bool:
		...
	def CompareSideBySideWith(self, WindowName: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	# Result is of type Window
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Window:
		...
	def ResetPositionsSideBySide(self) -> None:
		...
	# Result is of type Window
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Window:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	SyncScrollingSideBySide: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Window:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class WorkbookConnection(typing.Protocol):

	def Delete(self) -> None:
		...
	def Refresh(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataFeedConnection' returns object of type 'DataFeedConnection'
	DataFeedConnection: DataFeedConnection
	Description: typing.Any
	InModel: typing.Any
		# Method 'ModelConnection' returns object of type 'ModelConnection'
	ModelConnection: ModelConnection
		# Method 'ModelTables' returns object of type 'ModelTables'
	ModelTables: ModelTables
	Name: typing.Any
		# Method 'ODBCConnection' returns object of type 'ODBCConnection'
	ODBCConnection: ODBCConnection
		# Method 'OLEDBConnection' returns object of type 'OLEDBConnection'
	OLEDBConnection: OLEDBConnection
	Parent: typing.Any
		# Method 'Ranges' returns object of type 'Ranges'
	Ranges: Ranges
	RefreshWithRefreshAll: typing.Any
		# Method 'TextConnection' returns object of type 'TextConnection'
	TextConnection: TextConnection
		# Method 'Type' returns enumeration of type 'XlConnectionType'
	Type: XlConnectionType
		# Method 'WorksheetDataConnection' returns object of type 'WorksheetDataConnection'
	WorksheetDataConnection: WorksheetDataConnection
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class WorkbookEvents:

	# Event Handlers
	# If you create handlers, they should have the following prototypes:
#	def OnQueryInterface(self, riid: typing.Any=defaultNamedNotOptArg, ppvObj: None=pythoncom.Missing):
#	def OnAddRef(self):
#	def OnRelease(self):
#	def OnGetTypeInfoCount(self, pctinfo: int=pythoncom.Missing):
#	def OnGetTypeInfo(self, itinfo: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, pptinfo: None=pythoncom.Missing):
#	def OnGetIDsOfNames(self, riid: typing.Any=defaultNamedNotOptArg, rgszNames: int=defaultNamedNotOptArg, cNames: int=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg
#			, rgdispid: int=pythoncom.Missing):
#	def OnInvoke(self, dispidMember: int=defaultNamedNotOptArg, riid: typing.Any=defaultNamedNotOptArg, lcid: int=defaultNamedNotOptArg, wFlags: int=defaultNamedNotOptArg
#			, pdispparams: typing.Any=defaultNamedNotOptArg, pvarResult: typing.Any=pythoncom.Missing, pexcepinfo: typing.Any=pythoncom.Missing, puArgErr: int=pythoncom.Missing):
#	def OnOpen(self):
#	def OnActivate(self):
#	def OnDeactivate(self):
#	def OnBeforeClose(self, Cancel: bool=defaultNamedNotOptArg):
#	def OnBeforeSave(self, SaveAsUI: bool=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnBeforePrint(self, Cancel: bool=defaultNamedNotOptArg):
#	def OnNewSheet(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnAddinInstall(self):
#	def OnAddinUninstall(self):
#	def OnWindowResize(self, Wn: Window=defaultNamedNotOptArg):
#	def OnWindowActivate(self, Wn: Window=defaultNamedNotOptArg):
#	def OnWindowDeactivate(self, Wn: Window=defaultNamedNotOptArg):
#	def OnSheetSelectionChange(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg):
#	def OnSheetBeforeDoubleClick(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetBeforeRightClick(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetActivate(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetDeactivate(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetCalculate(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetChange(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg):
#	def OnSheetFollowHyperlink(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Hyperlink=defaultNamedNotOptArg):
#	def OnSheetPivotTableUpdate(self, Sh: Dispatch=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
#	def OnPivotTableCloseConnection(self, Target: PivotTable=defaultNamedNotOptArg):
#	def OnPivotTableOpenConnection(self, Target: PivotTable=defaultNamedNotOptArg):
#	def OnSync(self, SyncEventType: MsoSyncEventType=defaultNamedNotOptArg):
#	def OnBeforeXmlImport(self, Map: XmlMap=defaultNamedNotOptArg, Url: str=defaultNamedNotOptArg, IsRefresh: bool=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnAfterXmlImport(self, Map: XmlMap=defaultNamedNotOptArg, IsRefresh: bool=defaultNamedNotOptArg, Result: XlXmlImportResult=defaultNamedNotOptArg):
#	def OnBeforeXmlExport(self, Map: XmlMap=defaultNamedNotOptArg, Url: str=defaultNamedNotOptArg, Cancel: bool=defaultNamedNotOptArg):
#	def OnAfterXmlExport(self, Map: XmlMap=defaultNamedNotOptArg, Url: str=defaultNamedNotOptArg, Result: XlXmlExportResult=defaultNamedNotOptArg):
#	def OnRowsetComplete(self, Description: str=defaultNamedNotOptArg, Sheet: str=defaultNamedNotOptArg, Success: bool=defaultNamedNotOptArg):
#	def OnSheetPivotTableAfterValueChange(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, TargetRange: Range=defaultNamedNotOptArg):
#	def OnSheetPivotTableBeforeAllocateChanges(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg
#			, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetPivotTableBeforeCommitChanges(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg
#			, Cancel: bool=defaultNamedNotOptArg):
#	def OnSheetPivotTableBeforeDiscardChanges(self, Sh: Dispatch=defaultNamedNotOptArg, TargetPivotTable: PivotTable=defaultNamedNotOptArg, ValueChangeStart: int=defaultNamedNotOptArg, ValueChangeEnd: int=defaultNamedNotOptArg):
#	def OnSheetPivotTableChangeSync(self, Sh: Dispatch=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
#	def OnAfterSave(self, Success: bool=defaultNamedNotOptArg):
#	def OnNewChart(self, Ch: Chart=defaultNamedNotOptArg):
#	def OnSheetLensGalleryRenderComplete(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnSheetTableUpdate(self, Sh: Dispatch=defaultNamedNotOptArg, Target: TableObject=defaultNamedNotOptArg):
#	def OnModelChange(self, Changes: ModelChanges=defaultNamedNotOptArg):
#	def OnSheetBeforeDelete(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnBeforeRemoteChange(self):
#	def OnAfterRemoteChange(self):
#	def OnRemoteSheetChange(self, Sh: Dispatch=defaultNamedNotOptArg, Target: Range=defaultNamedNotOptArg):
#	def OnRemoteNewSheet(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnRemoteNewChart(self, Ch: Chart=defaultNamedNotOptArg):
#	def OnRemoteSheetBeforeDelete(self, Sh: Dispatch=defaultNamedNotOptArg):
#	def OnRemoteSheetPivotTableUpdate(self, Sh: Dispatch=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
#	def OnRemoteSheetPivotTableChangeSync(self, Sh: Dispatch=defaultNamedNotOptArg, Target: PivotTable=defaultNamedNotOptArg):
	...


class WorkbookQuery(typing.Protocol):

	def Delete(self) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Description: typing.Any
	Formula: typing.Any
	Name: typing.Any
	Parent: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class Workbooks(typing.Protocol):

	# Result is of type Workbook
	def Add(self, Template: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	def CanCheckOut(self, Filename: str=defaultNamedNotOptArg) -> bool:
		...
	def CheckOut(self, Filename: str=defaultNamedNotOptArg) -> None:
		...
	def Close(self) -> None:
		...
	# Result is of type Workbook
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Workbook:
		...
	# Result is of type Workbook
	def Open(self, Filename: str=defaultNamedNotOptArg, UpdateLinks: typing.Any=defaultNamedOptArg, ReadOnly: typing.Any=defaultNamedOptArg, Format: typing.Any=defaultNamedOptArg
			, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg, IgnoreReadOnlyRecommended: typing.Any=defaultNamedOptArg, Origin: typing.Any=defaultNamedOptArg, Delimiter: typing.Any=defaultNamedOptArg
			, Editable: typing.Any=defaultNamedOptArg, Notify: typing.Any=defaultNamedOptArg, Converter: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, Local: typing.Any=defaultNamedOptArg
			, CorruptLoad: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	# Result is of type Workbook
	def OpenDatabase(self, Filename: str=defaultNamedNotOptArg, CommandText: typing.Any=defaultNamedOptArg, CommandType: typing.Any=defaultNamedOptArg, BackgroundQuery: typing.Any=defaultNamedOptArg
			, ImportDataAs: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	def OpenText(self, Filename: str=defaultNamedNotOptArg, Origin: typing.Any=defaultNamedNotOptArg, StartRow: typing.Any=defaultNamedNotOptArg, DataType: typing.Any=defaultNamedNotOptArg
			, TextQualifier: XlTextQualifier=1, ConsecutiveDelimiter: typing.Any=defaultNamedOptArg, Tab: typing.Any=defaultNamedOptArg, Semicolon: typing.Any=defaultNamedOptArg, Comma: typing.Any=defaultNamedOptArg
			, Space: typing.Any=defaultNamedOptArg, Other: typing.Any=defaultNamedOptArg, OtherChar: typing.Any=defaultNamedOptArg, FieldInfo: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, DecimalSeparator: typing.Any=defaultNamedOptArg, ThousandsSeparator: typing.Any=defaultNamedOptArg, TrailingMinusNumbers: typing.Any=defaultNamedOptArg, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Workbook
	def OpenXML(self, Filename: str=defaultNamedNotOptArg, Stylesheets: typing.Any=defaultNamedOptArg, LoadOption: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	# Result is of type Workbook
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Workbook:
		...
	# Result is of type Workbook
	def _Open(self, Filename: str=defaultNamedNotOptArg, UpdateLinks: typing.Any=defaultNamedOptArg, ReadOnly: typing.Any=defaultNamedOptArg, Format: typing.Any=defaultNamedOptArg
			, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg, IgnoreReadOnlyRecommended: typing.Any=defaultNamedOptArg, Origin: typing.Any=defaultNamedOptArg, Delimiter: typing.Any=defaultNamedOptArg
			, Editable: typing.Any=defaultNamedOptArg, Notify: typing.Any=defaultNamedOptArg, Converter: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	def _OpenText(self, Filename: str=defaultNamedNotOptArg, Origin: typing.Any=defaultNamedNotOptArg, StartRow: typing.Any=defaultNamedNotOptArg, DataType: typing.Any=defaultNamedNotOptArg
			, TextQualifier: XlTextQualifier=1, ConsecutiveDelimiter: typing.Any=defaultNamedOptArg, Tab: typing.Any=defaultNamedOptArg, Semicolon: typing.Any=defaultNamedOptArg, Comma: typing.Any=defaultNamedOptArg
			, Space: typing.Any=defaultNamedOptArg, Other: typing.Any=defaultNamedOptArg, OtherChar: typing.Any=defaultNamedOptArg, FieldInfo: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, DecimalSeparator: typing.Any=defaultNamedOptArg, ThousandsSeparator: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Workbook
	def _OpenXML(self, Filename: str=defaultNamedNotOptArg, Stylesheets: typing.Any=defaultNamedOptArg) -> Workbook:
		...
	def _OpenText_(self, Filename: str=defaultNamedNotOptArg, Origin: typing.Any=defaultNamedNotOptArg, StartRow: typing.Any=defaultNamedNotOptArg, DataType: typing.Any=defaultNamedNotOptArg
			, TextQualifier: XlTextQualifier=1, ConsecutiveDelimiter: typing.Any=defaultNamedOptArg, Tab: typing.Any=defaultNamedOptArg, Semicolon: typing.Any=defaultNamedOptArg, Comma: typing.Any=defaultNamedOptArg
			, Space: typing.Any=defaultNamedOptArg, Other: typing.Any=defaultNamedOptArg, OtherChar: typing.Any=defaultNamedOptArg, FieldInfo: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Workbook:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class WorksheetDataConnection(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...

class WorksheetFunction(typing.Protocol):

	def AccrInt(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedOptArg) -> float:
		...
	def AccrIntM(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Acos(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Acosh(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Acot(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Acoth(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Aggregate(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: Range=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def AmorDegrc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedOptArg) -> float:
		...
	def AmorLinc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedOptArg) -> float:
		...
	def And(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> bool:
		...
	def Arabic(self, Arg1: str=defaultNamedNotOptArg) -> float:
		...
	def Asc(self, Arg1: str=defaultNamedNotOptArg) -> str:
		...
	def Asin(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Asinh(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Atan2(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Atanh(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def AveDev(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Average(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def AverageIf(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def AverageIfs(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> float:
		...
	def BahtText(self, Arg1: float=defaultNamedNotOptArg) -> str:
		...
	def Base(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> str:
		...
	def BesselI(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def BesselJ(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def BesselK(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def BesselY(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def BetaDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def BetaInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Beta_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Beta_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Bin2Dec(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def Bin2Hex(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Bin2Oct(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def BinomDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def Binom_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def Binom_Dist_Range(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def Binom_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Bitand(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Bitlshift(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Bitor(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Bitrshift(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Bitxor(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Ceiling(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Ceiling_Math(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Ceiling_Precise(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def ChiDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def ChiInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def ChiSq_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: bool=defaultNamedNotOptArg) -> float:
		...
	def ChiSq_Dist_RT(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def ChiSq_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def ChiSq_Inv_RT(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def ChiSq_Test(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def ChiTest(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Choose(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Clean(self, Arg1: str=defaultNamedNotOptArg) -> str:
		...
	def Combin(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Combina(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Complex(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> str:
		...
	def Concat(self, Arg1: str=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> str:
		...
	def Confidence(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Confidence_Norm(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Confidence_T(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Convert(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Correl(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Cosh(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Cot(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Coth(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Count(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def CountA(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def CountBlank(self, Arg1: Range=defaultNamedNotOptArg) -> float:
		...
	def CountIf(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def CountIfs(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def CoupDayBs(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def CoupDays(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def CoupDaysNc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def CoupNcd(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def CoupNum(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def CoupPcd(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def Covar(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Covariance_P(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Covariance_S(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def CritBinom(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Csc(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Csch(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def CumIPmt(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def CumPrinc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DAverage(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DCount(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DCountA(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DGet(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def DMax(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DMin(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DProduct(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DStDev(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DStDevP(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DSum(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DVar(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DVarP(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Days(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Days360(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Db(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Dbcs(self, Arg1: str=defaultNamedNotOptArg) -> str:
		...
	def Ddb(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Dec2Bin(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Dec2Hex(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Dec2Oct(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Decimal(self, Arg1: str=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Degrees(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Delta(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def DevSq(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Disc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Dollar(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def DollarDe(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def DollarFr(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Dummy19(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy21(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Duration(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def EDate(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Effect(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def EncodeURL(self, Arg1: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def EoMonth(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Erf(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def ErfC(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def ErfC_Precise(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Erf_Precise(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Even(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def ExponDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: bool=defaultNamedNotOptArg) -> float:
		...
	def Expon_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: bool=defaultNamedNotOptArg) -> float:
		...
	def FDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def FInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def FTest(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def FVSchedule(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def F_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def F_Dist_RT(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def F_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def F_Inv_RT(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def F_Test(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Fact(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def FactDouble(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def FieldValue(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Filter(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def FilterXML(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def Find(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def FindB(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Fisher(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def FisherInv(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Fixed(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg) -> str:
		...
	def Floor(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Floor_Math(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Floor_Precise(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def Forecast(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Forecast_ETS(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Forecast_ETS_ConfInt(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg) -> float:
		...
	def Forecast_ETS_STAT(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Forecast_ETS_Seasonality(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def Forecast_Linear(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Frequency(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def Fv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Gamma(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def GammaDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def GammaInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def GammaLn(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def GammaLn_Precise(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Gamma_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def Gamma_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Gauss(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Gcd(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def GeStep(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def GeoMean(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Growth(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def HLookup(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def HarMean(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Hex2Bin(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Hex2Dec(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def Hex2Oct(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def HypGeomDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg) -> float:
		...
	def HypGeom_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg
			, Arg5: bool=defaultNamedNotOptArg) -> float:
		...
	def ISO_Ceiling(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def IfError(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def IfNa(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def ImAbs(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImArgument(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImConjugate(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImCos(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImCosh(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImCot(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImCsc(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImCsch(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImDiv(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImExp(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImLn(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImLog10(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImLog2(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImPower(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImProduct(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> str:
		...
	def ImReal(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def ImSec(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImSech(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImSin(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImSinh(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImSqrt(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImSub(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def ImSum(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> str:
		...
	def ImTan(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def Imaginary(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Index(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def IntRate(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Intercept(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Ipmt(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Irr(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def IsErr(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsError(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsEven(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsFormula(self, Arg1: Range=defaultNamedNotOptArg) -> bool:
		...
	def IsLogical(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsNA(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsNonText(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsNumber(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsOdd(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsText(self, Arg1: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def IsThaiDigit(self, Arg1: str=defaultNamedNotOptArg) -> bool:
		...
	def IsoWeekNum(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def Ispmt(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg) -> float:
		...
	def Kurt(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Large(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Lcm(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def LinEst(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Ln(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Log(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def Log10(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def LogEst(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def LogInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def LogNormDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def LogNorm_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def LogNorm_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Lookup(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def MDeterm(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def MDuration(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def MInverse(self, Arg1: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def MIrr(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def MMult(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def MRound(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Match(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Max(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def MaxIfs(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> float:
		...
	def Median(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Min(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def MinIfs(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> float:
		...
	def Mode(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Mode_Mult(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Mode_Sngl(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def MultiNomial(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Munit(self, Arg1: float=defaultNamedNotOptArg) -> typing.Any:
		...
	def NPer(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def NegBinomDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def NegBinom_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def NetworkDays(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def NetworkDays_Intl(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def Nominal(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def NormDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def NormInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def NormSDist(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def NormSInv(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Norm_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def Norm_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Norm_S_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: bool=defaultNamedNotOptArg) -> float:
		...
	def Norm_S_Inv(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Npv(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def NumberValue(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg, Arg3: str=defaultNamedNotOptArg) -> float:
		...
	def Oct2Bin(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Oct2Dec(self, Arg1: typing.Any=defaultNamedNotOptArg) -> str:
		...
	def Oct2Hex(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Odd(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def OddFPrice(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedNotOptArg, Arg8: typing.Any=defaultNamedNotOptArg, Arg9: typing.Any=defaultNamedOptArg) -> float:
		...
	def OddFYield(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedNotOptArg, Arg8: typing.Any=defaultNamedNotOptArg, Arg9: typing.Any=defaultNamedOptArg) -> float:
		...
	def OddLPrice(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedNotOptArg, Arg8: typing.Any=defaultNamedOptArg) -> float:
		...
	def OddLYield(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedNotOptArg, Arg8: typing.Any=defaultNamedOptArg) -> float:
		...
	def Or(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> bool:
		...
	def PDuration(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Pearson(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def PercentRank(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def PercentRank_Exc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def PercentRank_Inc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Percentile(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Percentile_Exc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Percentile_Inc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Permut(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Permutationa(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Phi(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Phonetic(self, Arg1: Range=defaultNamedNotOptArg) -> str:
		...
	def Pi(self) -> float:
		...
	def Pmt(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Poisson(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: bool=defaultNamedNotOptArg) -> float:
		...
	def Poisson_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: bool=defaultNamedNotOptArg) -> float:
		...
	def Power(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Ppmt(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Price(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedNotOptArg, Arg7: typing.Any=defaultNamedOptArg) -> float:
		...
	def PriceDisc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def PriceMat(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Prob(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def Product(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Proper(self, Arg1: str=defaultNamedNotOptArg) -> str:
		...
	def Pv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Quartile(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Quartile_Exc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Quartile_Inc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Quotient(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def RSq(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def RTD(self, progID: typing.Any=defaultNamedNotOptArg, server: typing.Any=defaultNamedNotOptArg, topic1: typing.Any=defaultNamedNotOptArg, topic2: typing.Any=defaultNamedOptArg
			, topic3: typing.Any=defaultNamedOptArg, topic4: typing.Any=defaultNamedOptArg, topic5: typing.Any=defaultNamedOptArg, topic6: typing.Any=defaultNamedOptArg, topic7: typing.Any=defaultNamedOptArg
			, topic8: typing.Any=defaultNamedOptArg, topic9: typing.Any=defaultNamedOptArg, topic10: typing.Any=defaultNamedOptArg, topic11: typing.Any=defaultNamedOptArg, topic12: typing.Any=defaultNamedOptArg
			, topic13: typing.Any=defaultNamedOptArg, topic14: typing.Any=defaultNamedOptArg, topic15: typing.Any=defaultNamedOptArg, topic16: typing.Any=defaultNamedOptArg, topic17: typing.Any=defaultNamedOptArg
			, topic18: typing.Any=defaultNamedOptArg, topic19: typing.Any=defaultNamedOptArg, topic20: typing.Any=defaultNamedOptArg, topic21: typing.Any=defaultNamedOptArg, topic22: typing.Any=defaultNamedOptArg
			, topic23: typing.Any=defaultNamedOptArg, topic24: typing.Any=defaultNamedOptArg, topic25: typing.Any=defaultNamedOptArg, topic26: typing.Any=defaultNamedOptArg, topic27: typing.Any=defaultNamedOptArg
			, topic28: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Radians(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def RandArray(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def RandBetween(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Rank(self, Arg1: float=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Rank_Avg(self, Arg1: float=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Rank_Eq(self, Arg1: float=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Rate(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def Received(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def Replace(self, Arg1: str=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: str=defaultNamedNotOptArg) -> str:
		...
	def ReplaceB(self, Arg1: str=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: str=defaultNamedNotOptArg) -> str:
		...
	def Rept(self, Arg1: str=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> str:
		...
	def Roman(self, Arg1: float=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> str:
		...
	def Round(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def RoundBahtDown(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def RoundBahtUp(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def RoundDown(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def RoundUp(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Rri(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Search(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def SearchB(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Sec(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Sech(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Sequence(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SeriesSum(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Single(self, Arg1: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def Sinh(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Skew(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Skew_p(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Sln(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def Slope(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Small(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def Sort(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SortBy(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SqrtPi(self, Arg1: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def StDev(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def StDevP(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def StDev_P(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def StDev_S(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def StEyx(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Standardize(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def StockHistory(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Substitute(self, Arg1: str=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg, Arg3: str=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> str:
		...
	def Subtotal(self, Arg1: float=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Sum(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def SumIf(self, Arg1: Range=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def SumIfs(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> float:
		...
	def SumProduct(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def SumSq(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def SumX2MY2(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def SumX2PY2(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def SumXMY2(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Syd(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg) -> float:
		...
	def TBillEq(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def TBillPrice(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def TBillYield(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def TDist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg) -> float:
		...
	def TInv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def TTest(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg) -> float:
		...
	def T_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: bool=defaultNamedNotOptArg) -> float:
		...
	def T_Dist_2T(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def T_Dist_RT(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def T_Inv(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def T_Inv_2T(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def T_Test(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg) -> float:
		...
	def Tanh(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Text(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: str=defaultNamedNotOptArg) -> str:
		...
	def TextJoin(self, Arg1: str=defaultNamedNotOptArg, Arg2: bool=defaultNamedNotOptArg, Arg3: str=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg) -> str:
		...
	def ThaiDayOfWeek(self, Arg1: float=defaultNamedNotOptArg) -> str:
		...
	def ThaiDigit(self, Arg1: str=defaultNamedNotOptArg) -> str:
		...
	def ThaiMonthOfYear(self, Arg1: float=defaultNamedNotOptArg) -> str:
		...
	def ThaiNumSound(self, Arg1: float=defaultNamedNotOptArg) -> str:
		...
	def ThaiNumString(self, Arg1: float=defaultNamedNotOptArg) -> str:
		...
	def ThaiStringLength(self, Arg1: str=defaultNamedNotOptArg) -> float:
		...
	def ThaiYear(self, Arg1: float=defaultNamedNotOptArg) -> float:
		...
	def Transpose(self, Arg1: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def Trend(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Trim(self, Arg1: str=defaultNamedNotOptArg) -> str:
		...
	def TrimMean(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> float:
		...
	def USDollar(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg) -> str:
		...
	def Unichar(self, Arg1: float=defaultNamedNotOptArg) -> str:
		...
	def Unicode(self, Arg1: str=defaultNamedNotOptArg) -> float:
		...
	def Unique(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def VLookup(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Var(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def VarP(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Var_P(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Var_S(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	def Vdb(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: float=defaultNamedNotOptArg
			, Arg5: float=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg) -> float:
		...
	def WebService(self, Arg1: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def WeekNum(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def Weekday(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg) -> float:
		...
	def Weibull(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def Weibull_Dist(self, Arg1: float=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: float=defaultNamedNotOptArg, Arg4: bool=defaultNamedNotOptArg) -> float:
		...
	def WorkDay(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def WorkDay_Intl(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def XLookup(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def XMatch(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> float:
		...
	def Xirr(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Xnpv(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg) -> float:
		...
	def Xor(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> bool:
		...
	def YearFrac(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def YieldDisc(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedOptArg) -> float:
		...
	def YieldMat(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedNotOptArg, Arg4: typing.Any=defaultNamedNotOptArg
			, Arg5: typing.Any=defaultNamedNotOptArg, Arg6: typing.Any=defaultNamedOptArg) -> float:
		...
	def ZTest(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def Z_Test(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: float=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg) -> float:
		...
	def _WSFunction(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	def __iter__(self):
		...
	#This class has Count() method - allow len(ob) to provide this
	def __len__(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> float:
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class WorksheetView(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DisplayFormulas: typing.Any
	DisplayGridlines: typing.Any
	DisplayHeadings: typing.Any
	DisplayOutline: typing.Any
	DisplayZeros: typing.Any
	Parent: typing.Any
	Sheet: typing.Any
	def __iter__(self):
		...

class Worksheets(typing.Protocol):

	def Add(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Add2(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg, Count: typing.Any=defaultNamedOptArg, NewLayout: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def FillAcrossSheets(self, Range: Range=defaultNamedNotOptArg, Type: XlFillWith=-4104) -> None:
		...
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg, IgnorePrintAreas: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
	Parent: typing.Any
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
	Visible: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> Dispatch:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class XPath(typing.Protocol):

	def Clear(self) -> None:
		...
	def SetValue(self, Map: XmlMap=defaultNamedNotOptArg, XPath: str=defaultNamedNotOptArg, SelectionNamespace: typing.Any=defaultNamedOptArg, Repeating: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Map' returns object of type 'XmlMap'
	Map: XmlMap
	Parent: typing.Any
	Repeating: typing.Any
	Value: typing.Any
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class XmlDataBinding(typing.Protocol):

	def ClearSettings(self) -> None:
		...
	def LoadSettings(self, Url: str=defaultNamedNotOptArg) -> None:
		...
	# Result is of type XlXmlImportResult
	def Refresh(self) -> XlXmlImportResult:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	SourceUrl: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class XmlMap(typing.Protocol):

	def Delete(self) -> None:
		...
	# Result is of type XlXmlExportResult
	def Export(self, Url: str=defaultNamedNotOptArg, Overwrite: typing.Any=defaultNamedOptArg) -> XlXmlExportResult:
		...
	# Result is of type XlXmlExportResult
	def ExportXml(self, Data: str=pythoncom.Missing) -> XlXmlExportResult:
		...
	# Result is of type XlXmlImportResult
	def Import(self, Url: str=defaultNamedNotOptArg, Overwrite: typing.Any=defaultNamedOptArg) -> XlXmlImportResult:
		...
	# Result is of type XlXmlImportResult
	def ImportXml(self, XmlData: str=defaultNamedNotOptArg, Overwrite: typing.Any=defaultNamedOptArg) -> XlXmlImportResult:
		...
	AdjustColumnWidth: typing.Any
	AppendOnImport: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataBinding' returns object of type 'XmlDataBinding'
	DataBinding: XmlDataBinding
	IsExportable: typing.Any
	Name: typing.Any
	Parent: typing.Any
	PreserveColumnFilter: typing.Any
	PreserveNumberFormatting: typing.Any
	RootElementName: typing.Any
		# Method 'RootElementNamespace' returns object of type 'XmlNamespace'
	RootElementNamespace: XmlNamespace
	SaveDataSourceDefinition: typing.Any
		# Method 'Schemas' returns object of type 'XmlSchemas'
	Schemas: XmlSchemas
	ShowImportExportValidationErrors: typing.Any
		# Method 'WorkbookConnection' returns object of type 'WorkbookConnection'
	WorkbookConnection: WorkbookConnection
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class XmlMaps(typing.Protocol):

	# Result is of type XmlMap
	def Add(self, Schema: str=defaultNamedNotOptArg, RootElementName: typing.Any=defaultNamedOptArg) -> XmlMap:
		...
	# Result is of type XmlMap
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlMap:
		...
	# Result is of type XmlMap
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlMap:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlMap:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class XmlNamespace(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Prefix: typing.Any
	Uri: typing.Any
	_Default: typing.Any
	# Default property for this class is '_Default'
	def __call__(self):
		...
	def __iter__(self):
		...

class XmlNamespaces(typing.Protocol):

	def InstallManifest(self, Path: str=defaultNamedNotOptArg, InstallForAllUsers: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type XmlNamespace
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlNamespace:
		...
	# Result is of type XmlNamespace
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlNamespace:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	Value: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlNamespace:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class XmlSchema(typing.Protocol):

		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Name: typing.Any
		# Method 'Namespace' returns object of type 'XmlNamespace'
	Namespace: XmlNamespace
	Parent: typing.Any
	XML: typing.Any
	def __iter__(self):
		...

class XmlSchemas(typing.Protocol):

	# Result is of type XmlSchema
	# The method Item is actually a property, but must be used as a method to correctly pass the arguments
	def Item(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlSchema:
		...
	# Result is of type XmlSchema
	# The method _Default is actually a property, but must be used as a method to correctly pass the arguments
	def _Default(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlSchema:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Count: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Parent: typing.Any
	# Default method for this class is '_Default'
	def __call__(self, Index: typing.Any=defaultNamedNotOptArg) -> XmlSchema:
		...
	def __iter__(self):
		...
	#This class has Item property/method which allows indexed access with the object[key] syntax.
	#Some objects will accept a string or other type of key in addition to integers.
	#Note that many Office objects do not use zero-based indexing.
	def __getitem__(self, key):
		...
	#This class has Count() property - allow len(ob) to provide this
	def __len__(self):
		...
	#This class has a __len__ - this is needed so 'if object:' always returns TRUE.
	def __nonzero__(self):
		return True

class _Application(typing.Protocol):

	def ActivateMicrosoftApp(self, Index: XlMSApplication=defaultNamedNotOptArg) -> None:
		...
	def AddChartAutoFormat(self, Chart: typing.Any=defaultNamedNotOptArg, Name: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg) -> None:
		...
	def AddCustomList(self, ListArray: typing.Any=defaultNamedNotOptArg, ByRow: typing.Any=defaultNamedOptArg) -> None:
		...
	def Calculate(self) -> None:
		...
	def CalculateFull(self) -> None:
		...
	def CalculateFullRebuild(self) -> None:
		...
	def CalculateUntilAsyncQueriesDone(self) -> None:
		...
	def CentimetersToPoints(self, Centimeters: float=defaultNamedNotOptArg) -> float:
		...
	def CheckAbort(self, KeepAbort: typing.Any=defaultNamedOptArg) -> None:
		...
	def CheckSpelling(self, Word: str=defaultNamedNotOptArg, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg) -> bool:
		...
	def ConvertFormula(self, Formula: typing.Any=defaultNamedNotOptArg, FromReferenceStyle: XlReferenceStyle=defaultNamedNotOptArg, ToReferenceStyle: typing.Any=defaultNamedOptArg, ToAbsolute: typing.Any=defaultNamedOptArg
			, RelativeTo: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def DDEExecute(self, Channel: int=defaultNamedNotOptArg, String: str=defaultNamedNotOptArg) -> None:
		...
	def DDEInitiate(self, App: str=defaultNamedNotOptArg, Topic: str=defaultNamedNotOptArg) -> int:
		...
	def DDEPoke(self, Channel: int=defaultNamedNotOptArg, Item: typing.Any=defaultNamedNotOptArg, Data: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def DDERequest(self, Channel: int=defaultNamedNotOptArg, Item: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def DDETerminate(self, Channel: int=defaultNamedNotOptArg) -> None:
		...
	def DeleteChartAutoFormat(self, Name: str=defaultNamedNotOptArg) -> None:
		...
	def DeleteCustomList(self, ListNum: int=defaultNamedNotOptArg) -> None:
		...
	def DisplayXMLSourcePane(self, XmlMap: typing.Any=defaultNamedOptArg) -> None:
		...
	def DoubleClick(self) -> None:
		...
	def Dummy1(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy10(self, arg: typing.Any=defaultNamedOptArg) -> bool:
		...
	def Dummy11(self) -> None:
		...
	def Dummy12(self, p1: PivotTable=defaultNamedNotOptArg, p2: PivotTable=defaultNamedNotOptArg) -> None:
		...
	def Dummy13(self, Arg1: typing.Any=defaultNamedNotOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy14(self) -> None:
		...
	def Dummy2(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy20(self, grfCompareFunctions: int=defaultNamedNotOptArg) -> typing.Any:
		...
	def Dummy3(self) -> typing.Any:
		...
	def Dummy4(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy5(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy6(self) -> typing.Any:
		...
	def Dummy7(self) -> typing.Any:
		...
	def Dummy8(self, Arg1: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Dummy9(self) -> typing.Any:
		...
	def Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def ExecuteExcel4Macro(self, String: str=defaultNamedNotOptArg) -> typing.Any:
		...
	# Result is of type FileDialog
	# The method FileDialog is actually a property, but must be used as a method to correctly pass the arguments
	def FileDialog(self, fileDialogType: MsoFileDialogType=defaultNamedNotOptArg) -> FileDialog:
		...
	def FindFile(self) -> bool:
		...
	# The method GetCaller is actually a property, but must be used as a method to correctly pass the arguments
	def GetCaller(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetClipboardFormats is actually a property, but must be used as a method to correctly pass the arguments
	def GetClipboardFormats(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GetCustomListContents(self, ListNum: int=defaultNamedNotOptArg) -> typing.Any:
		...
	def GetCustomListNum(self, ListArray: typing.Any=defaultNamedNotOptArg) -> int:
		...
	# The method GetFileConverters is actually a property, but must be used as a method to correctly pass the arguments
	def GetFileConverters(self, Index1: typing.Any=defaultNamedOptArg, Index2: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetInternational is actually a property, but must be used as a method to correctly pass the arguments
	def GetInternational(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GetOpenFilename(self, FileFilter: typing.Any=defaultNamedOptArg, FilterIndex: typing.Any=defaultNamedOptArg, Title: typing.Any=defaultNamedOptArg, ButtonText: typing.Any=defaultNamedOptArg
			, MultiSelect: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GetPhonetic(self, Text: typing.Any=defaultNamedOptArg) -> str:
		...
	# The method GetPreviousSelections is actually a property, but must be used as a method to correctly pass the arguments
	def GetPreviousSelections(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# The method GetRegisteredFunctions is actually a property, but must be used as a method to correctly pass the arguments
	def GetRegisteredFunctions(self, Index1: typing.Any=defaultNamedOptArg, Index2: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GetSaveAsFilename(self, InitialFilename: typing.Any=defaultNamedOptArg, FileFilter: typing.Any=defaultNamedOptArg, FilterIndex: typing.Any=defaultNamedOptArg, Title: typing.Any=defaultNamedOptArg
			, ButtonText: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Goto(self, Reference: typing.Any=defaultNamedOptArg, Scroll: typing.Any=defaultNamedOptArg) -> None:
		...
	def Help(self, HelpFile: typing.Any=defaultNamedOptArg, HelpContextID: typing.Any=defaultNamedOptArg) -> None:
		...
	def InchesToPoints(self, Inches: float=defaultNamedNotOptArg) -> float:
		...
	def InputBox(self, Prompt: str=defaultNamedNotOptArg, Title: typing.Any=defaultNamedOptArg, Default: typing.Any=defaultNamedOptArg, Left: typing.Any=defaultNamedOptArg
			, Top: typing.Any=defaultNamedOptArg, HelpFile: typing.Any=defaultNamedOptArg, HelpContextID: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type Range
	def Intersect(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> Range:
		...
	def MacroOptions(self, Macro: typing.Any=defaultNamedOptArg, Description: typing.Any=defaultNamedOptArg, HasMenu: typing.Any=defaultNamedOptArg, MenuText: typing.Any=defaultNamedOptArg
			, HasShortcutKey: typing.Any=defaultNamedOptArg, ShortcutKey: typing.Any=defaultNamedOptArg, Category: typing.Any=defaultNamedOptArg, StatusBar: typing.Any=defaultNamedOptArg, HelpContextID: typing.Any=defaultNamedOptArg
			, HelpFile: typing.Any=defaultNamedOptArg, ArgumentDescriptions: typing.Any=defaultNamedOptArg) -> None:
		...
	def MailLogoff(self) -> None:
		...
	def MailLogon(self, Name: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, DownloadNewMail: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Workbook
	def NextLetter(self) -> Workbook:
		...
	def OnKey(self, Key: str=defaultNamedNotOptArg, Procedure: typing.Any=defaultNamedOptArg) -> None:
		...
	def OnRepeat(self, Text: str=defaultNamedNotOptArg, Procedure: str=defaultNamedNotOptArg) -> None:
		...
	def OnTime(self, EarliestTime: typing.Any=defaultNamedNotOptArg, Procedure: str=defaultNamedNotOptArg, LatestTime: typing.Any=defaultNamedOptArg, Schedule: typing.Any=defaultNamedOptArg) -> None:
		...
	def OnUndo(self, Text: str=defaultNamedNotOptArg, Procedure: str=defaultNamedNotOptArg) -> None:
		...
	def Quit(self) -> None:
		...
	# Result is of type Range
	# The method Range is actually a property, but must be used as a method to correctly pass the arguments
	def Range(self, Cell1: typing.Any=defaultNamedNotOptArg, Cell2: typing.Any=defaultNamedOptArg) -> Range:
		...
	def RecordMacro(self, BasicCode: typing.Any=defaultNamedOptArg, XlmCode: typing.Any=defaultNamedOptArg) -> None:
		...
	def RegisterXLL(self, Filename: str=defaultNamedNotOptArg) -> bool:
		...
	def Repeat(self) -> None:
		...
	def ResetTipWizard(self) -> None:
		...
	def Run(self, Macro: typing.Any=defaultNamedOptArg, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg
			, Arg4: typing.Any=defaultNamedOptArg, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg
			, Arg9: typing.Any=defaultNamedOptArg, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg
			, Arg14: typing.Any=defaultNamedOptArg, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg
			, Arg19: typing.Any=defaultNamedOptArg, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg
			, Arg24: typing.Any=defaultNamedOptArg, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg
			, Arg29: typing.Any=defaultNamedOptArg, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Save(self, Filename: typing.Any=defaultNamedOptArg) -> None:
		...
	def SaveWorkspace(self, Filename: typing.Any=defaultNamedOptArg) -> None:
		...
	def SendKeys(self, Keys: typing.Any=defaultNamedNotOptArg, Wait: typing.Any=defaultNamedOptArg) -> None:
		...
	def SetDefaultChart(self, FormatName: typing.Any=defaultNamedOptArg, Gallery: typing.Any=defaultNamedOptArg) -> None:
		...
	def SharePointVersion(self, bstrUrl: str=defaultNamedNotOptArg) -> int:
		...
	# Result is of type Menu
	# The method ShortcutMenus is actually a property, but must be used as a method to correctly pass the arguments
	def ShortcutMenus(self, Index: int=defaultNamedNotOptArg) -> Menu:
		...
	def Support(self, Object: Dispatch=defaultNamedNotOptArg, ID: int=defaultNamedNotOptArg, arg: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def Undo(self) -> None:
		...
	# Result is of type Range
	def Union(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> Range:
		...
	def Volatile(self, Volatile: typing.Any=defaultNamedOptArg) -> None:
		...
	def Wait(self, Time: typing.Any=defaultNamedNotOptArg) -> bool:
		...
	def _Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def _FindFile(self) -> None:
		...
	def _MacroOptions(self, Macro: typing.Any=defaultNamedOptArg, Description: typing.Any=defaultNamedOptArg, HasMenu: typing.Any=defaultNamedOptArg, MenuText: typing.Any=defaultNamedOptArg
			, HasShortcutKey: typing.Any=defaultNamedOptArg, ShortcutKey: typing.Any=defaultNamedOptArg, Category: typing.Any=defaultNamedOptArg, StatusBar: typing.Any=defaultNamedOptArg, HelpContextID: typing.Any=defaultNamedOptArg
			, HelpFile: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Run2(self, Macro: typing.Any=defaultNamedOptArg, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg
			, Arg4: typing.Any=defaultNamedOptArg, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg
			, Arg9: typing.Any=defaultNamedOptArg, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg
			, Arg14: typing.Any=defaultNamedOptArg, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg
			, Arg19: typing.Any=defaultNamedOptArg, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg
			, Arg24: typing.Any=defaultNamedOptArg, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg
			, Arg29: typing.Any=defaultNamedOptArg, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _WSFunction(self, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def _Wait(self, Time: typing.Any=defaultNamedNotOptArg) -> None:
		...
		# Method 'ActiveCell' returns object of type 'Range'
	ActiveCell: Range
		# Method 'ActiveChart' returns object of type 'Chart'
	ActiveChart: Chart
		# Method 'ActiveDialog' returns object of type 'DialogSheet'
	ActiveDialog: DialogSheet
	ActiveEncryptionSession: typing.Any
		# Method 'ActiveMenuBar' returns object of type 'MenuBar'
	ActiveMenuBar: MenuBar
	ActivePrinter: typing.Any
		# Method 'ActiveProtectedViewWindow' returns object of type 'ProtectedViewWindow'
	ActiveProtectedViewWindow: ProtectedViewWindow
	ActiveSheet: typing.Any
		# Method 'ActiveWindow' returns object of type 'Window'
	ActiveWindow: Window
		# Method 'ActiveWorkbook' returns object of type 'Workbook'
	ActiveWorkbook: Workbook
		# Method 'AddIns' returns object of type 'AddIns'
	AddIns: AddIns
		# Method 'AddIns2' returns object of type 'AddIns2'
	AddIns2: AddIns2
	AlertBeforeOverwriting: typing.Any
	AltStartupPath: typing.Any
	AlwaysUseClearType: typing.Any
		# Method 'AnswerWizard' returns object of type 'AnswerWizard'
	AnswerWizard: AnswerWizard
		# Method 'Application' returns object of type 'Application'
	Application: Application
	ArbitraryXMLSupportAvailable: typing.Any
	AskToUpdateLinks: typing.Any
		# Method 'Assistance' returns object of type 'IAssistance'
	Assistance: IAssistance
		# Method 'Assistant' returns object of type 'Assistant'
	Assistant: Assistant
		# Method 'AutoCorrect' returns object of type 'AutoCorrect'
	AutoCorrect: AutoCorrect
	AutoFormatAsYouTypeReplaceHyperlinks: typing.Any
	AutoPercentEntry: typing.Any
		# Method 'AutoRecover' returns object of type 'AutoRecover'
	AutoRecover: AutoRecover
		# Method 'AutomationSecurity' returns enumeration of type 'MsoAutomationSecurity'
	AutomationSecurity: MsoAutomationSecurity
	Build: typing.Any
		# Method 'COMAddIns' returns object of type 'COMAddIns'
	COMAddIns: COMAddIns
	CSVDisplayNumberConversionWarning: typing.Any
	CSVKeepColumnAsTextIfMultipleEntriesAreText: typing.Any
	CSVKeepDigitsWithEAsText: typing.Any
	CSVKeepLargeNumbersAsText: typing.Any
	CSVKeepLeadingZerosAsText: typing.Any
	CalculateBeforeSave: typing.Any
		# Method 'Calculation' returns enumeration of type 'XlCalculation'
	Calculation: XlCalculation
		# Method 'CalculationInterruptKey' returns enumeration of type 'XlCalculationInterruptKey'
	CalculationInterruptKey: XlCalculationInterruptKey
		# Method 'CalculationState' returns enumeration of type 'XlCalculationState'
	CalculationState: XlCalculationState
	CalculationVersion: typing.Any
	Caller: typing.Any
	CanPlaySounds: typing.Any
	CanRecordSounds: typing.Any
	Caption: typing.Any
	CellDragAndDrop: typing.Any
		# Method 'Cells' returns object of type 'Range'
	Cells: Range
	ChartDataPointTrack: typing.Any
		# Method 'Charts' returns object of type 'Sheets'
	Charts: Sheets
	ClipboardFormats: typing.Any
	ClusterConnector: typing.Any
	ColorButtons: typing.Any
		# Method 'Columns' returns object of type 'Range'
	Columns: Range
		# Method 'CommandBars' returns object of type 'CommandBars'
	CommandBars: CommandBars
		# Method 'CommandUnderlines' returns enumeration of type 'XlCommandUnderlines'
	CommandUnderlines: XlCommandUnderlines
	ConstrainNumeric: typing.Any
	ControlCharacters: typing.Any
	CopyObjectsWithCells: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Cursor' returns enumeration of type 'XlMousePointer'
	Cursor: XlMousePointer
	CursorMovement: typing.Any
	CustomListCount: typing.Any
		# Method 'CutCopyMode' returns enumeration of type 'XlCutCopyMode'
	CutCopyMode: XlCutCopyMode
	DDEAppReturnCode: typing.Any
	DataEntryMode: typing.Any
		# Method 'DataPrivacyOptions' returns object of type 'DataPrivacyOptions'
	DataPrivacyOptions: DataPrivacyOptions
	DecimalSeparator: typing.Any
	DefaultFilePath: typing.Any
		# Method 'DefaultPivotTableLayoutOptions' returns object of type 'DefaultPivotTableLayoutOptions'
	DefaultPivotTableLayoutOptions: DefaultPivotTableLayoutOptions
		# Method 'DefaultSaveFormat' returns enumeration of type 'XlFileFormat'
	DefaultSaveFormat: XlFileFormat
	DefaultSheetDirection: typing.Any
		# Method 'DefaultWebOptions' returns object of type 'DefaultWebOptions'
	DefaultWebOptions: DefaultWebOptions
	DeferAsyncQueries: typing.Any
		# Method 'DialogSheets' returns object of type 'Sheets'
	DialogSheets: Sheets
		# Method 'Dialogs' returns object of type 'Dialogs'
	Dialogs: Dialogs
	DisplayAlerts: typing.Any
	DisplayClipboardWindow: typing.Any
		# Method 'DisplayCommentIndicator' returns enumeration of type 'XlCommentDisplayMode'
	DisplayCommentIndicator: XlCommentDisplayMode
	DisplayDocumentActionTaskPane: typing.Any
	DisplayDocumentInformationPanel: typing.Any
	DisplayExcel4Menus: typing.Any
	DisplayFormulaAutoComplete: typing.Any
	DisplayFormulaBar: typing.Any
	DisplayFullScreen: typing.Any
	DisplayFunctionToolTips: typing.Any
	DisplayInfoWindow: typing.Any
	DisplayInsertOptions: typing.Any
	DisplayNoteIndicator: typing.Any
	DisplayPasteOptions: typing.Any
	DisplayRecentFiles: typing.Any
	DisplayScrollBars: typing.Any
	DisplayStatusBar: typing.Any
	Dummy101: typing.Any
	Dummy22: typing.Any
	Dummy23: typing.Any
	EditDirectlyInCell: typing.Any
	EnableAnimations: typing.Any
	EnableAutoComplete: typing.Any
		# Method 'EnableCancelKey' returns enumeration of type 'XlEnableCancelKey'
	EnableCancelKey: XlEnableCancelKey
	EnableCheckFileExtensions: typing.Any
	EnableEvents: typing.Any
	EnableLargeOperationAlert: typing.Any
	EnableLivePreview: typing.Any
	EnableMacroAnimations: typing.Any
	EnableSound: typing.Any
	EnableTipWizard: typing.Any
		# Method 'ErrorCheckingOptions' returns object of type 'ErrorCheckingOptions'
	ErrorCheckingOptions: ErrorCheckingOptions
		# Method 'Excel4IntlMacroSheets' returns object of type 'Sheets'
	Excel4IntlMacroSheets: Sheets
		# Method 'Excel4MacroSheets' returns object of type 'Sheets'
	Excel4MacroSheets: Sheets
	ExtendList: typing.Any
		# Method 'FeatureInstall' returns enumeration of type 'MsoFeatureInstall'
	FeatureInstall: MsoFeatureInstall
	FileConverters: typing.Any
		# Method 'FileExportConverters' returns object of type 'FileExportConverters'
	FileExportConverters: FileExportConverters
		# Method 'FileFind' returns object of type 'IFind'
	FileFind: IFind
		# Method 'FileSearch' returns object of type 'FileSearch'
	FileSearch: FileSearch
		# Method 'FileValidation' returns enumeration of type 'MsoFileValidationMode'
	FileValidation: MsoFileValidationMode
		# Method 'FileValidationPivot' returns enumeration of type 'XlFileValidationPivotMode'
	FileValidationPivot: XlFileValidationPivotMode
		# Method 'FindFormat' returns object of type 'CellFormat'
	FindFormat: CellFormat
	FixedDecimal: typing.Any
	FixedDecimalPlaces: typing.Any
	FlashFill: typing.Any
	FlashFillMode: typing.Any
	FormulaBarHeight: typing.Any
	GenerateGetPivotData: typing.Any
		# Method 'GenerateTableRefs' returns enumeration of type 'XlGenerateTableRefs'
	GenerateTableRefs: XlGenerateTableRefs
	Height: typing.Any
	HighQualityModeForGraphics: typing.Any
	Hinstance: typing.Any
	HinstancePtr: typing.Any
	Hwnd: typing.Any
	IgnoreRemoteRequests: typing.Any
	Interactive: typing.Any
	International: typing.Any
	IsSandboxed: typing.Any
	Iteration: typing.Any
		# Method 'LanguageSettings' returns object of type 'LanguageSettings'
	LanguageSettings: LanguageSettings
	LargeButtons: typing.Any
	LargeOperationCellThousandCount: typing.Any
	Left: typing.Any
	LibraryPath: typing.Any
	MailSession: typing.Any
		# Method 'MailSystem' returns enumeration of type 'XlMailSystem'
	MailSystem: XlMailSystem
	MapPaperSize: typing.Any
	MathCoprocessorAvailable: typing.Any
	MaxChange: typing.Any
	MaxIterations: typing.Any
	MeasurementUnit: typing.Any
	MemoryFree: typing.Any
	MemoryTotal: typing.Any
	MemoryUsed: typing.Any
		# Method 'MenuBars' returns object of type 'MenuBars'
	MenuBars: MenuBars
	MergeInstances: typing.Any
		# Method 'Modules' returns object of type 'Modules'
	Modules: Modules
	MouseAvailable: typing.Any
	MoveAfterReturn: typing.Any
		# Method 'MoveAfterReturnDirection' returns enumeration of type 'XlDirection'
	MoveAfterReturnDirection: XlDirection
		# Method 'MultiThreadedCalculation' returns object of type 'MultiThreadedCalculation'
	MultiThreadedCalculation: MultiThreadedCalculation
	Name: typing.Any
		# Method 'Names' returns object of type 'Names'
	Names: Names
	NetworkTemplatesPath: typing.Any
		# Method 'NewWorkbook' returns object of type 'NewFile'
	NewWorkbook: NewFile
		# Method 'ODBCErrors' returns object of type 'ODBCErrors'
	ODBCErrors: ODBCErrors
	ODBCTimeout: typing.Any
		# Method 'OLEDBErrors' returns object of type 'OLEDBErrors'
	OLEDBErrors: OLEDBErrors
	OnCalculate: typing.Any
	OnData: typing.Any
	OnDoubleClick: typing.Any
	OnEntry: typing.Any
	OnSheetActivate: typing.Any
	OnSheetDeactivate: typing.Any
	OnWindow: typing.Any
	OperatingSystem: typing.Any
	OrganizationName: typing.Any
		# Method 'Parent' returns object of type 'Application'
	Parent: Application
	Path: typing.Any
	PathSeparator: typing.Any
	PivotTableSelection: typing.Any
	PreviousSelections: typing.Any
	PrintCommunication: typing.Any
	ProductCode: typing.Any
	PromptForSummaryInfo: typing.Any
		# Method 'ProtectedViewWindows' returns object of type 'ProtectedViewWindows'
	ProtectedViewWindows: ProtectedViewWindows
		# Method 'QuickAnalysis' returns object of type 'QuickAnalysis'
	QuickAnalysis: QuickAnalysis
	Quitting: typing.Any
		# Method 'RTD' returns object of type 'RTD'
	RTD: RTD
	Ready: typing.Any
		# Method 'RecentFiles' returns object of type 'RecentFiles'
	RecentFiles: RecentFiles
	RecordRelative: typing.Any
		# Method 'ReferenceStyle' returns enumeration of type 'XlReferenceStyle'
	ReferenceStyle: XlReferenceStyle
	RegisteredFunctions: typing.Any
		# Method 'ReplaceFormat' returns object of type 'CellFormat'
	ReplaceFormat: CellFormat
	RollZoom: typing.Any
		# Method 'Rows' returns object of type 'Range'
	Rows: Range
	SaveISO8601Dates: typing.Any
	ScreenUpdating: typing.Any
	Selection: typing.Any
		# Method 'SensitivityLabelPolicy' returns object of type 'SensitivityLabelPolicy'
	SensitivityLabelPolicy: SensitivityLabelPolicy
		# Method 'Sheets' returns object of type 'Sheets'
	Sheets: Sheets
	SheetsInNewWorkbook: typing.Any
	ShowChartTipNames: typing.Any
	ShowChartTipValues: typing.Any
	ShowConvertToDataType: typing.Any
	ShowDevTools: typing.Any
	ShowMenuFloaties: typing.Any
	ShowQuickAnalysis: typing.Any
	ShowSelectionFloaties: typing.Any
	ShowStartupDialog: typing.Any
	ShowToolTips: typing.Any
	ShowWindowsInTaskbar: typing.Any
		# Method 'SmartArtColors' returns object of type 'SmartArtColors'
	SmartArtColors: SmartArtColors
		# Method 'SmartArtLayouts' returns object of type 'SmartArtLayouts'
	SmartArtLayouts: SmartArtLayouts
		# Method 'SmartArtQuickStyles' returns object of type 'SmartArtQuickStyles'
	SmartArtQuickStyles: SmartArtQuickStyles
		# Method 'SmartTagRecognizers' returns object of type 'SmartTagRecognizers'
	SmartTagRecognizers: SmartTagRecognizers
		# Method 'Speech' returns object of type 'Speech'
	Speech: Speech
		# Method 'SpellingOptions' returns object of type 'SpellingOptions'
	SpellingOptions: SpellingOptions
	StandardFont: typing.Any
	StandardFontSize: typing.Any
	StartupPath: typing.Any
	StatusBar: typing.Any
	TemplatesPath: typing.Any
		# Method 'ThisCell' returns object of type 'Range'
	ThisCell: Range
		# Method 'ThisWorkbook' returns object of type 'Workbook'
	ThisWorkbook: Workbook
	ThousandsSeparator: typing.Any
		# Method 'Toolbars' returns object of type 'Toolbars'
	Toolbars: Toolbars
	Top: typing.Any
	TransitionMenuKey: typing.Any
	TransitionMenuKeyAction: typing.Any
	TransitionNavigKeys: typing.Any
	UILanguage: typing.Any
	UsableHeight: typing.Any
	UsableWidth: typing.Any
	UseClusterConnector: typing.Any
	UseSystemSeparators: typing.Any
		# Method 'UsedObjects' returns object of type 'UsedObjects'
	UsedObjects: UsedObjects
	UserControl: typing.Any
	UserLibraryPath: typing.Any
	UserName: typing.Any
		# Method 'VBE' returns object of type 'VBE'
	VBE: VBE
	Value: typing.Any
	Version: typing.Any
	Visible: typing.Any
	WarnOnFunctionNameConflict: typing.Any
		# Method 'Watches' returns object of type 'Watches'
	Watches: Watches
	Width: typing.Any
		# Method 'WindowState' returns enumeration of type 'XlWindowState'
	WindowState: XlWindowState
		# Method 'Windows' returns object of type 'Windows'
	Windows: Windows
	WindowsForPens: typing.Any
		# Method 'Workbooks' returns object of type 'Workbooks'
	Workbooks: Workbooks
		# Method 'WorksheetFunction' returns object of type 'WorksheetFunction'
	WorksheetFunction: WorksheetFunction
		# Method 'Worksheets' returns object of type 'Sheets'
	Worksheets: Sheets
	_Default: typing.Any
	# Default property for this class is 'Value'
	def __call__(self):
		...
	def __iter__(self):
		...

class _Chart(typing.Protocol):

	def Activate(self) -> None:
		...
	def ApplyChartTemplate(self, Filename: str=defaultNamedNotOptArg) -> None:
		...
	def ApplyCustomType(self, ChartType: XlChartType=defaultNamedNotOptArg, TypeName: typing.Any=defaultNamedOptArg) -> None:
		...
	def ApplyDataLabels(self, Type: XlDataLabelsType=2, LegendKey: typing.Any=defaultNamedOptArg, AutoText: typing.Any=defaultNamedOptArg, HasLeaderLines: typing.Any=defaultNamedOptArg
			, ShowSeriesName: typing.Any=defaultNamedOptArg, ShowCategoryName: typing.Any=defaultNamedOptArg, ShowValue: typing.Any=defaultNamedOptArg, ShowPercentage: typing.Any=defaultNamedOptArg, ShowBubbleSize: typing.Any=defaultNamedOptArg
			, Separator: typing.Any=defaultNamedOptArg) -> None:
		...
	def ApplyLayout(self, Layout: int=defaultNamedNotOptArg, ChartType: typing.Any=defaultNamedOptArg) -> None:
		...
	def Arcs(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def AreaGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def AutoFormat(self, Gallery: int=defaultNamedNotOptArg, Format: typing.Any=defaultNamedOptArg) -> None:
		...
	def Axes(self, Type: typing.Any=defaultNamedNotOptArg, AxisGroup: XlAxisGroup=1) -> Dispatch:
		...
	def BarGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Buttons(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ChartGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ChartObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ChartWizard(self, Source: typing.Any=defaultNamedOptArg, Gallery: typing.Any=defaultNamedOptArg, Format: typing.Any=defaultNamedOptArg, PlotBy: typing.Any=defaultNamedOptArg
			, CategoryLabels: typing.Any=defaultNamedOptArg, SeriesLabels: typing.Any=defaultNamedOptArg, HasLegend: typing.Any=defaultNamedOptArg, Title: typing.Any=defaultNamedOptArg, CategoryTitle: typing.Any=defaultNamedOptArg
			, ValueTitle: typing.Any=defaultNamedOptArg, ExtraTitle: typing.Any=defaultNamedOptArg) -> None:
		...
	def CheckBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> None:
		...
	def ClearToMatchColorStyle(self) -> None:
		...
	def ClearToMatchStyle(self) -> None:
		...
	def ColumnGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def CopyChartBuild(self) -> None:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=1, Format: XlCopyPictureFormat=-4147, Size: XlPictureAppearance=2) -> None:
		...
	def CreatePublisher(self, Edition: typing.Any=defaultNamedNotOptArg, Appearance: XlPictureAppearance=1, Size: XlPictureAppearance=1, ContainsPICT: typing.Any=defaultNamedOptArg
			, ContainsBIFF: typing.Any=defaultNamedOptArg, ContainsRTF: typing.Any=defaultNamedOptArg, ContainsVALU: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def DeleteHiddenContent(self) -> None:
		...
	def Deselect(self) -> None:
		...
	def DoughnutGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def DrawingObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Drawings(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def DropDowns(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def Export(self, Filename: str=defaultNamedNotOptArg, FilterName: typing.Any=defaultNamedOptArg, Interactive: typing.Any=defaultNamedOptArg) -> bool:
		...
	def ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg
			, WorkIdentity: typing.Any=defaultNamedOptArg) -> None:
		...
	def FullSeriesCollection(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def GetChartElement(self, x: int=defaultNamedNotOptArg, y: int=defaultNamedNotOptArg, ElementID: int=defaultNamedNotOptArg, Arg1: int=defaultNamedNotOptArg
			, Arg2: int=defaultNamedNotOptArg) -> None:
		...
	# The method GetHasAxis is actually a property, but must be used as a method to correctly pass the arguments
	def GetHasAxis(self, Index1: typing.Any=defaultNamedOptArg, Index2: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def GetProperty(self, ID: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def GroupBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def GroupObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Labels(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def LineGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Lines(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ListBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# Result is of type Chart
	def Location(self, Where: XlChartLocation=defaultNamedNotOptArg, Name: typing.Any=defaultNamedOptArg) -> Chart:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def OLEObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def OptionButtons(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Ovals(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Paste(self, Type: typing.Any=defaultNamedOptArg) -> None:
		...
	def Pictures(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def PieGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg) -> None:
		...
	def RadarGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Rectangles(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Refresh(self) -> None:
		...
	def SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def SaveChartTemplate(self, Filename: str=defaultNamedNotOptArg) -> None:
		...
	def ScrollBars(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	def SeriesCollection(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def SetBackgroundPicture(self, Filename: str=defaultNamedNotOptArg) -> None:
		...
	def SetDefaultChart(self, Name: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def SetElement(self, Element: MsoChartElementType=defaultNamedNotOptArg) -> None:
		...
	# The method SetHasAxis is actually a property, but must be used as a method to correctly pass the arguments
	def SetHasAxis(self, Index1: typing.Any=defaultNamedNotOptArg, Index2: typing.Any=defaultNamedOptArg, arg2: typing.Any=defaultUnnamedArg) -> None:
		...
	def SetProperty(self, ID: str=defaultNamedNotOptArg, Value: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def SetSourceData(self, Source: Range=defaultNamedNotOptArg, PlotBy: typing.Any=defaultNamedOptArg) -> None:
		...
	def Spinners(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def TextBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Unprotect(self, Password: typing.Any=defaultNamedOptArg) -> None:
		...
	def XYGroups(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def _ApplyDataLabels(self, Type: XlDataLabelsType=2, LegendKey: typing.Any=defaultNamedOptArg, AutoText: typing.Any=defaultNamedOptArg, HasLeaderLines: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def _ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs_(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Area3DGroup' returns object of type 'ChartGroup'
	Area3DGroup: ChartGroup
	AutoScaling: typing.Any
		# Method 'BackWall' returns object of type 'Walls'
	BackWall: Walls
		# Method 'Bar3DGroup' returns object of type 'ChartGroup'
	Bar3DGroup: ChartGroup
		# Method 'BarShape' returns enumeration of type 'XlBarShape'
	BarShape: XlBarShape
		# Method 'CategoryLabelLevel' returns enumeration of type 'XlCategoryLabelLevel'
	CategoryLabelLevel: XlCategoryLabelLevel
		# Method 'ChartArea' returns object of type 'ChartArea'
	ChartArea: ChartArea
	ChartColor: typing.Any
	ChartStyle: typing.Any
		# Method 'ChartTitle' returns object of type 'ChartTitle'
	ChartTitle: ChartTitle
		# Method 'ChartType' returns enumeration of type 'XlChartType'
	ChartType: XlChartType
	CodeName: typing.Any
		# Method 'Column3DGroup' returns object of type 'ChartGroup'
	Column3DGroup: ChartGroup
		# Method 'Corners' returns object of type 'Corners'
	Corners: Corners
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'DataTable' returns object of type 'DataTable'
	DataTable: DataTable
	DepthPercent: typing.Any
		# Method 'DisplayBlanksAs' returns enumeration of type 'XlDisplayBlanksAs'
	DisplayBlanksAs: XlDisplayBlanksAs
	DisplayValueNotAvailableAsBlank: typing.Any
	Dummy24: typing.Any
	Dummy25: typing.Any
	Elevation: typing.Any
		# Method 'Floor' returns object of type 'Floor'
	Floor: Floor
	GapDepth: typing.Any
	HasAxis: typing.Any
	HasDataTable: typing.Any
	HasHiddenContent: typing.Any
	HasLegend: typing.Any
	HasPivotFields: typing.Any
	HasTitle: typing.Any
	HeightPercent: typing.Any
		# Method 'Hyperlinks' returns object of type 'Hyperlinks'
	Hyperlinks: Hyperlinks
	Index: typing.Any
		# Method 'Legend' returns object of type 'Legend'
	Legend: Legend
		# Method 'Line3DGroup' returns object of type 'ChartGroup'
	Line3DGroup: ChartGroup
		# Method 'MailEnvelope' returns object of type 'MsoEnvelope'
	MailEnvelope: MsoEnvelope
	Name: typing.Any
	Next: typing.Any
	OnDoubleClick: typing.Any
	OnSheetActivate: typing.Any
	OnSheetDeactivate: typing.Any
		# Method 'PageSetup' returns object of type 'PageSetup'
	PageSetup: PageSetup
	Parent: typing.Any
	Perspective: typing.Any
		# Method 'Pie3DGroup' returns object of type 'ChartGroup'
	Pie3DGroup: ChartGroup
		# Method 'PivotLayout' returns object of type 'PivotLayout'
	PivotLayout: PivotLayout
		# Method 'PlotArea' returns object of type 'PlotArea'
	PlotArea: PlotArea
		# Method 'PlotBy' returns enumeration of type 'XlRowCol'
	PlotBy: XlRowCol
	PlotVisibleOnly: typing.Any
	Previous: typing.Any
	PrintedCommentPages: typing.Any
	ProtectContents: typing.Any
	ProtectData: typing.Any
	ProtectDrawingObjects: typing.Any
	ProtectFormatting: typing.Any
	ProtectGoalSeek: typing.Any
	ProtectSelection: typing.Any
	ProtectionMode: typing.Any
	RightAngleAxes: typing.Any
	Rotation: typing.Any
		# Method 'Scripts' returns object of type 'Scripts'
	Scripts: Scripts
		# Method 'SeriesNameLevel' returns enumeration of type 'XlSeriesNameLevel'
	SeriesNameLevel: XlSeriesNameLevel
		# Method 'Shapes' returns object of type 'Shapes'
	Shapes: Shapes
	ShowAllFieldButtons: typing.Any
	ShowAxisFieldButtons: typing.Any
	ShowDataLabelsOverMaximum: typing.Any
	ShowExpandCollapseEntireFieldButtons: typing.Any
	ShowLegendFieldButtons: typing.Any
	ShowReportFilterFieldButtons: typing.Any
	ShowValueFieldButtons: typing.Any
	ShowWindow: typing.Any
		# Method 'SideWall' returns object of type 'Walls'
	SideWall: Walls
	SizeWithWindow: typing.Any
	SubType: typing.Any
		# Method 'SurfaceGroup' returns object of type 'ChartGroup'
	SurfaceGroup: ChartGroup
		# Method 'Tab' returns object of type 'Tab'
	Tab: Tab
	Type: typing.Any
		# Method 'Visible' returns enumeration of type 'XlSheetVisibility'
	Visible: XlSheetVisibility
		# Method 'Walls' returns object of type 'Walls'
	Walls: Walls
	WallsAndGridlines2D: typing.Any
	_CodeName: typing.Any
	def __iter__(self):
		...

class _Global(typing.Protocol):

	def Calculate(self) -> None:
		...
	def DDEExecute(self, Channel: int=defaultNamedNotOptArg, String: str=defaultNamedNotOptArg) -> None:
		...
	def DDEInitiate(self, App: str=defaultNamedNotOptArg, Topic: str=defaultNamedNotOptArg) -> int:
		...
	def DDEPoke(self, Channel: int=defaultNamedNotOptArg, Item: typing.Any=defaultNamedNotOptArg, Data: typing.Any=defaultNamedNotOptArg) -> None:
		...
	def DDERequest(self, Channel: int=defaultNamedNotOptArg, Item: str=defaultNamedNotOptArg) -> typing.Any:
		...
	def DDETerminate(self, Channel: int=defaultNamedNotOptArg) -> None:
		...
	def Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def ExecuteExcel4Macro(self, String: str=defaultNamedNotOptArg) -> typing.Any:
		...
	# Result is of type Range
	def Intersect(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> Range:
		...
	# Result is of type Range
	# The method Range is actually a property, but must be used as a method to correctly pass the arguments
	def Range(self, Cell1: typing.Any=defaultNamedNotOptArg, Cell2: typing.Any=defaultNamedOptArg) -> Range:
		...
	def Run(self, Macro: typing.Any=defaultNamedOptArg, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg
			, Arg4: typing.Any=defaultNamedOptArg, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg
			, Arg9: typing.Any=defaultNamedOptArg, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg
			, Arg14: typing.Any=defaultNamedOptArg, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg
			, Arg19: typing.Any=defaultNamedOptArg, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg
			, Arg24: typing.Any=defaultNamedOptArg, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg
			, Arg29: typing.Any=defaultNamedOptArg, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendKeys(self, Keys: typing.Any=defaultNamedNotOptArg, Wait: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Menu
	# The method ShortcutMenus is actually a property, but must be used as a method to correctly pass the arguments
	def ShortcutMenus(self, Index: int=defaultNamedNotOptArg) -> Menu:
		...
	# Result is of type Range
	def Union(self, Arg1: Range=defaultNamedNotOptArg, Arg2: Range=defaultNamedNotOptArg, Arg3: typing.Any=defaultNamedOptArg, Arg4: typing.Any=defaultNamedOptArg
			, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg, Arg9: typing.Any=defaultNamedOptArg
			, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg, Arg14: typing.Any=defaultNamedOptArg
			, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg, Arg19: typing.Any=defaultNamedOptArg
			, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg, Arg24: typing.Any=defaultNamedOptArg
			, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg, Arg29: typing.Any=defaultNamedOptArg
			, Arg30: typing.Any=defaultNamedOptArg) -> Range:
		...
	def _Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def _Run2(self, Macro: typing.Any=defaultNamedOptArg, Arg1: typing.Any=defaultNamedOptArg, Arg2: typing.Any=defaultNamedOptArg, Arg3: typing.Any=defaultNamedOptArg
			, Arg4: typing.Any=defaultNamedOptArg, Arg5: typing.Any=defaultNamedOptArg, Arg6: typing.Any=defaultNamedOptArg, Arg7: typing.Any=defaultNamedOptArg, Arg8: typing.Any=defaultNamedOptArg
			, Arg9: typing.Any=defaultNamedOptArg, Arg10: typing.Any=defaultNamedOptArg, Arg11: typing.Any=defaultNamedOptArg, Arg12: typing.Any=defaultNamedOptArg, Arg13: typing.Any=defaultNamedOptArg
			, Arg14: typing.Any=defaultNamedOptArg, Arg15: typing.Any=defaultNamedOptArg, Arg16: typing.Any=defaultNamedOptArg, Arg17: typing.Any=defaultNamedOptArg, Arg18: typing.Any=defaultNamedOptArg
			, Arg19: typing.Any=defaultNamedOptArg, Arg20: typing.Any=defaultNamedOptArg, Arg21: typing.Any=defaultNamedOptArg, Arg22: typing.Any=defaultNamedOptArg, Arg23: typing.Any=defaultNamedOptArg
			, Arg24: typing.Any=defaultNamedOptArg, Arg25: typing.Any=defaultNamedOptArg, Arg26: typing.Any=defaultNamedOptArg, Arg27: typing.Any=defaultNamedOptArg, Arg28: typing.Any=defaultNamedOptArg
			, Arg29: typing.Any=defaultNamedOptArg, Arg30: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
		# Method 'ActiveCell' returns object of type 'Range'
	ActiveCell: Range
		# Method 'ActiveChart' returns object of type 'Chart'
	ActiveChart: Chart
		# Method 'ActiveDialog' returns object of type 'DialogSheet'
	ActiveDialog: DialogSheet
		# Method 'ActiveMenuBar' returns object of type 'MenuBar'
	ActiveMenuBar: MenuBar
	ActivePrinter: typing.Any
	ActiveSheet: typing.Any
		# Method 'ActiveWindow' returns object of type 'Window'
	ActiveWindow: Window
		# Method 'ActiveWorkbook' returns object of type 'Workbook'
	ActiveWorkbook: Workbook
		# Method 'AddIns' returns object of type 'AddIns'
	AddIns: AddIns
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'Assistant' returns object of type 'Assistant'
	Assistant: Assistant
		# Method 'Cells' returns object of type 'Range'
	Cells: Range
		# Method 'Charts' returns object of type 'Sheets'
	Charts: Sheets
		# Method 'Columns' returns object of type 'Range'
	Columns: Range
		# Method 'CommandBars' returns object of type 'CommandBars'
	CommandBars: CommandBars
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	DDEAppReturnCode: typing.Any
		# Method 'DialogSheets' returns object of type 'Sheets'
	DialogSheets: Sheets
		# Method 'Excel4IntlMacroSheets' returns object of type 'Sheets'
	Excel4IntlMacroSheets: Sheets
		# Method 'Excel4MacroSheets' returns object of type 'Sheets'
	Excel4MacroSheets: Sheets
		# Method 'MenuBars' returns object of type 'MenuBars'
	MenuBars: MenuBars
		# Method 'Modules' returns object of type 'Modules'
	Modules: Modules
		# Method 'Names' returns object of type 'Names'
	Names: Names
		# Method 'Parent' returns object of type 'Application'
	Parent: Application
		# Method 'Rows' returns object of type 'Range'
	Rows: Range
	Selection: typing.Any
		# Method 'Sheets' returns object of type 'Sheets'
	Sheets: Sheets
		# Method 'ThisWorkbook' returns object of type 'Workbook'
	ThisWorkbook: Workbook
		# Method 'Toolbars' returns object of type 'Toolbars'
	Toolbars: Toolbars
		# Method 'Windows' returns object of type 'Windows'
	Windows: Windows
		# Method 'Workbooks' returns object of type 'Workbooks'
	Workbooks: Workbooks
		# Method 'WorksheetFunction' returns object of type 'WorksheetFunction'
	WorksheetFunction: WorksheetFunction
		# Method 'Worksheets' returns object of type 'Sheets'
	Worksheets: Sheets
	def __iter__(self):
		...

class _IOLEObject(typing.Protocol):

	AltHTML: typing.Any
	Application: typing.Any
	AutoLoad: typing.Any
	AutoUpdate: typing.Any
	Border: typing.Any
	BottomRightCell: typing.Any
	Creator: typing.Any
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
	Interior: typing.Any
	Left: typing.Any
	LinkedCell: typing.Any
	ListFillRange: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OLEType: typing.Any
	Object: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
	ShapeRange: typing.Any
	SourceName: typing.Any
	Top: typing.Any
	TopLeftCell: typing.Any
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	progID: typing.Any
	def __iter__(self):
		...

class _IQueryTable(typing.Protocol):

	AdjustColumnWidth: typing.Any
	Application: typing.Any
	BackgroundQuery: typing.Any
	CommandText: typing.Any
	CommandType: typing.Any
	Connection: typing.Any
	Creator: typing.Any
	Destination: typing.Any
	EditWebPage: typing.Any
	EnableEditing: typing.Any
	EnableRefresh: typing.Any
	FetchedRowOverflow: typing.Any
	FieldNames: typing.Any
	FillAdjacentFormulas: typing.Any
	HasAutoFormat: typing.Any
	ListObject: typing.Any
	MaintainConnection: typing.Any
	Name: typing.Any
	Parameters: typing.Any
	Parent: typing.Any
	PostText: typing.Any
	PreserveColumnInfo: typing.Any
	PreserveFormatting: typing.Any
	QueryType: typing.Any
	Recordset: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
	RefreshStyle: typing.Any
	Refreshing: typing.Any
	ResultRange: typing.Any
	RobustConnect: typing.Any
	RowNumbers: typing.Any
	SaveData: typing.Any
	SavePassword: typing.Any
	Sort: typing.Any
	SourceConnectionFile: typing.Any
	SourceDataFile: typing.Any
	Sql: typing.Any
	TablesOnlyFromHTML: typing.Any
	TextFileColumnDataTypes: typing.Any
	TextFileCommaDelimiter: typing.Any
	TextFileConsecutiveDelimiter: typing.Any
	TextFileDecimalSeparator: typing.Any
	TextFileFixedColumnWidths: typing.Any
	TextFileOtherDelimiter: typing.Any
	TextFileParseType: typing.Any
	TextFilePlatform: typing.Any
	TextFilePromptOnRefresh: typing.Any
	TextFileSemicolonDelimiter: typing.Any
	TextFileSpaceDelimiter: typing.Any
	TextFileStartRow: typing.Any
	TextFileTabDelimiter: typing.Any
	TextFileTextQualifier: typing.Any
	TextFileThousandsSeparator: typing.Any
	TextFileTrailingMinusNumbers: typing.Any
	TextFileVisualLayout: typing.Any
	WebConsecutiveDelimitersAsOne: typing.Any
	WebDisableDateRecognition: typing.Any
	WebDisableRedirections: typing.Any
	WebFormatting: typing.Any
	WebPreFormattedTextToColumns: typing.Any
	WebSelectionType: typing.Any
	WebSingleBlockTextImport: typing.Any
	WebTables: typing.Any
	WorkbookConnection: typing.Any
	_Sort: typing.Any
	def __iter__(self):
		...

class _OLEObject(typing.Protocol):

	def Activate(self) -> typing.Any:
		...
	def BringToFront(self) -> typing.Any:
		...
	def Copy(self) -> typing.Any:
		...
	def CopyPicture(self, Appearance: XlPictureAppearance=2, Format: XlCopyPictureFormat=-4147) -> typing.Any:
		...
	def Cut(self) -> typing.Any:
		...
	def Delete(self) -> typing.Any:
		...
	def Duplicate(self) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def SendToBack(self) -> typing.Any:
		...
	def Update(self) -> typing.Any:
		...
	def Verb(self, Verb: XlOLEVerb=1) -> typing.Any:
		...
	AltHTML: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	AutoLoad: typing.Any
	AutoUpdate: typing.Any
		# Method 'Border' returns object of type 'Border'
	Border: Border
		# Method 'BottomRightCell' returns object of type 'Range'
	BottomRightCell: Range
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	Enabled: typing.Any
	Height: typing.Any
	Index: typing.Any
		# Method 'Interior' returns object of type 'Interior'
	Interior: Interior
	Left: typing.Any
	LinkedCell: typing.Any
	ListFillRange: typing.Any
	Locked: typing.Any
	Name: typing.Any
	OLEType: typing.Any
	Object: typing.Any
	OnAction: typing.Any
	Parent: typing.Any
	Placement: typing.Any
	PrintObject: typing.Any
	Shadow: typing.Any
		# Method 'ShapeRange' returns object of type 'ShapeRange'
	ShapeRange: ShapeRange
	SourceName: typing.Any
	Top: typing.Any
		# Method 'TopLeftCell' returns object of type 'Range'
	TopLeftCell: Range
	Visible: typing.Any
	Width: typing.Any
	ZOrder: typing.Any
	progID: typing.Any
	def __iter__(self):
		...

class _QueryTable(typing.Protocol):

	def CancelRefresh(self) -> None:
		...
	def Delete(self) -> None:
		...
	def Refresh(self, BackgroundQuery: typing.Any=defaultNamedOptArg) -> bool:
		...
	def ResetTimer(self) -> None:
		...
	def SaveAsODC(self, ODCFileName: str=defaultNamedNotOptArg, Description: typing.Any=defaultNamedOptArg, Keywords: typing.Any=defaultNamedOptArg) -> None:
		...
	AdjustColumnWidth: typing.Any
		# Method 'Application' returns object of type 'Application'
	Application: Application
	BackgroundQuery: typing.Any
	CommandText: typing.Any
		# Method 'CommandType' returns enumeration of type 'XlCmdType'
	CommandType: XlCmdType
	Connection: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'Destination' returns object of type 'Range'
	Destination: Range
	EditWebPage: typing.Any
	EnableEditing: typing.Any
	EnableRefresh: typing.Any
	FetchedRowOverflow: typing.Any
	FieldNames: typing.Any
	FillAdjacentFormulas: typing.Any
	HasAutoFormat: typing.Any
		# Method 'ListObject' returns object of type 'ListObject'
	ListObject: ListObject
	MaintainConnection: typing.Any
	Name: typing.Any
		# Method 'Parameters' returns object of type 'Parameters'
	Parameters: Parameters
	Parent: typing.Any
	PostText: typing.Any
	PreserveColumnInfo: typing.Any
	PreserveFormatting: typing.Any
		# Method 'QueryType' returns enumeration of type 'XlQueryType'
	QueryType: XlQueryType
	Recordset: typing.Any
	RefreshOnFileOpen: typing.Any
	RefreshPeriod: typing.Any
		# Method 'RefreshStyle' returns enumeration of type 'XlCellInsertionMode'
	RefreshStyle: XlCellInsertionMode
	Refreshing: typing.Any
		# Method 'ResultRange' returns object of type 'Range'
	ResultRange: Range
		# Method 'RobustConnect' returns enumeration of type 'XlRobustConnect'
	RobustConnect: XlRobustConnect
	RowNumbers: typing.Any
	SaveData: typing.Any
	SavePassword: typing.Any
		# Method 'Sort' returns object of type 'Sort'
	Sort: Sort
	SourceConnectionFile: typing.Any
	SourceDataFile: typing.Any
	Sql: typing.Any
	TablesOnlyFromHTML: typing.Any
	TextFileColumnDataTypes: typing.Any
	TextFileCommaDelimiter: typing.Any
	TextFileConsecutiveDelimiter: typing.Any
	TextFileDecimalSeparator: typing.Any
	TextFileFixedColumnWidths: typing.Any
	TextFileOtherDelimiter: typing.Any
		# Method 'TextFileParseType' returns enumeration of type 'XlTextParsingType'
	TextFileParseType: XlTextParsingType
	TextFilePlatform: typing.Any
	TextFilePromptOnRefresh: typing.Any
	TextFileSemicolonDelimiter: typing.Any
	TextFileSpaceDelimiter: typing.Any
	TextFileStartRow: typing.Any
	TextFileTabDelimiter: typing.Any
		# Method 'TextFileTextQualifier' returns enumeration of type 'XlTextQualifier'
	TextFileTextQualifier: XlTextQualifier
	TextFileThousandsSeparator: typing.Any
	TextFileTrailingMinusNumbers: typing.Any
		# Method 'TextFileVisualLayout' returns enumeration of type 'XlTextVisualLayoutType'
	TextFileVisualLayout: XlTextVisualLayoutType
	WebConsecutiveDelimitersAsOne: typing.Any
	WebDisableDateRecognition: typing.Any
	WebDisableRedirections: typing.Any
		# Method 'WebFormatting' returns enumeration of type 'XlWebFormatting'
	WebFormatting: XlWebFormatting
	WebPreFormattedTextToColumns: typing.Any
		# Method 'WebSelectionType' returns enumeration of type 'XlWebSelectionType'
	WebSelectionType: XlWebSelectionType
	WebSingleBlockTextImport: typing.Any
	WebTables: typing.Any
		# Method 'WorkbookConnection' returns object of type 'WorkbookConnection'
	WorkbookConnection: WorkbookConnection
		# Method '_Sort' returns object of type 'Sort'
	_Sort: Sort
	def __iter__(self):
		...

class _Workbook(typing.Protocol):

	def AcceptAllChanges(self, When: typing.Any=defaultNamedOptArg, Who: typing.Any=defaultNamedOptArg, Where: typing.Any=defaultNamedOptArg) -> None:
		...
	def Activate(self) -> None:
		...
	def AddToFavorites(self) -> None:
		...
	def ApplyTheme(self, Filename: str=defaultNamedNotOptArg) -> None:
		...
	def BreakLink(self, Name: str=defaultNamedNotOptArg, Type: XlLinkType=defaultNamedNotOptArg) -> None:
		...
	def CanCheckIn(self) -> bool:
		...
	def ChangeFileAccess(self, Mode: XlFileAccess=defaultNamedNotOptArg, WritePassword: typing.Any=defaultNamedOptArg, Notify: typing.Any=defaultNamedOptArg) -> None:
		...
	def ChangeLink(self, Name: str=defaultNamedNotOptArg, NewName: str=defaultNamedNotOptArg, Type: XlLinkType=1) -> None:
		...
	def CheckIn(self, SaveChanges: typing.Any=defaultNamedOptArg, Comments: typing.Any=defaultNamedOptArg, MakePublic: typing.Any=defaultNamedOptArg) -> None:
		...
	def CheckInWithVersion(self, SaveChanges: typing.Any=defaultNamedOptArg, Comments: typing.Any=defaultNamedOptArg, MakePublic: typing.Any=defaultNamedOptArg, VersionType: typing.Any=defaultNamedOptArg) -> None:
		...
	def Close(self, SaveChanges: typing.Any=defaultNamedOptArg, Filename: typing.Any=defaultNamedOptArg, RouteWorkbook: typing.Any=defaultNamedOptArg) -> None:
		...
	def ConvertComments(self) -> None:
		...
	def CreateForecastSheet(self, Timeline: Range=defaultNamedNotOptArg, Values: Range=defaultNamedNotOptArg, ForecastStart: typing.Any=defaultNamedOptArg, ForecastEnd: typing.Any=defaultNamedOptArg
			, ConfInt: typing.Any=defaultNamedOptArg, Seasonality: typing.Any=defaultNamedOptArg, DataCompletion: typing.Any=defaultNamedOptArg, Aggregation: typing.Any=defaultNamedOptArg, ChartType: typing.Any=defaultNamedOptArg
			, ShowStatsTable: typing.Any=defaultNamedOptArg) -> None:
		...
	def DeleteNumberFormat(self, NumberFormat: str=defaultNamedNotOptArg) -> None:
		...
	def Dummy16(self) -> None:
		...
	def Dummy17(self, calcid: int=defaultNamedNotOptArg) -> None:
		...
	def Dummy26(self) -> None:
		...
	def Dummy27(self) -> None:
		...
	def EnableConnections(self) -> None:
		...
	def EndReview(self) -> None:
		...
	def ExclusiveAccess(self) -> bool:
		...
	def ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg
			, WorkIdentity: typing.Any=defaultNamedOptArg) -> None:
		...
	def FollowHyperlink(self, Address: str=defaultNamedNotOptArg, SubAddress: typing.Any=defaultNamedOptArg, NewWindow: typing.Any=defaultNamedOptArg, AddHistory: typing.Any=defaultNamedOptArg
			, ExtraInfo: typing.Any=defaultNamedOptArg, Method: typing.Any=defaultNamedOptArg, HeaderInfo: typing.Any=defaultNamedOptArg) -> None:
		...
	def ForwardMailer(self) -> None:
		...
	# The method GetColors is actually a property, but must be used as a method to correctly pass the arguments
	def GetColors(self, Index: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	# Result is of type WorkflowTasks
	def GetWorkflowTasks(self) -> WorkflowTasks:
		...
	# Result is of type WorkflowTemplates
	def GetWorkflowTemplates(self) -> WorkflowTemplates:
		...
	def HighlightChangesOptions(self, When: typing.Any=defaultNamedOptArg, Who: typing.Any=defaultNamedOptArg, Where: typing.Any=defaultNamedOptArg) -> None:
		...
	def LinkInfo(self, Name: str=defaultNamedNotOptArg, LinkInfo: XlLinkInfo=defaultNamedNotOptArg, Type: typing.Any=defaultNamedOptArg, EditionRef: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def LinkSources(self, Type: typing.Any=defaultNamedOptArg) -> typing.Any:
		...
	def LockServerFile(self) -> None:
		...
	# Result is of type PublishedDocs
	def LookUpInDocs(self, Filename: typing.Any=defaultNamedOptArg) -> PublishedDocs:
		...
	def MergeWorkbook(self, Filename: typing.Any=defaultNamedNotOptArg) -> None:
		...
	# Result is of type Window
	def NewWindow(self) -> Window:
		...
	def OpenLinks(self, Name: str=defaultNamedNotOptArg, ReadOnly: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type PivotCaches
	def PivotCaches(self) -> PivotCaches:
		...
	def PivotTableWizard(self, SourceType: typing.Any=defaultNamedOptArg, SourceData: typing.Any=defaultNamedOptArg, TableDestination: typing.Any=defaultNamedOptArg, TableName: typing.Any=defaultNamedOptArg
			, RowGrand: typing.Any=defaultNamedOptArg, ColumnGrand: typing.Any=defaultNamedOptArg, SaveData: typing.Any=defaultNamedOptArg, HasAutoFormat: typing.Any=defaultNamedOptArg, AutoPage: typing.Any=defaultNamedOptArg
			, Reserved: typing.Any=defaultNamedOptArg, BackgroundQuery: typing.Any=defaultNamedOptArg, OptimizeCache: typing.Any=defaultNamedOptArg, PageFieldOrder: typing.Any=defaultNamedOptArg, PageFieldWrapCount: typing.Any=defaultNamedOptArg
			, ReadData: typing.Any=defaultNamedOptArg, Connection: typing.Any=defaultNamedOptArg) -> None:
		...
	def Post(self, DestName: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg, IgnorePrintAreas: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Protect(self, Password: typing.Any=defaultNamedOptArg, Structure: typing.Any=defaultNamedOptArg, Windows: typing.Any=defaultNamedOptArg) -> None:
		...
	def ProtectSharing(self, Filename: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg, ReadOnlyRecommended: typing.Any=defaultNamedOptArg
			, CreateBackup: typing.Any=defaultNamedOptArg, SharingPassword: typing.Any=defaultNamedOptArg, FileFormat: typing.Any=defaultNamedOptArg) -> None:
		...
	def PublishToDocs(self, Title: str=defaultNamedNotOptArg, DisclosureScope: XlPublishToDocsDisclosureScope=defaultNamedNotOptArg, OverwriteUrl: typing.Any=defaultNamedOptArg) -> str:
		...
	def PublishToPBI(self, PublishType: typing.Any=defaultNamedOptArg, nameConflict: typing.Any=defaultNamedOptArg, bstrGroupName: typing.Any=defaultNamedOptArg) -> str:
		...
	def PurgeChangeHistoryNow(self, Days: int=defaultNamedNotOptArg, SharingPassword: typing.Any=defaultNamedOptArg) -> None:
		...
	def RecheckSmartTags(self) -> None:
		...
	def RefreshAll(self) -> None:
		...
	def RejectAllChanges(self, When: typing.Any=defaultNamedOptArg, Who: typing.Any=defaultNamedOptArg, Where: typing.Any=defaultNamedOptArg) -> None:
		...
	def ReloadAs(self, Encoding: MsoEncoding=defaultNamedNotOptArg) -> None:
		...
	def RemoveDocumentInformation(self, RemoveDocInfoType: XlRemoveDocInfoType=defaultNamedNotOptArg) -> None:
		...
	def RemoveUser(self, Index: int=defaultNamedNotOptArg) -> None:
		...
	def Reply(self) -> None:
		...
	def ReplyAll(self) -> None:
		...
	def ReplyWithChanges(self, ShowMessage: typing.Any=defaultNamedOptArg) -> None:
		...
	def ResetColors(self) -> None:
		...
	def Route(self) -> None:
		...
	def RunAutoMacros(self, Which: XlRunAutoMacro=defaultNamedNotOptArg) -> None:
		...
	def Save(self) -> None:
		...
	def SaveAs(self, Filename: typing.Any=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedNotOptArg, Password: typing.Any=defaultNamedNotOptArg, WriteResPassword: typing.Any=defaultNamedNotOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedNotOptArg, CreateBackup: typing.Any=defaultNamedNotOptArg, AccessMode: XlSaveAsAccessMode=1, ConflictResolution: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg
			, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg, Local: typing.Any=defaultNamedOptArg, WorkIdentity: typing.Any=defaultNamedOptArg) -> None:
		...
	def SaveAsXMLData(self, Filename: str=defaultNamedNotOptArg, Map: XmlMap=defaultNamedNotOptArg) -> None:
		...
	def SaveCopyAs(self, Filename: typing.Any=defaultNamedOptArg) -> None:
		...
	def SendFaxOverInternet(self, Recipients: typing.Any=defaultNamedOptArg, Subject: typing.Any=defaultNamedOptArg, ShowMessage: typing.Any=defaultNamedOptArg) -> None:
		...
	def SendForReview(self, Recipients: typing.Any=defaultNamedOptArg, Subject: typing.Any=defaultNamedOptArg, ShowMessage: typing.Any=defaultNamedOptArg, IncludeAttachment: typing.Any=defaultNamedOptArg) -> None:
		...
	def SendMail(self, Recipients: typing.Any=defaultNamedNotOptArg, Subject: typing.Any=defaultNamedOptArg, ReturnReceipt: typing.Any=defaultNamedOptArg) -> None:
		...
	def SendMailer(self, FileFormat: typing.Any=defaultNamedNotOptArg, Priority: XlPriority=-4143) -> None:
		...
	# The method SetColors is actually a property, but must be used as a method to correctly pass the arguments
	def SetColors(self, Index: typing.Any=defaultNamedNotOptArg, arg1: typing.Any=defaultUnnamedArg) -> None:
		...
	def SetLinkOnData(self, Name: str=defaultNamedNotOptArg, Procedure: typing.Any=defaultNamedOptArg) -> None:
		...
	def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider: typing.Any=defaultNamedOptArg, PasswordEncryptionAlgorithm: typing.Any=defaultNamedOptArg, PasswordEncryptionKeyLength: typing.Any=defaultNamedOptArg, PasswordEncryptionFileProperties: typing.Any=defaultNamedOptArg) -> None:
		...
	def ToggleFormsDesign(self) -> None:
		...
	def Unprotect(self, Password: typing.Any=defaultNamedOptArg) -> None:
		...
	def UnprotectSharing(self, SharingPassword: typing.Any=defaultNamedOptArg) -> None:
		...
	def UpdateFromFile(self) -> None:
		...
	def UpdateLink(self, Name: typing.Any=defaultNamedOptArg, Type: typing.Any=defaultNamedOptArg) -> None:
		...
	def WebPagePreview(self) -> None:
		...
	# Result is of type XlXmlImportResult
	def XmlImport(self, Url: str=defaultNamedNotOptArg, ImportMap: XmlMap=pythoncom.Missing, Overwrite: typing.Any=defaultNamedOptArg, Destination: typing.Any=defaultNamedOptArg) -> XlXmlImportResult:
		...
	# Result is of type XlXmlImportResult
	def XmlImportXml(self, Data: str=defaultNamedNotOptArg, ImportMap: XmlMap=pythoncom.Missing, Overwrite: typing.Any=defaultNamedOptArg, Destination: typing.Any=defaultNamedOptArg) -> XlXmlImportResult:
		...
	def _ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Protect(self, Password: typing.Any=defaultNamedOptArg, Structure: typing.Any=defaultNamedOptArg, Windows: typing.Any=defaultNamedOptArg) -> None:
		...
	def _ProtectSharing(self, Filename: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg, ReadOnlyRecommended: typing.Any=defaultNamedOptArg
			, CreateBackup: typing.Any=defaultNamedOptArg, SharingPassword: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs(self, Filename: typing.Any=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedNotOptArg, Password: typing.Any=defaultNamedNotOptArg, WriteResPassword: typing.Any=defaultNamedNotOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedNotOptArg, CreateBackup: typing.Any=defaultNamedNotOptArg, AccessMode: XlSaveAsAccessMode=1, ConflictResolution: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg
			, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs_(self, Filename: typing.Any=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedNotOptArg, Password: typing.Any=defaultNamedNotOptArg, WriteResPassword: typing.Any=defaultNamedNotOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedNotOptArg, CreateBackup: typing.Any=defaultNamedNotOptArg, AccessMode: XlSaveAsAccessMode=1, ConflictResolution: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg
			, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
	def sblt(self, s: str=defaultNamedNotOptArg) -> None:
		...
	AcceptLabelsInFormulas: typing.Any
	AccuracyVersion: typing.Any
		# Method 'ActiveChart' returns object of type 'Chart'
	ActiveChart: Chart
	ActiveSheet: typing.Any
		# Method 'ActiveSlicer' returns object of type 'Slicer'
	ActiveSlicer: Slicer
		# Method 'Application' returns object of type 'Application'
	Application: Application
	Author: typing.Any
	AutoSaveOn: typing.Any
	AutoUpdateFrequency: typing.Any
	AutoUpdateSaveChanges: typing.Any
	BuiltinDocumentProperties: typing.Any
	CalculationVersion: typing.Any
	CaseSensitive: typing.Any
	ChangeHistoryDuration: typing.Any
	ChartDataPointTrack: typing.Any
		# Method 'Charts' returns object of type 'Sheets'
	Charts: Sheets
	CheckCompatibility: typing.Any
	CodeName: typing.Any
	Colors: typing.Any
		# Method 'CommandBars' returns object of type 'CommandBars'
	CommandBars: CommandBars
	Comments: typing.Any
		# Method 'ConflictResolution' returns enumeration of type 'XlSaveConflictResolution'
	ConflictResolution: XlSaveConflictResolution
		# Method 'Connections' returns object of type 'Connections'
	Connections: Connections
	ConnectionsDisabled: typing.Any
	Container: typing.Any
		# Method 'ContentTypeProperties' returns object of type 'MetaProperties'
	ContentTypeProperties: MetaProperties
	CreateBackup: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
	CustomDocumentProperties: typing.Any
		# Method 'CustomViews' returns object of type 'CustomViews'
	CustomViews: CustomViews
		# Method 'CustomXMLParts' returns object of type 'CustomXMLParts'
	CustomXMLParts: CustomXMLParts
	Date1904: typing.Any
	DefaultPivotTableStyle: typing.Any
	DefaultSlicerStyle: typing.Any
	DefaultTableStyle: typing.Any
	DefaultTimelineStyle: typing.Any
		# Method 'DialogSheets' returns object of type 'Sheets'
	DialogSheets: Sheets
		# Method 'DisplayDrawingObjects' returns enumeration of type 'XlDisplayDrawingObjects'
	DisplayDrawingObjects: XlDisplayDrawingObjects
	DisplayInkComments: typing.Any
	DoNotPromptForConvert: typing.Any
		# Method 'DocumentInspectors' returns object of type 'DocumentInspectors'
	DocumentInspectors: DocumentInspectors
		# Method 'DocumentLibraryVersions' returns object of type 'DocumentLibraryVersions'
	DocumentLibraryVersions: DocumentLibraryVersions
	EnableAutoRecover: typing.Any
	EncryptionProvider: typing.Any
	EnvelopeVisible: typing.Any
		# Method 'Excel4IntlMacroSheets' returns object of type 'Sheets'
	Excel4IntlMacroSheets: Sheets
		# Method 'Excel4MacroSheets' returns object of type 'Sheets'
	Excel4MacroSheets: Sheets
	Excel8CompatibilityMode: typing.Any
		# Method 'FileFormat' returns enumeration of type 'XlFileFormat'
	FileFormat: XlFileFormat
	Final: typing.Any
	ForceFullCalculation: typing.Any
	FullName: typing.Any
	FullNameURLEncoded: typing.Any
		# Method 'HTMLProject' returns object of type 'HTMLProject'
	HTMLProject: HTMLProject
	HasMailer: typing.Any
	HasPassword: typing.Any
	HasRoutingSlip: typing.Any
	HasVBProject: typing.Any
	HighlightChangesOnScreen: typing.Any
		# Method 'IconSets' returns object of type 'IconSets'
	IconSets: IconSets
	InactiveListBorderVisible: typing.Any
	IsAddin: typing.Any
	IsInplace: typing.Any
	KeepChangeHistory: typing.Any
	Keywords: typing.Any
	ListChangesOnNewSheet: typing.Any
		# Method 'Mailer' returns object of type 'Mailer'
	Mailer: Mailer
		# Method 'Model' returns object of type 'Model'
	Model: Model
		# Method 'Modules' returns object of type 'Sheets'
	Modules: Sheets
	MultiUserEditing: typing.Any
	Name: typing.Any
		# Method 'Names' returns object of type 'Names'
	Names: Names
	OnSave: typing.Any
	OnSheetActivate: typing.Any
	OnSheetDeactivate: typing.Any
	Parent: typing.Any
	Password: typing.Any
	PasswordEncryptionAlgorithm: typing.Any
	PasswordEncryptionFileProperties: typing.Any
	PasswordEncryptionKeyLength: typing.Any
	PasswordEncryptionProvider: typing.Any
	Path: typing.Any
		# Method 'Permission' returns object of type 'Permission'
	Permission: Permission
	PersonalViewListSettings: typing.Any
	PersonalViewPrintSettings: typing.Any
	PivotTables: typing.Any
	PrecisionAsDisplayed: typing.Any
	ProtectStructure: typing.Any
	ProtectWindows: typing.Any
		# Method 'PublishObjects' returns object of type 'PublishObjects'
	PublishObjects: PublishObjects
		# Method 'Queries' returns object of type 'Queries'
	Queries: Queries
	ReadOnly: typing.Any
	ReadOnlyRecommended: typing.Any
	RemovePersonalInformation: typing.Any
		# Method 'Research' returns object of type 'Research'
	Research: Research
	RevisionNumber: typing.Any
	Routed: typing.Any
		# Method 'RoutingSlip' returns object of type 'RoutingSlip'
	RoutingSlip: RoutingSlip
	SaveLinkValues: typing.Any
	Saved: typing.Any
		# Method 'SensitivityLabel' returns object of type 'ISensitivityLabel'
	SensitivityLabel: ISensitivityLabel
		# Method 'ServerPolicy' returns object of type 'ServerPolicy'
	ServerPolicy: ServerPolicy
		# Method 'ServerViewableItems' returns object of type 'ServerViewableItems'
	ServerViewableItems: ServerViewableItems
		# Method 'SharedWorkspace' returns object of type 'SharedWorkspace'
	SharedWorkspace: SharedWorkspace
		# Method 'Sheets' returns object of type 'Sheets'
	Sheets: Sheets
	ShowConflictHistory: typing.Any
	ShowPivotChartActiveFields: typing.Any
	ShowPivotTableFieldList: typing.Any
		# Method 'Signatures' returns object of type 'SignatureSet'
	Signatures: SignatureSet
		# Method 'SlicerCaches' returns object of type 'SlicerCaches'
	SlicerCaches: SlicerCaches
		# Method 'SmartDocument' returns object of type 'SmartDocument'
	SmartDocument: SmartDocument
		# Method 'SmartTagOptions' returns object of type 'SmartTagOptions'
	SmartTagOptions: SmartTagOptions
		# Method 'Styles' returns object of type 'Styles'
	Styles: Styles
	Subject: typing.Any
		# Method 'Sync' returns object of type 'Sync'
	Sync: Sync
		# Method 'TableStyles' returns object of type 'TableStyles'
	TableStyles: TableStyles
	TemplateRemoveExtData: typing.Any
		# Method 'Theme' returns object of type 'OfficeTheme'
	Theme: OfficeTheme
	Title: typing.Any
		# Method 'UpdateLinks' returns enumeration of type 'XlUpdateLinks'
	UpdateLinks: XlUpdateLinks
	UpdateRemoteReferences: typing.Any
	UseWholeCellCriteria: typing.Any
	UseWildcards: typing.Any
	UserControl: typing.Any
	UserStatus: typing.Any
	VBASigned: typing.Any
		# Method 'VBProject' returns object of type 'VBProject'
	VBProject: VBProject
		# Method 'WebOptions' returns object of type 'WebOptions'
	WebOptions: WebOptions
		# Method 'Windows' returns object of type 'Windows'
	Windows: Windows
	WorkIdentity: typing.Any
		# Method 'Worksheets' returns object of type 'Sheets'
	Worksheets: Sheets
	WritePassword: typing.Any
	WriteReserved: typing.Any
	WriteReservedBy: typing.Any
		# Method 'XmlMaps' returns object of type 'XmlMaps'
	XmlMaps: XmlMaps
		# Method 'XmlNamespaces' returns object of type 'XmlNamespaces'
	XmlNamespaces: XmlNamespaces
	_CodeName: typing.Any
	_ReadOnlyRecommended: typing.Any
	def __iter__(self):
		...

class _Worksheet(typing.Protocol):

	def Activate(self) -> None:
		...
	def Arcs(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Buttons(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Calculate(self) -> None:
		...
	def ChartObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def CheckBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg) -> None:
		...
	def CircleInvalid(self) -> None:
		...
	def ClearArrows(self) -> None:
		...
	def ClearCircles(self) -> None:
		...
	def Copy(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def Delete(self) -> None:
		...
	def DrawingObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Drawings(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def DropDowns(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg
			, WorkIdentity: typing.Any=defaultNamedOptArg) -> None:
		...
	def GroupBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def GroupObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Labels(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Lines(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ListBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Move(self, Before: typing.Any=defaultNamedOptArg, After: typing.Any=defaultNamedOptArg) -> None:
		...
	def OLEObjects(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def OptionButtons(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Ovals(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Paste(self, Destination: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg) -> None:
		...
	def PasteSpecial(self, Format: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg, DisplayAsIcon: typing.Any=defaultNamedOptArg, IconFileName: typing.Any=defaultNamedOptArg
			, IconIndex: typing.Any=defaultNamedOptArg, IconLabel: typing.Any=defaultNamedOptArg, NoHTMLFormatting: typing.Any=defaultNamedOptArg) -> None:
		...
	def Pictures(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	# Result is of type PivotTable
	def PivotTableWizard(self, SourceType: typing.Any=defaultNamedOptArg, SourceData: typing.Any=defaultNamedOptArg, TableDestination: typing.Any=defaultNamedOptArg, TableName: typing.Any=defaultNamedOptArg
			, RowGrand: typing.Any=defaultNamedOptArg, ColumnGrand: typing.Any=defaultNamedOptArg, SaveData: typing.Any=defaultNamedOptArg, HasAutoFormat: typing.Any=defaultNamedOptArg, AutoPage: typing.Any=defaultNamedOptArg
			, Reserved: typing.Any=defaultNamedOptArg, BackgroundQuery: typing.Any=defaultNamedOptArg, OptimizeCache: typing.Any=defaultNamedOptArg, PageFieldOrder: typing.Any=defaultNamedOptArg, PageFieldWrapCount: typing.Any=defaultNamedOptArg
			, ReadData: typing.Any=defaultNamedOptArg, Connection: typing.Any=defaultNamedOptArg) -> PivotTable:
		...
	def PivotTables(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg, IgnorePrintAreas: typing.Any=defaultNamedOptArg) -> None:
		...
	def PrintPreview(self, EnableChanges: typing.Any=defaultNamedOptArg) -> None:
		...
	def Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg, AllowFormattingCells: typing.Any=defaultNamedOptArg, AllowFormattingColumns: typing.Any=defaultNamedOptArg, AllowFormattingRows: typing.Any=defaultNamedOptArg, AllowInsertingColumns: typing.Any=defaultNamedOptArg
			, AllowInsertingRows: typing.Any=defaultNamedOptArg, AllowInsertingHyperlinks: typing.Any=defaultNamedOptArg, AllowDeletingColumns: typing.Any=defaultNamedOptArg, AllowDeletingRows: typing.Any=defaultNamedOptArg, AllowSorting: typing.Any=defaultNamedOptArg
			, AllowFiltering: typing.Any=defaultNamedOptArg, AllowUsingPivotTables: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Range
	# The method Range is actually a property, but must be used as a method to correctly pass the arguments
	def Range(self, Cell1: typing.Any=defaultNamedNotOptArg, Cell2: typing.Any=defaultNamedOptArg) -> Range:
		...
	def Rectangles(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ResetAllPageBreaks(self) -> None:
		...
	def SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def Scenarios(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def ScrollBars(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Select(self, Replace: typing.Any=defaultNamedOptArg) -> None:
		...
	def SetBackgroundPicture(self, Filename: str=defaultNamedNotOptArg) -> None:
		...
	def ShowAllData(self) -> None:
		...
	def ShowDataForm(self) -> None:
		...
	def Spinners(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def TextBoxes(self, Index: typing.Any=defaultNamedOptArg) -> Dispatch:
		...
	def Unprotect(self, Password: typing.Any=defaultNamedOptArg) -> None:
		...
	# Result is of type Range
	def XmlDataQuery(self, XPath: str=defaultNamedNotOptArg, SelectionNamespaces: typing.Any=defaultNamedOptArg, Map: typing.Any=defaultNamedOptArg) -> Range:
		...
	# Result is of type Range
	def XmlMapQuery(self, XPath: str=defaultNamedNotOptArg, SelectionNamespaces: typing.Any=defaultNamedOptArg, Map: typing.Any=defaultNamedOptArg) -> Range:
		...
	def _CheckSpelling(self, CustomDictionary: typing.Any=defaultNamedOptArg, IgnoreUppercase: typing.Any=defaultNamedOptArg, AlwaysSuggest: typing.Any=defaultNamedOptArg, SpellLang: typing.Any=defaultNamedOptArg
			, IgnoreFinalYaa: typing.Any=defaultNamedOptArg, SpellScript: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Evaluate(self, Name: typing.Any=defaultNamedNotOptArg) -> typing.Any:
		...
	def _ExportAsFixedFormat(self, Type: XlFixedFormatType=defaultNamedNotOptArg, Filename: typing.Any=defaultNamedOptArg, Quality: typing.Any=defaultNamedOptArg, IncludeDocProperties: typing.Any=defaultNamedOptArg
			, IgnorePrintAreas: typing.Any=defaultNamedOptArg, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, OpenAfterPublish: typing.Any=defaultNamedOptArg, FixedFormatExtClassPtr: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PasteSpecial(self, Format: typing.Any=defaultNamedOptArg, Link: typing.Any=defaultNamedOptArg, DisplayAsIcon: typing.Any=defaultNamedOptArg, IconFileName: typing.Any=defaultNamedOptArg
			, IconIndex: typing.Any=defaultNamedOptArg, IconLabel: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg, PrToFileName: typing.Any=defaultNamedOptArg) -> None:
		...
	def _Protect(self, Password: typing.Any=defaultNamedOptArg, DrawingObjects: typing.Any=defaultNamedOptArg, Contents: typing.Any=defaultNamedOptArg, Scenarios: typing.Any=defaultNamedOptArg
			, UserInterfaceOnly: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg
			, Local: typing.Any=defaultNamedOptArg) -> None:
		...
	def _PrintOut_(self, From: typing.Any=defaultNamedOptArg, To: typing.Any=defaultNamedOptArg, Copies: typing.Any=defaultNamedOptArg, Preview: typing.Any=defaultNamedOptArg
			, ActivePrinter: typing.Any=defaultNamedOptArg, PrintToFile: typing.Any=defaultNamedOptArg, Collate: typing.Any=defaultNamedOptArg) -> None:
		...
	def _SaveAs_(self, Filename: str=defaultNamedNotOptArg, FileFormat: typing.Any=defaultNamedOptArg, Password: typing.Any=defaultNamedOptArg, WriteResPassword: typing.Any=defaultNamedOptArg
			, ReadOnlyRecommended: typing.Any=defaultNamedOptArg, CreateBackup: typing.Any=defaultNamedOptArg, AddToMru: typing.Any=defaultNamedOptArg, TextCodepage: typing.Any=defaultNamedOptArg, TextVisualLayout: typing.Any=defaultNamedOptArg) -> None:
		...
		# Method 'Application' returns object of type 'Application'
	Application: Application
		# Method 'AutoFilter' returns object of type 'AutoFilter'
	AutoFilter: AutoFilter
	AutoFilterMode: typing.Any
		# Method 'Cells' returns object of type 'Range'
	Cells: Range
		# Method 'CircularReference' returns object of type 'Range'
	CircularReference: Range
	CodeName: typing.Any
		# Method 'Columns' returns object of type 'Range'
	Columns: Range
		# Method 'Comments' returns object of type 'Comments'
	Comments: Comments
		# Method 'CommentsThreaded' returns object of type 'CommentsThreaded'
	CommentsThreaded: CommentsThreaded
		# Method 'ConsolidationFunction' returns enumeration of type 'XlConsolidationFunction'
	ConsolidationFunction: XlConsolidationFunction
	ConsolidationOptions: typing.Any
	ConsolidationSources: typing.Any
		# Method 'Creator' returns enumeration of type 'XlCreator'
	Creator: XlCreator
		# Method 'CustomProperties' returns object of type 'CustomProperties'
	CustomProperties: CustomProperties
	DisplayAutomaticPageBreaks: typing.Any
	DisplayPageBreaks: typing.Any
	DisplayRightToLeft: typing.Any
	EnableAutoFilter: typing.Any
	EnableCalculation: typing.Any
	EnableFormatConditionsCalculation: typing.Any
	EnableOutlining: typing.Any
	EnablePivotTable: typing.Any
		# Method 'EnableSelection' returns enumeration of type 'XlEnableSelection'
	EnableSelection: XlEnableSelection
	FilterMode: typing.Any
		# Method 'HPageBreaks' returns object of type 'HPageBreaks'
	HPageBreaks: HPageBreaks
		# Method 'Hyperlinks' returns object of type 'Hyperlinks'
	Hyperlinks: Hyperlinks
	Index: typing.Any
		# Method 'ListObjects' returns object of type 'ListObjects'
	ListObjects: ListObjects
		# Method 'MailEnvelope' returns object of type 'MsoEnvelope'
	MailEnvelope: MsoEnvelope
	Name: typing.Any
		# Method 'NamedSheetViews' returns object of type 'NamedSheetViewCollection'
	NamedSheetViews: NamedSheetViewCollection
		# Method 'Names' returns object of type 'Names'
	Names: Names
	Next: typing.Any
	OnCalculate: typing.Any
	OnData: typing.Any
	OnDoubleClick: typing.Any
	OnEntry: typing.Any
	OnSheetActivate: typing.Any
	OnSheetDeactivate: typing.Any
		# Method 'Outline' returns object of type 'Outline'
	Outline: Outline
		# Method 'PageSetup' returns object of type 'PageSetup'
	PageSetup: PageSetup
	Parent: typing.Any
	Previous: typing.Any
	PrintedCommentPages: typing.Any
	ProtectContents: typing.Any
	ProtectDrawingObjects: typing.Any
	ProtectScenarios: typing.Any
		# Method 'Protection' returns object of type 'Protection'
	Protection: Protection
	ProtectionMode: typing.Any
		# Method 'QueryTables' returns object of type 'QueryTables'
	QueryTables: QueryTables
		# Method 'Rows' returns object of type 'Range'
	Rows: Range
		# Method 'Scripts' returns object of type 'Scripts'
	Scripts: Scripts
	ScrollArea: typing.Any
		# Method 'Shapes' returns object of type 'Shapes'
	Shapes: Shapes
		# Method 'SmartTags' returns object of type 'SmartTags'
	SmartTags: SmartTags
		# Method 'Sort' returns object of type 'Sort'
	Sort: Sort
	StandardHeight: typing.Any
	StandardWidth: typing.Any
		# Method 'Tab' returns object of type 'Tab'
	Tab: Tab
	TransitionExpEval: typing.Any
	TransitionFormEntry: typing.Any
		# Method 'Type' returns enumeration of type 'XlSheetType'
	Type: XlSheetType
		# Method 'UsedRange' returns object of type 'Range'
	UsedRange: Range
		# Method 'VPageBreaks' returns object of type 'VPageBreaks'
	VPageBreaks: VPageBreaks
		# Method 'Visible' returns enumeration of type 'XlSheetVisibility'
	Visible: XlSheetVisibility
		# Method '_AutoFilter' returns object of type 'AutoFilter'
	_AutoFilter: AutoFilter
	_CodeName: typing.Any
	_DisplayRightToLeft: typing.Any
		# Method '_Sort' returns object of type 'Sort'
	_Sort: Sort
	def __iter__(self):
		...

# This CoClass is known by the name 'Excel.Application.16'
class Application(typing.Protocol): # A CoClass
	...

# This CoClass is known by the name 'Excel.Chart.8'
class Chart(typing.Protocol): # A CoClass
	...

class Global(typing.Protocol): # A CoClass
	...

class OLEObject(typing.Protocol): # A CoClass
	...

class QueryTable(typing.Protocol): # A CoClass
	...

class Workbook(typing.Protocol): # A CoClass
	...

# This CoClass is known by the name 'Excel.Sheet.8'
class Worksheet(typing.Protocol): # A CoClass
	...

